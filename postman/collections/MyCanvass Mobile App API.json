{
	"info": {
		"_postman_id": "a8c4b681-894a-49cc-a757-2f637e8ec8bc",
		"name": "MyCanvass Mobile App API",
		"description": "The Mobile App's API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "28863956-a8c4b681-894a-49cc-a757-2f637e8ec8bc"
	},
	"item": [
		{
			"name": "verify",
			"item": [
				{
					"name": "resend",
					"item": [
						{
							"name": "Resends the SMS 2FA code",
							"id": "c79f4458-7fdc-4e6e-a82b-a7c9cf1468eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"phone\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/verify/resend",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"verify",
										"resend"
									]
								},
								"description": "Resend a 2FA authentication code"
							},
							"response": [
								{
									"id": "a1d0e8cd-5944-4e63-b913-0c1123dcad57",
									"name": "Operation Initiated",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"phone\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.canvass.dev/v1/verify/resend",
											"protocol": "https",
											"host": [
												"api",
												"canvass",
												"dev"
											],
											"path": [
												"v1",
												"verify",
												"resend"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"unique_id\": \"<string>\",\n  \"expiration\": \"<number>\"\n}"
								}
							]
						}
					],
					"id": "7b7c0e3f-4088-4336-b6d9-2a703c2776ea"
				},
				{
					"name": "confirm",
					"item": [
						{
							"name": "Confirm the 2FA code",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Retrieve the JSON data from the response body of the API call.",
											"var jsonData = pm.response.json();",
											"",
											"// Extract the value of the 'access_token' key from the JSON data and store it in the 'variable_value' variable.",
											"var variable_value = jsonData.data.access_token;",
											"",
											"// Set a global variable named 'bearerToken' with the value of the 'variable_value'.",
											"// Global variables can be accessed and used in other requests within this Postman collection.",
											"pm.globals.set(\"bearerToken\", variable_value);",
											"",
											"// Output the value of the 'variable_value' to the Postman console.",
											"// This helps in debugging and verifying that the correct value has been extracted.",
											"console.log(variable_value);",
											"",
											"",
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
											"});",
											"",
											"pm.test(\"Data object structure is valid\", function () {",
											"",
											"    //unique_id validation",
											"    pm.expect(responseJSON.data).has.property('unique_id');",
											"    pm.expect(responseJSON.data).has.property('unique_id').is.string;",
											"    pm.expect(responseJSON.data).has.property('unique_id').is.not.null;",
											"",
											"",
											"    //expires validation",
											"    pm.expect(responseJSON.data).has.property('expires');",
											"    pm.expect(responseJSON.data).has.property('expires').is.string;",
											"    pm.expect(responseJSON.data).has.property('expires').is.not.null;",
											"    pm.expect(responseJSON.data).has.property('expires').is.greaterThan(0);",
											"",
											"})"
										],
										"type": "text/javascript",
										"id": "3159164b-85a4-4c26-ad05-ed7149d0aec6"
									}
								}
							],
							"id": "27ba4f9b-a4f2-4ce3-a00d-60e14ed18f63",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"059093\",\n  \"unique_id\": \"be54fb5e-6c99-4ebb-810b-ea9c1a54743d\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/verify/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"verify",
										"confirm"
									]
								},
								"description": "Once the user has received the code it is provided here to confirm their Authentication."
							},
							"response": [
								{
									"id": "33fd06f0-bf4b-4894-a0a2-11e5aa48a745",
									"name": "Operation Initiated",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<number>\",\n  \"unique_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.canvass.dev/v1/verify/confirm",
											"protocol": "https",
											"host": [
												"api",
												"canvass",
												"dev"
											],
											"path": [
												"v1",
												"verify",
												"confirm"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"access_token\": \"<string>\",\n  \"refresh_token\": \"<string>\"\n}"
								},
								{
									"id": "f8292753-19ae-4b58-bde7-509768c9b20d",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<number>\",\n  \"unique_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/verify/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"verify",
												"confirm"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "35003bcd-6629-4119-88bf-4d0b8fa44be5"
				},
				{
					"name": "Initiate SMS 2FA-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Data object structure is valid\", function () {",
									"",
									"    //unique_id validation",
									"    pm.expect(responseJSON.data).has.property('unique_id');",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.string;",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.not.null;",
									"",
									"",
									"    //expires validation",
									"    pm.expect(responseJSON.data).has.property('expires');",
									"    pm.expect(responseJSON.data).has.property('expires').is.string;",
									"    pm.expect(responseJSON.data).has.property('expires').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('expires').is.greaterThan(0);",
									"",
									"})"
								],
								"type": "text/javascript",
								"id": "99a4cef9-12d4-4475-8d7c-626aecc7f5ae"
							}
						}
					],
					"id": "fe81ea7c-1dc6-4aed-b217-fbca7bb471a3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"702-805-9093\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						},
						"description": "Initiate 2FA authenticate by providing a verification code to the user via SMS."
					},
					"response": [
						{
							"id": "e83c5d3a-a703-4e07-8122-b0afb9bcbd50",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"phone\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/verify",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"verify"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"unique_id\": \"<string>\",\n  \"expiration\": \"<number>\"\n}"
						}
					]
				},
				{
					"name": "Initiate SMS 2FA-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"pm.test(\"Failure Messgae - Phone Number Is Null\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"The phone field is required.\")",
									"})",
									"",
									"pm.test(\"Failure Messgae - Invalid\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"Invalid phone number.\")",
									"})",
									"",
									"",
									"/*",
									"const phoneNumber = pm.variables.get(\"phone\")",
									"if(phoneNumber==null){",
									"pm.expect(responseJSON.message).is.eql(\"The phone field is required.\")",
									"}else {",
									"",
									"pm.expect(responseJSON.message).is.eql(\"Invalid phone number.\")",
									"",
									"}",
									"*/",
									"",
									"console.log(responseJSON.message)"
								],
								"type": "text/javascript",
								"id": "d4031bbd-2822-4f21-9191-0ca1c207d477"
							}
						}
					],
					"id": "9c3a735c-b10f-4b7d-8528-fba9ddb3fdb2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"abcd\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/verify",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"verify"
							]
						},
						"description": "Initiate 2FA authenticate by providing a verification code to the user via SMS."
					},
					"response": [
						{
							"id": "25322ec5-e146-4d23-b088-d791c9e5c39b",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"phone\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/verify",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"verify"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"unique_id\": \"<string>\",\n  \"expiration\": \"<number>\"\n}"
						}
					]
				}
			],
			"id": "4e76dd6f-b1b5-4008-80e0-8bd18787d3b0"
		},
		{
			"name": "signup",
			"item": [
				{
					"name": "Sign up-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d9b823c-d6f2-42ed-add8-835f7ae074bc",
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON.data).to.be.an('object');",
									"    pm.expect(responseJSON.data).to.be.an('object').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - ID\",function(){",
									"",
									"//id validation",
									"    pm.expect(responseJSON.data).has.property('id');",
									"    pm.expect(responseJSON.data).has.property('id').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - email\",function(){",
									"",
									"//email validation",
									"   pm.expect(responseJSON.data).has.property('email');",
									"    pm.expect(responseJSON.data).has.property('email').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('email').is.string;",
									"    pm.expect(responseJSON.data.email).to.match(/^[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/);",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - username\",function(){",
									"",
									"//username validation",
									"    pm.expect(responseJSON.data).has.property('username');",
									"    pm.expect(responseJSON.data).has.property('username').is.string;",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - first_name\",function(){",
									"",
									"    //firstname validation",
									"    pm.expect(responseJSON.data).has.property('first_name');",
									"    pm.expect(responseJSON.data).has.property('first_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - last_name\",function(){",
									"",
									"    //lastname validation",
									"    pm.expect(responseJSON.data).has.property('last_name');",
									"    pm.expect(responseJSON.data).has.property('last_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - affiliation\",function(){",
									"",
									"    //affiliation validation",
									"    pm.expect(responseJSON.data).has.property('affiliation');",
									"    pm.expect(responseJSON.data).has.property('affiliation').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"democrat\", \"republican\", \"independent\",\"other\"]);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - birth_date\",function(){",
									"",
									"    //birthdate validation",
									"    pm.expect(responseJSON.data).has.property('birth_date');",
									"    pm.expect(responseJSON.data).has.property('birth_date').is.string;",
									"    pm.expect(responseJSON.data.birth_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - age_range\",function(){",
									"",
									"    //age_range validation",
									"     pm.expect(responseJSON.data).has.property('age_range');",
									"    pm.expect(responseJSON.data).has.property('age_range').is.string;",
									"    pm.expect(responseJSON.data.age_range).to.be.oneOf([\"18-35\",\"35-55\",\"55+\"]);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - phone_number\",function(){",
									"",
									"    //phone_number validation",
									"    pm.expect(responseJSON.data).has.property('phone');",
									"    pm.expect(responseJSON.data).has.property('phone').is.string;",
									"    pm.expect(responseJSON.data.phone).to.match(/[\\+1\\s]*\\-?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}/);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - city\",function(){",
									"",
									"    //city validation",
									"    pm.expect(responseJSON.data).has.property('city');",
									"    pm.expect(responseJSON.data).has.property('city').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - state\",function(){",
									"",
									"    //state validation",
									"   pm.expect(responseJSON.data).has.property('state');",
									"    pm.expect(responseJSON.data).has.property('state').is.string;",
									"    pm.expect(responseJSON.data).has.property('state').is.lengthOf(2);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - zipcode\",function(){",
									"",
									"    //zipcode validation",
									"    pm.expect(responseJSON.data).has.property('zipcode');",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.string;",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.lengthOf(5);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_front_url\",function(){",
									"",
									"    //liscense_front_url validation",
									"    pm.expect(responseJSON.data).has.property('license_front_url');",
									"    pm.expect(responseJSON.data).has.property('license_front_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_back_url\",function(){",
									"",
									"    //liscense_front_back validation",
									"    pm.expect(responseJSON.data).has.property('license_back_url');",
									"    pm.expect(responseJSON.data).has.property('license_back_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - profile_image_url\",function(){",
									"",
									"  //profile_image_url validation",
									"    pm.expect(responseJSON.data).has.property('profile_image_url');",
									"    pm.expect(responseJSON.data).has.property('profile_image_url').is.string;",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_account_status\",function(){",
									"",
									"    //notify_account_status validation",
									"    pm.expect(responseJSON.data).has.property('notify_account_status');",
									"    pm.expect(responseJSON.data.notify_account_status).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_account_status).eql(\"true\");",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - notify_campaign_approval\",function(){",
									"",
									"    //notify_campaign_approval validation",
									"    pm.expect(responseJSON.data).has.property('notify_campaign_approval');",
									"    pm.expect(responseJSON.data.notify_campaign_approval).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_campaign_approval).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_new_campaign\",function(){",
									"",
									"    //notify_new_campaign validation",
									"    pm.expect(responseJSON.data).has.property('notify_new_campaign');",
									"    pm.expect(responseJSON.data.notify_new_campaign).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_new_campaign).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_transactions\",function(){",
									"",
									"    //notify_transactions validation",
									"    pm.expect(responseJSON.data).has.property('notify_transactions');",
									"    pm.expect(responseJSON.data.notify_transactions).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_transactions).eql(\"true\");  ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - current_balance\",function(){",
									"",
									"    //current_balance validation",
									"    pm.expect(responseJSON.data).has.property('current_balance');",
									"    pm.expect(responseJSON.data.current_balance).is.not.null;",
									"    pm.expect(responseJSON.data.current_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.current_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Data object Structure is valid - approved_balance\",function(){",
									"",
									"    //approved_balance validation",
									"    pm.expect(responseJSON.data).has.property('approved_balance');",
									"    pm.expect(responseJSON.data.approved_balance).is.not.null;",
									"    pm.expect(responseJSON.data.approved_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.approved_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - total_earnings\",function(){",
									"",
									"    //total_earnings validation",
									"    pm.expect(responseJSON.data).has.property('total_earnings');",
									"    pm.expect(responseJSON.data.total_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.total_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.total_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - potential_earnings\",function(){",
									"",
									"    //potential_earnings validation",
									"    pm.expect(responseJSON.data).has.property('potential_earnings');",
									"    pm.expect(responseJSON.data.potential_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.potential_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.potential_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - status\",function(){",
									"",
									"    //status validation",
									"    pm.expect(responseJSON.data).has.property('status');",
									"    pm.expect(responseJSON.data).has.property('status').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"verification-pending\", \"verification-failed\", \"deactivated\",\"verified\"]);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-privacy\", function () {",
									"",
									"//privacy validation",
									"    var privacyValue=responseJSON.data.privacy;",
									"    if(privacyValue != null)",
									"    {",
									"        console.log(\"User has accepted the privacy terms\");",
									"        pm.expect(privacyValue).is.a(\"number\")",
									"        pm.expect(privacyValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the privacy terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-terms\", function () {",
									"",
									"//terms validation",
									"    var termsValue=responseJSON.data.terms;",
									"    if(termsValue != null)",
									"    {",
									"        console.log(\"User has accepted the terms\");",
									"        pm.expect(termsValue).is.a(\"number\")",
									"        pm.expect(termsValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"pm.test(\"created,modified is valid\",function(){",
									"   ",
									"    //Created,Modified validation",
									"",
									"    pm.expect(responseJSON.data.created).is.above(0);",
									"    pm.expect(responseJSON.data.modified).is.above(0);",
									"})",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7001860e-7377-4d21-99f0-981e94f26a9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\":\"rahul.jaiswa@navigo.com\",\r\n   \"username\":\"Amazing_Test_Details\",\r\n   \"affiliation\":\"TYAJJS\",\r\n   \"first_name\":\"Rahul\",\r\n   \"last_name\":\"Jaiswal\",\r\n   \"age_range\":\"18-35\",\r\n   \"birth_date\":\"17-01-1994\",\r\n   \"phone\":\"55126991\",\r\n   \"city\":\"Mumbai\",\r\n   \"state\":\"Maharashtra\",\r\n   \"zipcode\":\"400705\",\r\n   \"timezone\":\"IST\",\r\n   \"license_front_url\":\"\",\r\n   \"license_back_url\":\"\",\r\n   \"privacy\":true,\r\n   \"terms\":true,\r\n   \"status\":\"Executed\",\r\n   \"current_balance\":\"1000\",\r\n   \"approved_balance\":\"44500\",\r\n   \"total_earnings\":\"2300\",\r\n   \"potential_earnings\":\"12000\",\r\n   \"notify_account_status\":true,\r\n   \"notify_transactions\":\"\",\r\n   \"notify_campaign_approval\":\"\",\r\n   \"notify_new_campaign\":\"\",\r\n   \"created\": \"\",\r\n   \"modified\":\"\",\r\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signup"
							]
						},
						"description": "Sign up and enter the user's data to create a new profile."
					},
					"response": [
						{
							"id": "bd43d882-7e30-4369-93b7-4b21f8eab6ac",
							"name": "New profile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/signup",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"email\": \"<email>\",\n    \"username\": \"<string>\"\n  }\n}"
						},
						{
							"id": "178a384b-a054-4652-a440-908995d60241",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Sign up-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d9b823c-d6f2-42ed-add8-835f7ae074bc",
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c4d4743f-7c16-4e67-a3c7-7977e26a8f9b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\":\"rahul.jaiswa@navigo.com\",\r\n   \"username\":\"Amazing_Test_Details\",\r\n   \"affiliation\":\"TYAJJS\",\r\n   \"first_name\":\"Rahul\",\r\n   \"last_name\":\"Jaiswal\",\r\n   \"age_range\":\"18-35\",\r\n   \"birth_date\":\"17-01-1994\",\r\n   \"phone\":\"55126991\",\r\n   \"city\":\"Mumbai\",\r\n   \"state\":\"Maharashtra\",\r\n   \"zipcode\":\"400705\",\r\n   \"timezone\":\"IST\",\r\n   \"license_front_url\":\"\",\r\n   \"license_back_url\":\"\",\r\n   \"privacy\":true,\r\n   \"terms\":true,\r\n   \"status\":\"Executed\",\r\n   \"current_balance\":\"1000\",\r\n   \"approved_balance\":\"44500\",\r\n   \"total_earnings\":\"2300\",\r\n   \"potential_earnings\":\"12000\",\r\n   \"notify_account_status\":true,\r\n   \"notify_transactions\":\"\",\r\n   \"notify_campaign_approval\":\"\",\r\n   \"notify_new_campaign\":\"\",\r\n   \"created\": \"\",\r\n   \"modified\":\"\",\r\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signup"
							]
						},
						"description": "Sign up and enter the user's data to create a new profile."
					},
					"response": [
						{
							"id": "447e6171-a986-421d-b4ae-3ddc2ba4fb81",
							"name": "New profile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/signup",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"email\": \"<email>\",\n    \"username\": \"<string>\"\n  }\n}"
						},
						{
							"id": "81b273f4-c064-47c0-8ac4-8ba6609fba8a",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Sign up - Reference",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON.data).to.be.an('object');",
									"    pm.expect(responseJSON.data).to.be.an('object').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - ID\",function(){",
									"",
									"//id validation",
									"    pm.expect(responseJSON.data).has.property('id');",
									"    pm.expect(responseJSON.data).has.property('id').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - email\",function(){",
									"",
									"//email validation",
									"   pm.expect(responseJSON.data).has.property('email');",
									"    pm.expect(responseJSON.data).has.property('email').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('email').is.string;",
									"    pm.expect(responseJSON.data.email).to.match(/^[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid\", function () {",
									"",
									"    ",
									"",
									"    ",
									"",
									"    //username validation",
									"    pm.expect(responseJSON.data).has.property('username');",
									"    pm.expect(responseJSON.data).has.property('username').is.string;",
									"",
									"    //firstname validation",
									"    pm.expect(responseJSON.data).has.property('first_name');",
									"    pm.expect(responseJSON.data).has.property('first_name').is.string;",
									"",
									"    //lastname validation",
									"    pm.expect(responseJSON.data).has.property('last_name');",
									"    pm.expect(responseJSON.data).has.property('last_name').is.string;",
									"",
									"    //affiliation validation",
									"    pm.expect(responseJSON.data).has.property('affiliation');",
									"    pm.expect(responseJSON.data).has.property('affiliation').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"democrat\", \"republican\", \"independent\",\"other\"])",
									"",
									"    //birthdate validation",
									"    pm.expect(responseJSON.data).has.property('birth_date');",
									"    pm.expect(responseJSON.data).has.property('birth_date').is.string;",
									"    pm.expect(responseJSON.data.birth_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"",
									"",
									"    //age range validation",
									"    pm.expect(responseJSON.data).has.property('age_range');",
									"    pm.expect(responseJSON.data).has.property('age_range').is.string;",
									"    pm.expect(responseJSON.data.age_range).to.be.oneOf([\"18-35\",\"35-55\",\"55+\"]);",
									"    ",
									"    //phone number validation",
									"    pm.expect(responseJSON.data).has.property('phone');",
									"    pm.expect(responseJSON.data).has.property('phone').is.string;",
									"    pm.expect(responseJSON.data.phone).to.match(/[\\+1\\s]*\\-?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}/);",
									"",
									"    //city validation",
									"    pm.expect(responseJSON.data).has.property('city');",
									"    pm.expect(responseJSON.data).has.property('city').is.string;",
									"",
									"    //state validation",
									"    pm.expect(responseJSON.data).has.property('state');",
									"    pm.expect(responseJSON.data).has.property('state').is.string;",
									"    pm.expect(responseJSON.data).has.property('state').is.lengthOf(2);",
									"",
									"    //zipcode validation",
									"    pm.expect(responseJSON.data).has.property('zipcode');",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.string;",
									"     pm.expect(responseJSON.data).has.property('zipcode').is.lengthOf(5);",
									"",
									"    //license_front_url validation",
									"    pm.expect(responseJSON.data).has.property('license_front_url');",
									"    pm.expect(responseJSON.data).has.property('license_front_url').is.string;",
									"",
									"    //license_back_url validation",
									"    pm.expect(responseJSON.data).has.property('license_back_url');",
									"    pm.expect(responseJSON.data).has.property('license_back_url').is.string;",
									"",
									"    //profile_image_url validation",
									"    pm.expect(responseJSON.data).has.property('profile_image_url');",
									"    pm.expect(responseJSON.data).has.property('profile_image_url').is.string;",
									"",
									"    //boolean validation needs to be added",
									"    pm.expect(responseJSON.data).has.property('notify_account_status');",
									"    pm.expect(responseJSON.data).has.property('notify_transactions');",
									"    pm.expect(responseJSON.data).has.property('notify_campaign_approval');",
									"    pm.expect(responseJSON.data).has.property('notify_new_campaign');",
									"     pm.expect(responseJSON.data.notify_new_campaign).to.be.a(\"boolean\");",
									"",
									"",
									"    //number validations needs to be added",
									"    pm.expect(responseJSON.data).has.property('current_balance');",
									"    pm.expect(responseJSON.data).has.property('approved_balance');",
									"    pm.expect(responseJSON.data).has.property('total_earnings');",
									"    pm.expect(responseJSON.data).has.property('potential_earnings');",
									"    pm.expect(responseJSON.data).has.property('privacy');",
									"    pm.expect(responseJSON.data).has.property('terms');",
									"    pm.expect(responseJSON.data).has.property('created');",
									"    pm.expect(responseJSON.data).has.property('modified');",
									"});",
									"",
									"",
									"pm.test(\"current_balance, approved_balance, total_earnings, potential_earnings should be valid\",function(){",
									"    pm.expect(responseJSON.data.current_balance).is.not.null;",
									"    pm.expect(responseJSON.data.approved_balance).is.not.null;",
									"    pm.expect(responseJSON.data.total_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.potential_earnings).is.not.null;",
									"})",
									"",
									"pm.test(\"privacy,terms,created,modified is valid\",function(){",
									"    pm.expect(responseJSON.data.created).is.greaterThan(0.00);",
									"    pm.expect(responseJSON.data.privacy).is.greaterThan(0.00);",
									"    pm.expect(responseJSON.data.terms).is.greaterThan(0.00);",
									"    pm.expect(responseJSON.data.modified).is.greaterThan(0.00);",
									"})",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"id": "6fcbfd02-ff1a-464f-816b-9412cbcecddb"
							}
						}
					],
					"id": "b3ad4349-f067-44a7-b5b0-27fb39a934fc",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"email\":\"{{email}}\",\r\n   \"username\":\"{{username}}\",\r\n   \"affiliation\":\"{{affiliation}}\",\r\n   \"first_name\":\"{{first_name}}\",\r\n   \"last_name\":\"{{last_name}}\",\r\n   \"age_range\":\"{{age_range}}\",\r\n   \"birth_date\":\"{{birth_date}}\",\r\n   \"phone\":\"{{phone}}\",\r\n   \"city\":\"{{city}}\",\r\n   \"state\":\"{{state}}\",\r\n   \"zipcode\":\"{{zipcode}}\",\r\n   \"timezone\":\"{{timezone}}\",\r\n   \"license_front_url\":\"{{license_front_url}}\",\r\n   \"license_back_url\":\"{{license_back_url}}\",\r\n   \"privacy\":{{privacy}},\r\n   \"terms\":{{terms}},\r\n   \"status\":\"{{status}}\",\r\n   \"current_balance\":\"{{current_balance}}\",\r\n   \"approved_balance\":\"{{approved_balance}}\",\r\n   \"total_earnings\":\"{{total_earnings}}\",\r\n   \"potential_earnings\":\"{{potential_earnings}}\",\r\n   \"notify_account_status\":{{notify_account_status}},\r\n   \"notify_transactions\":{{notify_transactions}},\r\n   \"notify_campaign_approval\":{{notify_campaign_approval}},\r\n   \"notify_new_campaign\":{{notify_new_campaign}},\r\n   \"created\":\"{{created}}\",\r\n   \"modified\":\"{{modified}}\"\r\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/signup",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"signup"
							]
						},
						"description": "Sign up and enter the user's data to create a new profile."
					},
					"response": [
						{
							"id": "6f079955-2bd9-4d9d-adf4-f9f670767e06",
							"name": "New profile",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/signup",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"signup"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"email\": \"<email>\",\n    \"username\": \"<string>\"\n  }\n}"
						},
						{
							"id": "43316ee7-67d7-48e0-b460-88e564707326",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/signup",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"signup"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "41f81860-7d86-4ac6-9594-daf9b60e0e27"
		},
		{
			"name": "profile",
			"item": [
				{
					"name": "Read profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a95db5e7-b3ca-4122-a66c-8b8ab1866b3b",
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON.data).to.be.an('object');",
									"    pm.expect(responseJSON.data).to.be.an('object').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - ID\",function(){",
									"",
									"//id validation",
									"    pm.expect(responseJSON.data).has.property('id');",
									"    pm.expect(responseJSON.data).has.property('id').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - email\",function(){",
									"",
									"//email validation",
									"   pm.expect(responseJSON.data).has.property('email');",
									"    pm.expect(responseJSON.data).has.property('email').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('email').is.string;",
									"    pm.expect(responseJSON.data.email).to.match(/^[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/);",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - username\",function(){",
									"",
									"//username validation",
									"    pm.expect(responseJSON.data).has.property('username');",
									"    pm.expect(responseJSON.data).has.property('username').is.string;",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - first_name\",function(){",
									"",
									"    //firstname validation",
									"    pm.expect(responseJSON.data).has.property('first_name');",
									"    pm.expect(responseJSON.data).has.property('first_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - last_name\",function(){",
									"",
									"    //lastname validation",
									"    pm.expect(responseJSON.data).has.property('last_name');",
									"    pm.expect(responseJSON.data).has.property('last_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - affiliation\",function(){",
									"",
									"    //affiliation validation",
									"    pm.expect(responseJSON.data).has.property('affiliation');",
									"    pm.expect(responseJSON.data).has.property('affiliation').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"democrat\", \"republican\", \"independent\",\"other\"]);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - birth_date\",function(){",
									"",
									"    //birthdate validation",
									"    pm.expect(responseJSON.data).has.property('birth_date');",
									"    pm.expect(responseJSON.data).has.property('birth_date').is.string;",
									"    pm.expect(responseJSON.data.birth_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - age_range\",function(){",
									"",
									"    //age_range validation",
									"     pm.expect(responseJSON.data).has.property('age_range');",
									"    pm.expect(responseJSON.data).has.property('age_range').is.string;",
									"    pm.expect(responseJSON.data.age_range).to.be.oneOf([\"18-35\",\"35-55\",\"55+\"]);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - phone_number\",function(){",
									"",
									"    //phone_number validation",
									"    pm.expect(responseJSON.data).has.property('phone');",
									"    pm.expect(responseJSON.data).has.property('phone').is.string;",
									"    pm.expect(responseJSON.data.phone).to.match(/[\\+1\\s]*\\-?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}/);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - city\",function(){",
									"",
									"    //city validation",
									"    pm.expect(responseJSON.data).has.property('city');",
									"    pm.expect(responseJSON.data).has.property('city').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - state\",function(){",
									"",
									"    //state validation",
									"   pm.expect(responseJSON.data).has.property('state');",
									"    pm.expect(responseJSON.data).has.property('state').is.string;",
									"    pm.expect(responseJSON.data).has.property('state').is.lengthOf(2);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - zipcode\",function(){",
									"",
									"    //zipcode validation",
									"    pm.expect(responseJSON.data).has.property('zipcode');",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.string;",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.lengthOf(5);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_front_url\",function(){",
									"",
									"    //liscense_front_url validation",
									"    pm.expect(responseJSON.data).has.property('license_front_url');",
									"    pm.expect(responseJSON.data).has.property('license_front_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_back_url\",function(){",
									"",
									"    //liscense_front_back validation",
									"    pm.expect(responseJSON.data).has.property('license_back_url');",
									"    pm.expect(responseJSON.data).has.property('license_back_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - profile_image_url\",function(){",
									"",
									"  //profile_image_url validation",
									"    pm.expect(responseJSON.data).has.property('profile_image_url');",
									"    pm.expect(responseJSON.data).has.property('profile_image_url').is.string;",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_account_status\",function(){",
									"",
									"    //notify_account_status validation",
									"    pm.expect(responseJSON.data).has.property('notify_account_status');",
									"    pm.expect(responseJSON.data.notify_account_status).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_account_status).eql(\"true\");",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - notify_campaign_approval\",function(){",
									"",
									"    //notify_campaign_approval validation",
									"    pm.expect(responseJSON.data).has.property('notify_campaign_approval');",
									"    pm.expect(responseJSON.data.notify_campaign_approval).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_campaign_approval).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_new_campaign\",function(){",
									"",
									"    //notify_new_campaign validation",
									"    pm.expect(responseJSON.data).has.property('notify_new_campaign');",
									"    pm.expect(responseJSON.data.notify_new_campaign).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_new_campaign).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_transactions\",function(){",
									"",
									"    //notify_transactions validation",
									"    pm.expect(responseJSON.data).has.property('notify_transactions');",
									"    pm.expect(responseJSON.data.notify_transactions).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_transactions).eql(\"true\");  ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - current_balance\",function(){",
									"",
									"    //current_balance validation",
									"    pm.expect(responseJSON.data).has.property('current_balance');",
									"    pm.expect(responseJSON.data.current_balance).is.not.null;",
									"    pm.expect(responseJSON.data.current_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.current_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Data object Structure is valid - approved_balance\",function(){",
									"",
									"    //approved_balance validation",
									"    pm.expect(responseJSON.data).has.property('approved_balance');",
									"    pm.expect(responseJSON.data.approved_balance).is.not.null;",
									"    pm.expect(responseJSON.data.approved_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.approved_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - total_earnings\",function(){",
									"",
									"    //total_earnings validation",
									"    pm.expect(responseJSON.data).has.property('total_earnings');",
									"    pm.expect(responseJSON.data.total_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.total_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.total_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - potential_earnings\",function(){",
									"",
									"    //potential_earnings validation",
									"    pm.expect(responseJSON.data).has.property('potential_earnings');",
									"    pm.expect(responseJSON.data.potential_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.potential_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.potential_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - status\",function(){",
									"",
									"    //status validation",
									"    pm.expect(responseJSON.data).has.property('status');",
									"    pm.expect(responseJSON.data).has.property('status').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"verification-pending\", \"verification-failed\", \"deactivated\",\"verified\"]);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-privacy\", function () {",
									"",
									"//privacy validation",
									"    var privacyValue=responseJSON.data.privacy;",
									"    if(privacyValue != null)",
									"    {",
									"        console.log(\"User has accepted the privacy terms\");",
									"        pm.expect(privacyValue).is.a(\"number\")",
									"        pm.expect(privacyValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the privacy terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-terms\", function () {",
									"",
									"//terms validation",
									"    var termsValue=responseJSON.data.terms;",
									"    if(termsValue != null)",
									"    {",
									"        console.log(\"User has accepted the terms\");",
									"        pm.expect(termsValue).is.a(\"number\")",
									"        pm.expect(termsValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"pm.test(\"created,modified is valid\",function(){",
									"   ",
									"    //Created,Modified validation",
									"",
									"    pm.expect(responseJSON.data.created).is.above(0);",
									"    pm.expect(responseJSON.data.modified).is.above(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c80ec465-ef37-4e76-aceb-fe6b685d083b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Read the user's profile data."
					},
					"response": [
						{
							"id": "e2c43824-057c-46fc-9035-de51902bf26e",
							"name": "User Profile",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "https://api.canvass.dev/v1/profile",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"profile"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}"
						}
					]
				},
				{
					"name": "Update Profile-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f7c7e36-d533-4cdf-bf7e-1adeaf3a6d31",
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON.data).to.be.an('object');",
									"    pm.expect(responseJSON.data).to.be.an('object').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - ID\",function(){",
									"",
									"//id validation",
									"    pm.expect(responseJSON.data).has.property('id');",
									"    pm.expect(responseJSON.data).has.property('id').is.not.null;",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - email\",function(){",
									"",
									"//email validation",
									"   pm.expect(responseJSON.data).has.property('email');",
									"    pm.expect(responseJSON.data).has.property('email').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('email').is.string;",
									"    pm.expect(responseJSON.data.email).to.match(/^[a-z0-9]+@[a-z]+\\.[a-z]{2,3}/);",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - username\",function(){",
									"",
									"//username validation",
									"    pm.expect(responseJSON.data).has.property('username');",
									"    pm.expect(responseJSON.data).has.property('username').is.string;",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - first_name\",function(){",
									"",
									"    //firstname validation",
									"    pm.expect(responseJSON.data).has.property('first_name');",
									"    pm.expect(responseJSON.data).has.property('first_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - last_name\",function(){",
									"",
									"    //lastname validation",
									"    pm.expect(responseJSON.data).has.property('last_name');",
									"    pm.expect(responseJSON.data).has.property('last_name').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - affiliation\",function(){",
									"",
									"    //affiliation validation",
									"    pm.expect(responseJSON.data).has.property('affiliation');",
									"    pm.expect(responseJSON.data).has.property('affiliation').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"democrat\", \"republican\", \"independent\",\"other\"]);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - birth_date\",function(){",
									"",
									"    //birthdate validation",
									"    pm.expect(responseJSON.data).has.property('birth_date');",
									"    pm.expect(responseJSON.data).has.property('birth_date').is.string;",
									"    pm.expect(responseJSON.data.birth_date).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - age_range\",function(){",
									"",
									"    //age_range validation",
									"     pm.expect(responseJSON.data).has.property('age_range');",
									"    pm.expect(responseJSON.data).has.property('age_range').is.string;",
									"    pm.expect(responseJSON.data.age_range).to.be.oneOf([\"18-35\",\"35-55\",\"55+\"]);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - phone_number\",function(){",
									"",
									"    //phone_number validation",
									"    pm.expect(responseJSON.data).has.property('phone');",
									"    pm.expect(responseJSON.data).has.property('phone').is.string;",
									"    pm.expect(responseJSON.data.phone).to.match(/[\\+1\\s]*\\-?\\(?\\d{3}\\)?[\\s.-]?\\d{3}[\\s.-]?\\d{4}/);",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - city\",function(){",
									"",
									"    //city validation",
									"    pm.expect(responseJSON.data).has.property('city');",
									"    pm.expect(responseJSON.data).has.property('city').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - state\",function(){",
									"",
									"    //state validation",
									"   pm.expect(responseJSON.data).has.property('state');",
									"    pm.expect(responseJSON.data).has.property('state').is.string;",
									"    pm.expect(responseJSON.data).has.property('state').is.lengthOf(2);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - zipcode\",function(){",
									"",
									"    //zipcode validation",
									"    pm.expect(responseJSON.data).has.property('zipcode');",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.string;",
									"    pm.expect(responseJSON.data).has.property('zipcode').is.lengthOf(5);",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_front_url\",function(){",
									"",
									"    //liscense_front_url validation",
									"    pm.expect(responseJSON.data).has.property('license_front_url');",
									"    pm.expect(responseJSON.data).has.property('license_front_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - license_back_url\",function(){",
									"",
									"    //liscense_front_back validation",
									"    pm.expect(responseJSON.data).has.property('license_back_url');",
									"    pm.expect(responseJSON.data).has.property('license_back_url').is.string;",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - profile_image_url\",function(){",
									"",
									"  //profile_image_url validation",
									"    pm.expect(responseJSON.data).has.property('profile_image_url');",
									"    pm.expect(responseJSON.data).has.property('profile_image_url').is.string;",
									"    ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_account_status\",function(){",
									"",
									"    //notify_account_status validation",
									"    pm.expect(responseJSON.data).has.property('notify_account_status');",
									"    pm.expect(responseJSON.data.notify_account_status).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_account_status).eql(\"true\");",
									"    ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - notify_campaign_approval\",function(){",
									"",
									"    //notify_campaign_approval validation",
									"    pm.expect(responseJSON.data).has.property('notify_campaign_approval');",
									"    pm.expect(responseJSON.data.notify_campaign_approval).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_campaign_approval).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_new_campaign\",function(){",
									"",
									"    //notify_new_campaign validation",
									"    pm.expect(responseJSON.data).has.property('notify_new_campaign');",
									"    pm.expect(responseJSON.data.notify_new_campaign).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_new_campaign).eql(\"true\");  ",
									"});",
									"",
									"",
									"pm.test(\"Data object Structure is valid - notify_transactions\",function(){",
									"",
									"    //notify_transactions validation",
									"    pm.expect(responseJSON.data).has.property('notify_transactions');",
									"    pm.expect(responseJSON.data.notify_transactions).to.be.a(\"boolean\");",
									"    //pm.expect(responseJSON.data.notify_transactions).eql(\"true\");  ",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - current_balance\",function(){",
									"",
									"    //current_balance validation",
									"    pm.expect(responseJSON.data).has.property('current_balance');",
									"    pm.expect(responseJSON.data.current_balance).is.not.null;",
									"    pm.expect(responseJSON.data.current_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.current_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"",
									"",
									"pm.test(\"Data object Structure is valid - approved_balance\",function(){",
									"",
									"    //approved_balance validation",
									"    pm.expect(responseJSON.data).has.property('approved_balance');",
									"    pm.expect(responseJSON.data.approved_balance).is.not.null;",
									"    pm.expect(responseJSON.data.approved_balance).is.a(\"number\");",
									"    pm.expect(responseJSON.data.approved_balance).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - total_earnings\",function(){",
									"",
									"    //total_earnings validation",
									"    pm.expect(responseJSON.data).has.property('total_earnings');",
									"    pm.expect(responseJSON.data.total_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.total_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.total_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - potential_earnings\",function(){",
									"",
									"    //potential_earnings validation",
									"    pm.expect(responseJSON.data).has.property('potential_earnings');",
									"    pm.expect(responseJSON.data.potential_earnings).is.not.null;",
									"    pm.expect(responseJSON.data.potential_earnings).is.a(\"number\");",
									"    pm.expect(responseJSON.data.potential_earnings).to.match(/[+-]?([0-9]*[.])?[0-9]+/)",
									"",
									"});",
									"",
									"pm.test(\"Data object Structure is valid - status\",function(){",
									"",
									"    //status validation",
									"    pm.expect(responseJSON.data).has.property('status');",
									"    pm.expect(responseJSON.data).has.property('status').is.string;",
									"    pm.expect(responseJSON.data.affiliation).to.be.oneOf([\"verification-pending\", \"verification-failed\", \"deactivated\",\"verified\"]);",
									"",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-privacy\", function () {",
									"",
									"//privacy validation",
									"    var privacyValue=responseJSON.data.privacy;",
									"    if(privacyValue != null)",
									"    {",
									"        console.log(\"User has accepted the privacy terms\");",
									"        pm.expect(privacyValue).is.a(\"number\")",
									"        pm.expect(privacyValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the privacy terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Data object structure is valid-terms\", function () {",
									"",
									"//terms validation",
									"    var termsValue=responseJSON.data.terms;",
									"    if(termsValue != null)",
									"    {",
									"        console.log(\"User has accepted the terms\");",
									"        pm.expect(termsValue).is.a(\"number\")",
									"        pm.expect(termsValue).to.be.above(0);  ",
									"    }",
									"    else",
									"    {",
									"       console.log(\"User has not accepted the terms\");",
									"       pm.expect(privacyValue).is.null;",
									"       ",
									"    }",
									"});",
									"",
									"pm.test(\"created,modified is valid\",function(){",
									"   ",
									"    //Created,Modified validation",
									"",
									"    pm.expect(responseJSON.data.created).is.above(0);",
									"    pm.expect(responseJSON.data.modified).is.above(0);",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "a17e365f-2d19-46f4-bc0e-4293b5ac3018",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"ab626c74-4e6a-42b1-bd47-8a99f594ea62\",\n  \"email\": \"fernando.update@gmail.com\",\n  \"username\": \"FernadoMaster\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"Fernado\",\n  \"last_name\": \"Castillo\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"1983-12-28\",\n  \"phone\": \"771298812\",\n  \"city\": \"Bengalore\",\n  \"state\": \"Karnataka\",\n  \"zipcode\": \"712671\",\n  \"timezone\": \"IST\",\n  \"license_front_url\": \"www.testUpdate.com/fronURL\",\n  \"license_back_url\": \"www.testupdate.com/backURL\",\n  \"profile_image_url\": \"testImage\",\n  \"privacy\": true\n  \"terms\": false\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"-1000\",\n  \"approved_balance\": \"44000\",\n  \"total_earnings\": \"50000\",\n  \"potential_earnings\": \"650000\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Update the user's profile data."
					},
					"response": [
						{
							"id": "c00b9c64-9b3e-412d-8c15-1e6ee5510873",
							"name": "Profile updated",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/profile",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"profile"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"username\": \"<string>\",\n    \"affiliation\": \"democrat\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"age_range\": \"35-55\",\n    \"birth_date\": \"<date>\",\n    \"phone\": \"\\r\\r  +-856)333 8827\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\",\n    \"license_front_url\": \"<string>\",\n    \"license_back_url\": \"<string>\",\n    \"profile_image_url\": \"<string>\",\n    \"privacy\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"terms\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"status\": \"deactivated\",\n    \"current_balance\": \"<float>\",\n    \"approved_balance\": \"<float>\",\n    \"total_earnings\": \"<float>\",\n    \"potential_earnings\": \"<float>\",\n    \"notify_account_status\": true,\n    \"notify_transactions\": true,\n    \"notify_campaign_approval\": true,\n    \"notify_new_campaign\": true,\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
						},
						{
							"id": "f572d0b8-24b8-48b3-9cf2-c203cf44b16f",
							"name": "Validation exception. Malformed request body.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Update Profile-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f7c7e36-d533-4cdf-bf7e-1adeaf3a6d31",
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f2dce6bf-6062-4589-9d5a-2aa5f274cec4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": \"ab626c74-4e6a-42b1-bd47-8a99f594ea62\",\n  \"email\": \"fernando.update@gmail.com\",\n  \"username\": \"FernadoMaster\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"Fernado\",\n  \"last_name\": \"Castillo\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"1983-12-28\",\n  \"phone\": \"771298812\",\n  \"city\": \"Bengalore\",\n  \"state\": \"Karnataka\",\n  \"zipcode\": \"712671\",\n  \"timezone\": \"IST\",\n  \"license_front_url\": \"www.testUpdate.com/fronURL\",\n  \"license_back_url\": \"www.testupdate.com/backURL\",\n  \"profile_image_url\": \"testImage\",\n  \"privacy\": true\n  \"terms\": false\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"-1000\",\n  \"approved_balance\": \"44000\",\n  \"total_earnings\": \"50000\",\n  \"potential_earnings\": \"650000\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Update the user's profile data."
					},
					"response": [
						{
							"id": "b0efc94e-b7f7-4744-a8ba-f3fa713a1c91",
							"name": "Profile updated",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.canvass.dev/v1/profile",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"profile"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"username\": \"<string>\",\n    \"affiliation\": \"democrat\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"age_range\": \"35-55\",\n    \"birth_date\": \"<date>\",\n    \"phone\": \"\\r\\r  +-856)333 8827\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\",\n    \"license_front_url\": \"<string>\",\n    \"license_back_url\": \"<string>\",\n    \"profile_image_url\": \"<string>\",\n    \"privacy\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"terms\": {\n      \"value\": \"<Error: Could not resolve allOf schema\"\n    },\n    \"status\": \"deactivated\",\n    \"current_balance\": \"<float>\",\n    \"approved_balance\": \"<float>\",\n    \"total_earnings\": \"<float>\",\n    \"potential_earnings\": \"<float>\",\n    \"notify_account_status\": true,\n    \"notify_transactions\": true,\n    \"notify_campaign_approval\": true,\n    \"notify_new_campaign\": true,\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
						},
						{
							"id": "baba2eea-01fd-4427-9ede-d839fedbe50c",
							"name": "Validation exception. Malformed request body.",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"username\": \"<string>\",\n  \"affiliation\": \"democrat\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"age_range\": \"18-35\",\n  \"birth_date\": \"<date>\",\n  \"phone\": \" ﻿326)337\\t5022\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"license_front_url\": \"<string>\",\n  \"license_back_url\": \"<string>\",\n  \"profile_image_url\": \"<string>\",\n  \"privacy\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"terms\": {\n    \"value\": \"<Error: Could not resolve allOf schema\"\n  },\n  \"status\": \"verification-pending\",\n  \"current_balance\": \"<float>\",\n  \"approved_balance\": \"<float>\",\n  \"total_earnings\": \"<float>\",\n  \"potential_earnings\": \"<float>\",\n  \"notify_account_status\": true,\n  \"notify_transactions\": true,\n  \"notify_campaign_approval\": true,\n  \"notify_new_campaign\": true,\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"profile"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Deactivate profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 202\", function () {",
									"    pm.response.to.have.status(202);",
									"});"
								],
								"type": "text/javascript",
								"id": "b39ed6ea-e4ad-48c8-823b-f9ef36b5fee0"
							}
						}
					],
					"id": "080d5dd3-d22e-4dbd-b05a-0524bcb9a1c3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"profile"
							]
						},
						"description": "Deactivate the user's profile."
					},
					"response": [
						{
							"id": "99c153da-fd34-4e5e-b4fc-c38c2b7dea71",
							"name": "Profile deactivated",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "https://api.canvass.dev/v1/profile",
									"protocol": "https",
									"host": [
										"api",
										"canvass",
										"dev"
									],
									"path": [
										"v1",
										"profile"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "d07415a3-9f82-4177-9259-8998b25abc7c"
		},
		{
			"name": "change-phone",
			"item": [
				{
					"name": "confirm",
					"item": [
						{
							"name": "Confirm the 2FA code sent to confirm their phone number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
											"});",
											"",
											"pm.test(\"Data object structure is valid\", function () {",
											"",
											"    //unique_id validation",
											"    pm.expect(responseJSON.data).has.property('unique_id');",
											"    pm.expect(responseJSON.data).has.property('unique_id').is.string;",
											"    pm.expect(responseJSON.data).has.property('unique_id').is.not.null;",
											"",
											"",
											"    //expires validation",
											"    pm.expect(responseJSON.data).has.property('expires');",
											"    pm.expect(responseJSON.data).has.property('expires').is.string;",
											"    pm.expect(responseJSON.data).has.property('expires').is.not.null;",
											"    pm.expect(responseJSON.data).has.property('expires').is.above(0);",
											"",
											"})"
										],
										"type": "text/javascript",
										"id": "3e6c9c1b-816b-426a-b3e7-0f95e184dc18"
									}
								}
							],
							"id": "f41f3438-1e51-49bf-b2fb-7a066951071a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"059093\",\n  \"unique_id\": \"8dad6560-3428-4f0b-b364-30ac44c7cc03\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-phone/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-phone",
										"confirm"
									]
								},
								"description": "Once the user has received the code it is provided here to confirm their phone number change"
							},
							"response": [
								{
									"id": "cbc327be-023e-49c7-be64-6707cc190222",
									"name": "Change accepted.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<number>\",\n  \"unique_id\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/change-phone/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"change-phone",
												"confirm"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "0fe29b74-2237-4396-bcfd-88ea419d14c8"
				},
				{
					"name": "Change phone number-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"});",
									"",
									"pm.test(\"Data object structure is valid\", function () {",
									"",
									"    //unique_id validation",
									"    pm.expect(responseJSON.data).has.property('unique_id');",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.string;",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.not.null;",
									"",
									"",
									"    //expires validation",
									"    pm.expect(responseJSON.data).has.property('expires');",
									"    pm.expect(responseJSON.data).has.property('expires').is.string;",
									"    pm.expect(responseJSON.data).has.property('expires').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('expires').is.greaterThan(0);",
									"",
									"})"
								],
								"type": "text/javascript",
								"id": "540ec933-9e06-4ea8-9d04-63d14feb82a3"
							}
						}
					],
					"id": "f420c657-039b-4477-94b3-44ba59bcd476",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/change-phone",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"change-phone"
							]
						},
						"description": "Allows the user to change their phone number. A 2FA code will be sent and they must re-verify using the /verify/confirm endpoint."
					},
					"response": [
						{
							"id": "50016833-2fd2-4b69-a68d-71e6a025d288",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"phone\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-phone",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-phone"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"unique_id\": \"<string>\",\n  \"expiration\": \"<number>\"\n}"
						}
					]
				},
				{
					"name": "Change phone number-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"})",
									"",
									"pm.test(\"Failure Messgae - Phone Number Is Null\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"The phone field is required.\")",
									"})",
									"",
									"pm.test(\"Failure Messgae - Invalid\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"Invalid phone number.\")",
									"})"
								],
								"type": "text/javascript",
								"id": "b946932f-d3e5-4b3d-a516-d730ce5e504c"
							}
						}
					],
					"id": "4886f22d-559a-4fcd-a3d3-c1b8429dbaa7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"phone\": \"<string>\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/change-phone",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"change-phone"
							]
						},
						"description": "Allows the user to change their phone number. A 2FA code will be sent and they must re-verify using the /verify/confirm endpoint."
					},
					"response": [
						{
							"id": "7662accd-ca2c-4efe-ae90-ba91b78e162d",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"phone\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-phone",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-phone"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"unique_id\": \"<string>\",\n  \"expiration\": \"<number>\"\n}"
						}
					]
				}
			],
			"id": "4e76d48a-9855-4f1a-b333-b1c1aa5f6608"
		},
		{
			"name": "change-email",
			"item": [
				{
					"name": "confirm",
					"item": [
						{
							"name": "Confirm the code sent to confirm their email change-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 202\", function () {",
											"    pm.response.to.have.status(202);",
											"});",
											"",
											"pm.test(\"Email Change Done Successfully\", function(){",
											"    pm.expect(responseJSON.message).is.eql(\"Change accepted\")",
											"})"
										],
										"type": "text/javascript",
										"id": "da54efe9-e651-4667-85d2-c8d335eb81cd"
									}
								}
							],
							"id": "f3c7bef0-0bf2-449f-9820-7192abdaa5fa",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"782131\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-email/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-email",
										"confirm"
									]
								},
								"description": "Once the user has received the link the code is provided here to confirm their email change"
							},
							"response": [
								{
									"id": "1251ae65-68e8-444e-a7ae-0a710debd853",
									"name": "Change accepted.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/change-email/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"change-email",
												"confirm"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Confirm the code sent to confirm their email change-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 500\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "9da681ac-8820-48be-a8b3-c2e24fee96ea"
									}
								}
							],
							"id": "1f2f2ac6-f241-4d07-87a2-19cf15089206",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"code\": \"\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-email/confirm",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-email",
										"confirm"
									]
								},
								"description": "Once the user has received the link the code is provided here to confirm their email change"
							},
							"response": [
								{
									"id": "700d43b8-6e7c-48e6-8e8b-8446d5167baf",
									"name": "Change accepted.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"code\": \"<string>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/change-email/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"change-email",
												"confirm"
											]
										}
									},
									"status": "Accepted",
									"code": 202,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "7d5bf6e4-338b-4155-b35f-ccde22912a7a"
				},
				{
					"name": "Change email-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON.data).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Data object structure is valid\", function () {",
									"",
									"     //-data types are number but its coming string   ",
									"    //code validation ",
									"    pm.expect(responseJSON.data).has.property('code');",
									"    pm.expect(responseJSON.data).has.property('code').is.a.string;",
									"    pm.expect(responseJSON.data).has.property('code').is.not.null;",
									"    //pm.expect(responseJSON.data).has.property('code').is.above(0);",
									"",
									"",
									"    //unique_id validation",
									"    pm.expect(responseJSON.data).has.property('unique_id');",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.string;",
									"    pm.expect(responseJSON.data).has.property('unique_id').is.not.null;",
									"    //pm.expect(responseJSON.data).has.property('unique_id').is.greaterThan(0);",
									"",
									"    //expires validation",
									"     pm.expect(responseJSON.data).has.property('expires');",
									"    pm.expect(responseJSON.data).has.property('expires').is.string;",
									"    pm.expect(responseJSON.data).has.property('expires').is.not.null;",
									"   //pm.expect(responseJSON.data).has.property('expires').is.greaterThan(0);",
									"",
									"})"
								],
								"type": "text/javascript",
								"id": "ef85cb65-3242-46bc-830f-7f2b68539f80"
							}
						}
					],
					"id": "26b8908f-ee0e-412f-97ea-67dbd531f3bd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"fernado.castillo@navigo.com\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/change-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"change-email"
							]
						},
						"description": "Allows the user to change their email address. A confirmation link will be sent and they must re-verify using the /change-email/confirm endpoint."
					},
					"response": [
						{
							"id": "60a01259-3622-43c6-901f-98848e44a5e1",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-email"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"expiration\": \"<number>\",\n    \"unique_id\": \"<uuid>\",\n    \"code\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Change email-Negative-Email Is Null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Failure Messgae - Email Is Null\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"The email field is required.\")",
									"})",
									"",
									"pm.test(\"Failure Messgae - Invalid\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"Invalid phone number.\")",
									"})"
								],
								"type": "text/javascript",
								"id": "41d77240-7a19-4ead-a8cd-efc7f4924b53"
							}
						}
					],
					"id": "ebb79275-e717-45c3-bf75-52b2cdd228e8",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/change-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"change-email"
							]
						},
						"description": "Allows the user to change their email address. A confirmation link will be sent and they must re-verify using the /change-email/confirm endpoint."
					},
					"response": [
						{
							"id": "a284e28b-d088-43ae-a4e4-10fd6bb3f933",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-email"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"expiration\": \"<number>\",\n    \"unique_id\": \"<uuid>\",\n    \"code\": \"<number>\"\n  }\n}"
						}
					]
				},
				{
					"name": "Change email-Negative-Email Is Invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 500\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"Failure Messgae - Email Is Invalid\", function(){",
									"    pm.expect(responseJSON.message).is.contains(\"does not comply with addr-spec of RFC 2822.\")",
									"})",
									""
								],
								"type": "text/javascript",
								"id": "9b8a1665-e802-4c4c-b166-2a811294c812"
							}
						}
					],
					"id": "bf151db6-059f-480f-8f43-33d9259667e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"hh\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/change-email",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"change-email"
							]
						},
						"description": "Allows the user to change their email address. A confirmation link will be sent and they must re-verify using the /change-email/confirm endpoint."
					},
					"response": [
						{
							"id": "06a67713-c94a-4825-8a34-f0c7efa412fb",
							"name": "Operation Initiated",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"<email>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/change-email",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"change-email"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"expiration\": \"<number>\",\n    \"unique_id\": \"<uuid>\",\n    \"code\": \"<number>\"\n  }\n}"
						}
					]
				}
			],
			"id": "e89c6c39-0b9e-4b33-9e64-0915659cc44a"
		},
		{
			"name": "drivers-license",
			"item": [
				{
					"name": "front",
					"item": [
						{
							"name": "Upload a drivers license photo-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Driver Front URL Upload Succesfull\", function(){",
											"    pm.expect(responseJSON.message).is.eql(\"Photo added\")",
											"})"
										],
										"type": "text/javascript",
										"id": "51c21427-45ca-40af-ba09-645cb711c4da"
									}
								}
							],
							"id": "5ed6eb3c-a14c-49a5-bea7-0a0a710caad0",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "Image File",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/drivers-license/front",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers-license",
										"front"
									]
								},
								"description": "Add the front photon of the user's driver's license for identification purposes."
							},
							"response": [
								{
									"id": "713f1713-a7d4-429d-8eea-1e525249543d",
									"name": "Photo added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/front",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"front"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "01b43e4b-2d16-4bac-a73f-24e83a9a4fb8",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/front",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"front"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Upload a drivers license photo-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Driver Front URL Upload Succesfull\", function(){",
											"    pm.expect(responseJSON.message).is.contains(\"Invalid entry. Unprocessable Entity.\")",
											"})"
										],
										"type": "text/javascript",
										"id": "3133c9d7-0126-4473-8d9f-312c02a32f4a"
									}
								}
							],
							"id": "09c4fcb1-0736-4e93-beea-db5f56b8f034",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "Image File",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/drivers-license/front",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers-license",
										"front"
									]
								},
								"description": "Add the front photon of the user's driver's license for identification purposes."
							},
							"response": [
								{
									"id": "82a60aa5-fee2-4415-a1ce-65b2723dd4c8",
									"name": "Photo added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/front",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"front"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "14a6490d-576b-4fc9-bdb8-26d33f0701df",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/front",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"front"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "45235895-4ff0-430d-b897-b99987b17a4a"
				},
				{
					"name": "back",
					"item": [
						{
							"name": "Upload a drivers license photo-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Driver Back URL Upload Succesfull\", function(){",
											"    pm.expect(responseJSON.message).is.eql(\"Photo added\")",
											"})"
										],
										"type": "text/javascript",
										"id": "4b70a845-1ee6-4269-8b28-89ed5fb3dd3c"
									}
								}
							],
							"id": "dcbb33db-242a-49a9-a231-8d3deb89aef4",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "dDEM3D4fx/aqua_16_color.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/drivers-license/back",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers-license",
										"back"
									]
								},
								"description": "Add the back photon of the user's driver's license for identification purposes."
							},
							"response": [
								{
									"id": "965b98cc-fe34-4468-9847-2f25a24141c0",
									"name": "Photo added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/back",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"back"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "38a6d3fb-ece8-4f92-bec3-baac1a60d208",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/back",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"back"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Upload a drivers license photo-Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											"pm.test(\"Driver Front URL Upload Succesfull\", function(){",
											"    pm.expect(responseJSON.message).is.contains(\"Invalid entry. Unprocessable Entity.\")",
											"})"
										],
										"type": "text/javascript",
										"id": "0f3f8378-c6f0-47a2-b62d-8f8ab78dc08d"
									}
								}
							],
							"id": "e53170ad-2496-4411-b2c3-467ea0ee3d47",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"type": "file",
											"src": "dDEM3D4fx/aqua_16_color.jpg"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/drivers-license/back",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"drivers-license",
										"back"
									]
								},
								"description": "Add the back photon of the user's driver's license for identification purposes."
							},
							"response": [
								{
									"id": "05d3b424-4ed3-45b2-9a9d-85fc5c58b9f8",
									"name": "Photo added",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/back",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"back"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"id": "454e12b1-bb81-4b49-8ca2-1e1f19dc6895",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "multipart/form-data"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"value": "<string>",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/drivers-license/back",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"drivers-license",
												"back"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "499cfe51-1c80-4682-8da3-5d4d4f3e1b97"
				}
			],
			"id": "35692ae9-f4b0-4131-8b57-f17dd2735fad"
		},
		{
			"name": "user-photo",
			"item": [
				{
					"name": "Add profile image-Postive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Driver Front URL Upload Succesfull\", function(){",
									"    pm.expect(responseJSON.message).is.eql(\"Photo added\")",
									"})"
								],
								"type": "text/javascript",
								"id": "e2d27940-8166-47cf-99a9-7668c0fb526c"
							}
						}
					],
					"id": "948d30c5-cb83-4d21-bafc-cba88380a759",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "Ny6TEdkIl/aqua_16_color.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/user-photo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-photo"
							]
						},
						"description": "Add the user's profile image."
					},
					"response": [
						{
							"id": "265255ff-d4b4-4ce4-b09d-64dc17cb9453",
							"name": "Photo added",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/user-photo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-photo"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "3fb20a50-a13e-4173-bfe0-d530021414fd",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/user-photo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-photo"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add profile image-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"Driver Front URL Upload Succesfull\", function(){",
									"    pm.expect(responseJSON.message).is.contains(\"Invalid entry. Unprocessable Entity.\")",
									"})"
								],
								"type": "text/javascript",
								"id": "6b74438b-6eed-4004-b6ee-6c5544eb4532"
							}
						}
					],
					"id": "a1da827d-6d89-43c8-9f29-1697206fc118",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "Ny6TEdkIl/aqua_16_color.jpg"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/user-photo",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user-photo"
							]
						},
						"description": "Add the user's profile image."
					},
					"response": [
						{
							"id": "b84c0cfb-f34e-4770-a172-6ff047b9b6b1",
							"name": "Photo added",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/user-photo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-photo"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "1c1c41e8-8efc-4f5d-aab0-1fd7a70dcd44",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "multipart/form-data"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "file",
											"value": "<string>",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/user-photo",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"user-photo"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "adde9cfa-f422-4cae-9b7e-f33fc4b0ef3a"
		},
		{
			"name": "transactions",
			"item": [
				{
					"name": "cash-out",
					"item": [
						{
							"name": "Cash out-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(responseJSON).to.be.an('object')",
											"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
											"    pm.expect(responseJSON).to.be.an('object').that.has.property('meta');",
											"    pm.expect(responseJSON.data).to.be.an('object');",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"});",
											"",
											"// Test the data array structure and properties",
											"pm.test(\"Data array structure is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('id');",
											"        pm.expect(transaction).to.have.property('status');",
											"        pm.expect(transaction).to.have.property('amount');",
											"        pm.expect(transaction).to.have.property('created');",
											"        pm.expect(transaction).to.have.property('modified');",
											"    });",
											"});",
											"",
											"// Test the data array-ID- structure and properties",
											"pm.test(\"Data array ID is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('id');",
											"        pm.expect(transaction).to.have.property('id').is.not.null;",
											"        pm.expect(transaction).to.have.property('id').is.a('string');",
											"    });",
											"});",
											"",
											"// Test the data array-status- structure and properties",
											"pm.test(\"Data array Status is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"    ",
											"        pm.expect(transaction).to.have.property('status');",
											"        pm.expect(transaction).to.have.property('status').is.a('string');",
											"        pm.expect(transaction).to.have.property('status').is.oneOf('pending','approved','failed');",
											"    });",
											"});",
											"",
											"// Test the data array-Amount- structure and properties",
											"pm.test(\"Data array Amount is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('amount');",
											"        pm.expect(transaction).to.have.property('amount').is.a('number');",
											"        pm.expect(transaction).to.have.property('amount').is.above(0.0);",
											"    });",
											"});",
											"",
											"",
											"//  Test the data array-Created and Modified- structure and properties",
											"pm.test(\"Data array Created and Modified is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('created');",
											"        pm.expect(transaction).to.have.property('created').is.a('number');",
											"        pm.expect(transaction).to.have.property('created').is.above(0);",
											"",
											"        pm.expect(transaction).to.have.property('modified');",
											"        pm.expect(transaction).to.have.property('modified').is.a('number');",
											"        pm.expect(transaction).to.have.property('modified').is.above(0);",
											"    });",
											"});",
											"",
											"",
											"// Test the meta object-total-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('total');",
											"    pm.expect(pagination).to.have.property('total').is.not.null;",
											"    pm.expect(pagination).to.have.property('total').is.a('number');",
											"    pm.expect(pagination).to.have.property('total').is.not.below(0);",
											"});",
											"",
											"// Test the meta object-count-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('count');",
											"    pm.expect(pagination).to.have.property('count').is.not.null;",
											"    pm.expect(pagination).to.have.property('count').is.a('number');",
											"    pm.expect(pagination).to.have.property('count').is.not.below(0);",
											"});",
											"",
											"// Test the meta object-per_page-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('per_page');",
											"    pm.expect(pagination).to.have.property('per_page').is.not.null;",
											"    pm.expect(pagination).to.have.property('per_page').is.a('number');",
											"    pm.expect(pagination).to.have.property('per_page').is.not.below(1);",
											"});",
											"",
											"",
											"",
											"// Test the meta object-current_page-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('current_page');",
											"    pm.expect(pagination).to.have.property('current_page').is.not.null;",
											"    pm.expect(pagination).to.have.property('current_page').is.a('number');",
											"    pm.expect(pagination).to.have.property('current_page').is.not.below(1);",
											"});",
											"",
											"",
											"// Test the meta object-total_pages-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('total_pages');",
											"    pm.expect(pagination).to.have.property('total_pages').is.not.null;",
											"    pm.expect(pagination).to.have.property('total_pages').is.a('number');",
											"    pm.expect(pagination).to.have.property('total_pages').is.not.below(0);",
											"",
											"    pm.expect(pagination).to.have.property('links');",
											"});",
											"",
											"// Test the meta object-total_pages-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('links');",
											"    pm.expect(pagination).to.have.property('links').to.be.an('object');",
											"    pm.expect(pagination).to.have.property('links').is.not.null;",
											"});",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "c307b04a-8db4-4887-9ef2-ea85c7932052"
									}
								}
							],
							"id": "c79a27a6-e3c8-4fad-9726-ad6fb8369c7f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": \"7127917\",\n  \"amount\": \"4512\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/cash-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										"cash-out"
									]
								},
								"description": "Send the user's earned dollar amount to their identified bank account."
							},
							"response": [
								{
									"id": "287e4950-2fe9-47e6-9592-12efb564727a",
									"name": "User cashout",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account_id\": \"<uuid>\",\n  \"amount\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transactions/cash-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transactions",
												"cash-out"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"status\": \"pending\",\n    \"amount\": \"<float>\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
								},
								{
									"id": "5c6dc87e-6bb8-4c56-ac42-01c8561d93dc",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account_id\": \"<uuid>\",\n  \"amount\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transactions/cash-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transactions",
												"cash-out"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Cash out Negative",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 406\", function () {",
											"    pm.response.to.have.status(406);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"id": "c1e78619-5000-46f4-a2e3-6dc1bd668938"
									}
								}
							],
							"id": "d9dc306b-9972-4cf9-8b70-265d13272d91",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"account_id\": \"7127917\",\n  \"amount\": \"4512\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/transactions/cash-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions",
										"cash-out"
									]
								},
								"description": "Send the user's earned dollar amount to their identified bank account."
							},
							"response": [
								{
									"id": "5a962766-b08a-4fc6-8418-ccc7fc7ebf5e",
									"name": "User cashout",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account_id\": \"<uuid>\",\n  \"amount\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transactions/cash-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transactions",
												"cash-out"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"status\": \"pending\",\n    \"amount\": \"<float>\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
								},
								{
									"id": "153e58e1-c6a0-4535-a46a-823bea611523",
									"name": "Invalid entry. Unprocessable Entity.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"account_id\": \"<uuid>\",\n  \"amount\": \"<number>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/transactions/cash-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transactions",
												"cash-out"
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Show Transaction History-Positive",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"// Test the response body structure",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(responseJSON).to.be.an('object');",
											"    //pm.expect(responseJSON.data).to.be.an('array');",
											"    //pm.expect(responseJSON.meta).to.be.an('array');",
											"",
											"    pm.expect(responseJSON).has.property('data');",
											"    pm.expect(responseJSON).has.property('meta');",
											"});",
											"",
											"// Test the data array structure and properties",
											"pm.test(\"Data array structure is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('id');",
											"        pm.expect(transaction).to.have.property('status');",
											"        pm.expect(transaction).to.have.property('amount');",
											"        pm.expect(transaction).to.have.property('created');",
											"        pm.expect(transaction).to.have.property('modified');",
											"    });",
											"});",
											"",
											"// Test the data array structure and properties",
											"pm.test(\"Data array ID is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('id');",
											"        pm.expect(transaction).to.have.property('id').is.not.null;",
											"        pm.expect(transaction).to.have.property('id').is.a('string');",
											"    });",
											"});",
											"",
											"pm.test(\"Data array Status is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"    ",
											"        pm.expect(transaction).to.have.property('status');",
											"        pm.expect(transaction).to.have.property('status').is.a('string');",
											"        pm.expect(transaction).to.have.property('status').is.oneOf('pending','approved','failed');",
											"    });",
											"});",
											"",
											"pm.test(\"Data array Amount is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('amount');",
											"        pm.expect(transaction).to.have.property('amount').is.a('number');",
											"        pm.expect(transaction).to.have.property('amount').is.above(0.0);",
											"    });",
											"});",
											"",
											"",
											"pm.test(\"Data array Created and Modified is valid\", function () {",
											"    pm.expect(responseJSON.data).to.be.an('array');",
											"",
											"    responseJSON.data.forEach(function (transaction) {",
											"        pm.expect(transaction).to.have.property('created');",
											"        pm.expect(transaction).to.have.property('created').is.a('integer');",
											"        pm.expect(transaction).to.have.property('created').is.above(0);",
											"",
											"        pm.expect(transaction).to.have.property('modified');",
											"        pm.expect(transaction).to.have.property('modified').is.a('integer');",
											"        pm.expect(transaction).to.have.property('modified').is.above(0);",
											"    });",
											"});",
											"",
											"",
											"// Test the meta object structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"    pm.expect(pagination).to.have.property('total');",
											"    pm.expect(pagination).to.have.property('count');",
											"    pm.expect(pagination).to.have.property('per_page');",
											"    pm.expect(pagination).to.have.property('current_page');",
											"    pm.expect(pagination).to.have.property('total_pages');",
											"    pm.expect(pagination).to.have.property('links');",
											"});",
											"",
											"",
											"",
											"// Test the meta object-total-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('total');",
											"    pm.expect(pagination).to.have.property('total').is.not.null;",
											"    pm.expect(pagination).to.have.property('total').is.a('number');",
											"    pm.expect(pagination).to.have.property('total').is.not.below(0);",
											"});",
											"",
											"// Test the meta object-count-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('count');",
											"    pm.expect(pagination).to.have.property('count').is.not.null;",
											"    pm.expect(pagination).to.have.property('count').is.a('number');",
											"    pm.expect(pagination).to.have.property('count').is.not.below(0);",
											"});",
											"",
											"// Test the meta object-per_page-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('per_page');",
											"    pm.expect(pagination).to.have.property('per_page').is.not.null;",
											"    pm.expect(pagination).to.have.property('per_page').is.a('number');",
											"    pm.expect(pagination).to.have.property('per_page').is.not.below(1);",
											"});",
											"",
											"",
											"",
											"// Test the meta object-current_page-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('current_page');",
											"    pm.expect(pagination).to.have.property('current_page').is.not.null;",
											"    pm.expect(pagination).to.have.property('current_page').is.a('number');",
											"    pm.expect(pagination).to.have.property('current_page').is.not.below(1);",
											"});",
											"",
											"",
											"// Test the meta object-total_pages-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('total_pages');",
											"    pm.expect(pagination).to.have.property('total_pages').is.not.null;",
											"    pm.expect(pagination).to.have.property('total_pages').is.a('number');",
											"    pm.expect(pagination).to.have.property('total_pages').is.not.below(0);",
											"",
											"    pm.expect(pagination).to.have.property('links');",
											"});",
											"",
											"// Test the meta object-total_pages-structure and properties",
											"pm.test(\"Meta object structure is valid\", function () {",
											"    pm.expect(responseJSON.meta).to.be.an('object');",
											"",
											"    pm.expect(responseJSON.meta).to.have.property('pagination');",
											"    var pagination = responseJSON.meta.pagination;",
											"    pm.expect(pagination).to.be.an('object');",
											"",
											"    pm.expect(pagination).to.have.property('links');",
											"    pm.expect(pagination).to.have.property('links').to.be.an('object');",
											"    pm.expect(pagination).to.have.property('links').is.not.null;",
											"});",
											""
										],
										"type": "text/javascript",
										"id": "20f5fd6f-cf98-43c1-8cf8-f3ca891b1898"
									}
								}
							],
							"id": "042cb9cb-a4d5-4d91-9c43-8d156ce6256b",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page",
											"disabled": true
										},
										{
											"key": "filter[date]",
											"value": "<date>",
											"disabled": true
										},
										{
											"key": "filter[status]",
											"value": "approved",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "status",
											"description": "Sorting options",
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "descending",
											"disabled": true
										}
									]
								},
								"description": "A transaction history of money earned, cash-out status, etc."
							},
							"response": [
								{
									"id": "b71cc3c6-ff90-4ab5-9a06-f56dcbc623c3",
									"name": "A transaction history",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/transactions?page[number]=1&page[size]=100&filter[date]=<date>&filter[status]=approved&sort=status&sort_order=descending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"transactions"
											],
											"query": [
												{
													"key": "page[number]",
													"value": "1",
													"description": "Page number"
												},
												{
													"key": "page[size]",
													"value": "100",
													"description": "Items per page"
												},
												{
													"key": "filter[date]",
													"value": "<date>"
												},
												{
													"key": "filter[status]",
													"value": "approved"
												},
												{
													"key": "sort",
													"value": "status",
													"description": "Sorting options"
												},
												{
													"key": "sort_order",
													"value": "descending"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"failed\",\n      \"amount\": \"<float>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"pending\",\n      \"amount\": \"<float>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
								}
							]
						}
					],
					"id": "6960bcc7-c217-40e9-ba25-45d49d840868"
				},
				{
					"name": "Show Transaction History-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Get Request- Failure specification are not mentioned",
									"//Params are non-mandatory",
									"//Invalid Body Param specifications are not mentioned. Currently if we send invalid values in the params,still 200OK is received."
								],
								"type": "text/javascript",
								"id": "387bd922-add1-4b86-9582-d7108d3c4f1e"
							}
						}
					],
					"id": "568a75f9-4a10-4631-9485-ff00327c7138",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/transactions?page[number]=asb",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"transactions"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "asb",
									"description": "Page number"
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[date]",
									"value": "<date>",
									"disabled": true
								},
								{
									"key": "filter[status]",
									"value": "approved",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "status",
									"description": "Sorting options",
									"disabled": true
								},
								{
									"key": "sort_order",
									"value": "descending",
									"disabled": true
								}
							]
						},
						"description": "A transaction history of money earned, cash-out status, etc."
					},
					"response": [
						{
							"id": "92309472-f9e6-4728-949b-1f4ef7aade30",
							"name": "A transaction history",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/transactions?page[number]=1&page[size]=100&filter[date]=<date>&filter[status]=approved&sort=status&sort_order=descending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"transactions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[date]",
											"value": "<date>"
										},
										{
											"key": "filter[status]",
											"value": "approved"
										},
										{
											"key": "sort",
											"value": "status",
											"description": "Sorting options"
										},
										{
											"key": "sort_order",
											"value": "descending"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"failed\",\n      \"amount\": \"<float>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"pending\",\n      \"amount\": \"<float>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "a5b7b1cd-e9df-478c-849d-cc15bcbe774b"
		},
		{
			"name": "payment-methods",
			"item": [
				{
					"name": "Add payment method-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"// Test the response body structure and values",
									"pm.test(\"Response body structure is valid and not null\", function () {",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
									"    pm.expect(responseJSON).has.property('data').is.not.null;",
									"});",
									"",
									"// Test the properties of the data object",
									"//id Validation",
									"pm.test(\"Data object-ID-structure is valid\", function () {",
									"    ",
									"   ",
									"    pm.expect(responseJSON.data).has.property('id');",
									"    pm.expect(responseJSON.data).has.property('id').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('id').is.string;",
									"    ",
									"",
									"});",
									"",
									"//token_id validation",
									"pm.test(\"Data object-Token_ID-structure is valid\", function () {",
									"    ",
									"    pm.expect(responseJSON.data).has.property('token_id');",
									"    pm.expect(responseJSON.data).has.property('token_id').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('token_id').is.string;",
									"    ",
									"",
									"});",
									"",
									"//masked_card_number validation",
									"pm.test(\"Data object-Masked_Card_Number-structure is valid\", function () {",
									"    ",
									"    pm.expect(responseJSON.data).has.property('masked_card_number');",
									"    pm.expect(responseJSON.data).has.property('masked_card_number').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('masked_card_number').is.string;",
									"",
									"});",
									"",
									"//name vaidation    ",
									"pm.test(\"Data object-name-structure is valid\", function () {",
									"    ",
									"    pm.expect(responseJSON.data).has.property('name');",
									"    pm.expect(responseJSON.data).has.property('name').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('name').is.string;",
									"",
									"});",
									"",
									"//card_type validation    ",
									"pm.test(\"Data object-card_type-structure is valid\", function () {",
									"    ",
									"    pm.expect(responseJSON.data).has.property('card_type');",
									"    pm.expect(responseJSON.data).has.property('card_type').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('card_type').is.string;",
									"",
									"});",
									"",
									"//Expiration Date Validation",
									"pm.test(\"Data object-expiration_date-structure is valid\", function () {",
									"    ",
									"    pm.expect(responseJSON.data).has.property('expiration_date');",
									"    pm.expect(responseJSON.data).has.property('expiration_date').is.not.null;",
									"    pm.expect(responseJSON.data).has.property('expiration_date').is.string;",
									"    pm.expect(responseJSON.data.expiration_date).to.match(/^\\d{2}\\/\\d{2}$/);",
									"});"
								],
								"type": "text/javascript",
								"id": "42d19cb6-3ca0-4ea1-bfa3-478f13bc1768"
							}
						}
					],
					"id": "bda270c2-e0a4-4109-8cf3-01de70d4be6e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  //\"id\": \"c2862d83-d6c1-4e91-9755-9563dc1b7290\",\n  \"token_id\": \"--\",\n  \"name\": \"Rahul Jaiswal\",\n  \"masked_card_number\": \"91022\",\n  \"card_type\": \"Mastercard\",\n  \"expiration_date\": \"klklad\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payment-methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment-methods"
							]
						},
						"description": "Add a payment method (credit or debit card) to the user's account for receiving cash-out payments"
					},
					"response": [
						{
							"id": "223fd4ef-482f-432a-9d2b-8ef2fcdfa05a",
							"name": "Payment method",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"token_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"masked_card_number\": \"<string>\",\n  \"card_type\": \"<string>\",\n  \"expiration_date\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payment-methods",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"token_id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"masked_card_number\": \"<string>\",\n    \"card_type\": \"<string>\",\n    \"expiration_date\": \"<string>\"\n  }\n}"
						},
						{
							"id": "6b589cea-a3e6-4d60-8fa8-7b68a01204cc",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"token_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"masked_card_number\": \"<string>\",\n  \"card_type\": \"<string>\",\n  \"expiration_date\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payment-methods",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Add payment method-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();",
									"",
									"pm.test(\"Response status code is 406\", function () {",
									"    pm.response.to.have.status(406);",
									"});",
									"",
									"pm.test(\"Failure Messgae - Token Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The token id field is required.\")",
									"});",
									"",
									"pm.test(\"Failure Messgae - Name Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The name field is required.\")",
									"});",
									"",
									"pm.test(\"Failure Messgae - Masked Card Number Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The masked card number field is required.\")",
									"});",
									"",
									"pm.test(\"Failure Messgae - Card Type Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The card type field is required.\")",
									"});",
									"",
									"pm.test(\"Failure Messgae - Card Type Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The card type field is required.\")",
									"});",
									"",
									"pm.test(\"Failure Messgae - Expiration Is Null\", function(){",
									"    pm.response.to.have.status(422);",
									"    pm.expect(responseJSON.message).is.contains(\"The expiration date field is required.\")",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "24265737-bad7-4bd4-82c6-a901060c3bf8"
							}
						}
					],
					"id": "066bae05-5db5-44b2-8134-80c9108dc64d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  //\"id\": \"c2862d83-d6c1-4e91-9755-9563dc1b7290\",\n  \"token_id\": \"\",\n  \"name\": \"Rahul Jaiswal\",\n  \"masked_card_number\": \"9082\",\n  \"card_type\": \"VISA\",\n  \"expiration_date\": \"12/25\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payment-methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment-methods"
							]
						},
						"description": "Add a payment method (credit or debit card) to the user's account for receiving cash-out payments"
					},
					"response": [
						{
							"id": "84e58f41-a857-47f2-a27d-ac1cd5cf53d3",
							"name": "Payment method",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"token_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"masked_card_number\": \"<string>\",\n  \"card_type\": \"<string>\",\n  \"expiration_date\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payment-methods",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"token_id\": \"<string>\",\n    \"name\": \"<string>\",\n    \"masked_card_number\": \"<string>\",\n    \"card_type\": \"<string>\",\n    \"expiration_date\": \"<string>\"\n  }\n}"
						},
						{
							"id": "341b9bf1-14f1-4f66-8c1f-e4f0079e5613",
							"name": "Invalid entry. Unprocessable Entity.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"token_id\": \"<string>\",\n  \"name\": \"<string>\",\n  \"masked_card_number\": \"<string>\",\n  \"card_type\": \"<string>\",\n  \"expiration_date\": \"<string>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/payment-methods",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List payment methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"",
									"pm.test(\"Response code validation\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains an array of payment methods\", function () {",
									"    var jsonData = pm.response.json();",
									"     pm.expect(jsonData).to.be.an('object');",
									"    pm.expect(jsonData.data).to.be.an('array');",
									"    pm.expect(jsonData.data.length).to.be.above(0);",
									"});",
									"",
									"pm.test(\"Each payment method has required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.data.forEach(function (paymentMethod) {",
									"        pm.expect(paymentMethod).to.have.property('id');",
									"        pm.expect(paymentMethod).to.have.property('token_id');",
									"        pm.expect(paymentMethod).to.have.property('name');",
									"        pm.expect(paymentMethod).to.have.property('masked_card_number');",
									"        pm.expect(paymentMethod).to.have.property('card_type');",
									"        pm.expect(paymentMethod).to.have.property('expiration_date');",
									"    });",
									"});",
									"",
									"pm.test(\"Response contains meta information\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.meta).to.be.an('object');",
									"    pm.expect(jsonData.meta).to.have.property('pagination');",
									"    pm.expect(jsonData.meta.pagination).to.have.property('current_page');",
									"    pm.expect(jsonData.meta.pagination).to.have.property('count');",
									"    pm.expect(jsonData.meta.pagination).to.have.property('per_page');",
									"    pm.expect(jsonData.meta.pagination).to.have.property('total_pages');",
									"    pm.expect(jsonData.meta.pagination).to.have.property('total');",
									"});",
									"",
									"//Should we validate the data types of the key value of the data request also. We are doing it in the post request?",
									"//Get Failure specification not defined",
									""
								],
								"type": "text/javascript",
								"id": "2654963f-78ba-45cb-880f-32ca14db5c99"
							}
						}
					],
					"id": "bc859c6a-5d29-4b9f-bbe9-b5d7d73c46ad",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/payment-methods?page[number]=1&page[size]=100",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment-methods"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page"
								}
							]
						},
						"description": "List payment methods (credit or debit card) connected to the user's account. There will usually be only one payment method active at any given time."
					},
					"response": [
						{
							"id": "3c19a8c8-1f1d-4522-8cec-cf85c29d29cd",
							"name": "Payment methods",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/payment-methods?page[number]=1&page[size]=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"token_id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"masked_card_number\": \"<string>\",\n      \"card_type\": \"<string>\",\n      \"expiration_date\": \"<string>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"token_id\": \"<string>\",\n      \"name\": \"<string>\",\n      \"masked_card_number\": \"<string>\",\n      \"card_type\": \"<string>\",\n      \"expiration_date\": \"<string>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Delete payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response code validation\", function () {",
									"    pm.response.to.have.status(202);",
									"});",
									""
								],
								"type": "text/javascript",
								"id": "0313c566-dfb3-4c93-a50e-cdf1f15e92ca"
							}
						}
					],
					"id": "fe2db323-870d-4de7-afac-d3f0a70828f7",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"account_id\": \"TestToken\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payment-methods?account_id=94fcbea2-7257-4906-bf6d-5f64033570b8",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment-methods"
							],
							"query": [
								{
									"key": "account_id",
									"value": "94fcbea2-7257-4906-bf6d-5f64033570b8",
									"description": "(Required) "
								}
							]
						},
						"description": "Delete one payment method from the user's account"
					},
					"response": [
						{
							"id": "6ece1557-dbdd-4f63-a0fe-ca846b0f8618",
							"name": "Payment method deleted",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/payment-methods?account_id=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"payment-methods"
									],
									"query": [
										{
											"key": "account_id",
											"value": "<uuid>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "0acf8993-1d55-4d86-a164-16a637380bfe"
		},
		{
			"name": "my-stats",
			"item": [
				{
					"name": "Display user stats-Positive",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponeData = pm.response.json();",
									"",
									"//Validate the status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validate the response is not null ",
									"pm.test(\"Response body is not null\", function () {",
									"    pm.expect(jsonResponeData).to.be.an('object');",
									"    pm.expect(jsonResponeData).to.be.not.null;",
									"})",
									"",
									"// Validate the response body structure and values",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(jsonResponeData).to.be.an('object');",
									"",
									"    // Validate the properties in the response body",
									"    pm.expect(pm.response.json()).to.have.property('calls_completed');",
									"    pm.expect(pm.response.json()).to.have.property('visits_completed');",
									"    pm.expect(pm.response.json()).to.have.property('ballots_retrieved');",
									"    pm.expect(pm.response.json()).to.have.property('dollars_earned');",
									"});",
									"",
									"// Validate the data array in the response body",
									"pm.test(\"Data array structure is valid\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.be.an('array').that.has.lengthOf(1);",
									"",
									"    // Validate the value property in each data object",
									"    data.forEach(function (obj) {",
									"        pm.expect(obj).to.have.property('value');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "087136ea-f640-451e-a8fb-7fd9f0e4a9aa"
							}
						}
					],
					"id": "ba7accee-f3a2-45b7-be1e-503872d91263",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/my-stats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-stats"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								}
							]
						},
						"description": "Display the user's canvassing statistics, such as calls made, visits made, ballots collected, and earnings balance."
					},
					"response": [
						{
							"id": "30294fc5-ef3e-4425-b74c-c79c7ba71ed7",
							"name": "User stats",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-stats?page[number]=1&page[size]=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-stats"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"reference #/components/schemas/UserStats not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/UserStats not found in the OpenAPI spec\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Display user stats Copy-Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonResponeData = pm.response.json();",
									"",
									"//Validate the status code",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Validate the response is not null ",
									"pm.test(\"Response body is not null\", function () {",
									"    pm.expect(jsonResponeData).to.be.an('object');",
									"    pm.expect(jsonResponeData).to.be.not.null;",
									"})",
									"",
									"// Validate the response body structure and values",
									"pm.test(\"Response body structure is valid\", function () {",
									"    pm.expect(jsonResponeData).to.be.an('object');",
									"",
									"    // Validate the properties in the response body",
									"    pm.expect(pm.response.json()).to.have.property('calls_completed');",
									"    pm.expect(pm.response.json()).to.have.property('visits_completed');",
									"    pm.expect(pm.response.json()).to.have.property('ballots_retrieved');",
									"    pm.expect(pm.response.json()).to.have.property('dollars_earned');",
									"});",
									"",
									"// Validate the data array in the response body",
									"pm.test(\"Data array structure is valid\", function () {",
									"    var data = pm.response.json().data;",
									"    pm.expect(data).to.be.an('array').that.has.lengthOf(1);",
									"",
									"    // Validate the value property in each data object",
									"    data.forEach(function (obj) {",
									"        pm.expect(obj).to.have.property('value');",
									"    });",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"id": "21dfbe00-4cdc-467b-ae29-343fb55359a7"
							}
						}
					],
					"id": "4bbefad8-d377-4592-b2b5-3a165bdb3001",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/my-stats",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-stats"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								}
							]
						},
						"description": "Display the user's canvassing statistics, such as calls made, visits made, ballots collected, and earnings balance."
					},
					"response": [
						{
							"id": "3ac2b5b9-58ec-4046-b69a-f135f6a9ad8a",
							"name": "User stats",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-stats?page[number]=1&page[size]=100",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-stats"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"value\": \"reference #/components/schemas/UserStats not found in the OpenAPI spec\"\n    },\n    {\n      \"value\": \"reference #/components/schemas/UserStats not found in the OpenAPI spec\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "ee81dc15-947f-486c-9947-a6941b6c0728"
		},
		{
			"name": "campaigns",
			"item": [
				{
					"name": "{campaignId}",
					"item": [
						{
							"name": "select",
							"item": [
								{
									"name": "Positive - RPC call to select a campaign-Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.response.to.not.be.empty;",
													"",
													"});",
													"",
													"pm.test(\"Response body contains 'Campaign selected'\", function () {",
													"    pm.expect(pm.response.text()).to.include('Campaign selected');",
													"});"
												],
												"type": "text/javascript",
												"id": "922124ea-8982-42c7-b11a-37e4d29bce38"
											}
										}
									],
									"id": "357fd151-094b-41d7-85fa-e08e2ada3804",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/select",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"select"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "Select a campaign for the user."
									},
									"response": [
										{
											"id": "9ff235ba-b31e-47fd-9c06-0e7a462be699",
											"name": "Campaign selected",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/select",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"select"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "a3841c25-7f7b-4154-b23e-dc549bb03deb",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/select",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"select"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - RPC call to select a campaign-Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript",
												"id": "a29c0a74-63b0-41f3-80df-8394a352cb25"
											}
										}
									],
									"id": "4e6996ed-e44b-4f07-ae59-e77c85a4cd46",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/select",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"select"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": ""
												}
											]
										},
										"description": "Select a campaign for the user."
									},
									"response": [
										{
											"id": "b6c4b11c-c460-4535-badc-fb62e0c68d9b",
											"name": "Campaign selected",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/select",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"select"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "1cd66cc6-654f-4fb2-b8ad-a74abc690a8f",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/select",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"select"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "5e029122-55c9-4c6f-88e1-38f17a7cea0d"
						},
						{
							"name": "deselect",
							"item": [
								{
									"name": "Positive - RPC call to deselect a campaign-Positive",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.response.to.not.be.empty;",
													"",
													"});",
													"",
													"pm.test(\"Response body contains 'Campaign selected'\", function () {",
													"    pm.expect(pm.response.text()).to.include('Campaign deselected');",
													"});"
												],
												"type": "text/javascript",
												"id": "255ded67-1018-4e86-8c7e-eb2e7d50ce99"
											}
										}
									],
									"id": "71fb38fa-dd3c-49bb-8b3e-5c291edeb0bd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"deselect"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "Deselect a campaign from the user."
									},
									"response": [
										{
											"id": "bc801d35-8aaf-407f-8670-57a77684103e",
											"name": "Campaign deselected",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"deselect"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "a3788710-53b5-4dcb-94cb-c51e5fff4ace",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"deselect"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - RPC call to deselect a campaign-Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													""
												],
												"type": "text/javascript",
												"id": "f3126860-8295-46d6-8055-f8ed66312739"
											}
										}
									],
									"id": "d8bb3bb9-9e74-4437-b3ff-05ec4a250800",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"deselect"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "435443ft56546"
												}
											]
										},
										"description": "Deselect a campaign from the user."
									},
									"response": [
										{
											"id": "9e99fd2e-4a16-43e7-a86c-ac37d600e68f",
											"name": "Campaign deselected",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"deselect"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "c3607f3a-e980-45ba-84a2-2cd0f6e15d64",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/deselect",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"deselect"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "e1c4d3f9-0000-4849-a834-59d0171e0a90"
						},
						{
							"name": "new-screening",
							"item": [
								{
									"name": "Positive - RPC call to initiate a screening",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 202\", function () {",
													"    pm.response.to.have.status(202);",
													"});",
													"",
													"pm.test(\"Body matches string\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"New screening\");",
													"});",
													"",
													"pm.test(\"Verify whether repsonse is in JSON or not \", function () {",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"});"
												],
												"type": "text/javascript",
												"id": "443fcc6a-5c23-4c24-8ebc-0ad6079dbf3a"
											}
										}
									],
									"id": "32ceb378-3d50-497c-9899-d5aa3a0af293",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"new-screening"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "Initiate a new screening."
									},
									"response": [
										{
											"id": "28fbd0c8-1f9b-40cb-86cb-3f99fa485045",
											"name": "New screening",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"new-screening"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "cc8de72f-19fc-47de-a8fe-8d8bbb2ad297",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"new-screening"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "RPC call to initiate a screening-Negative",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Response status is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Response body is not empty\", function () {",
													"    pm.response.to.not.be.empty;",
													"",
													"});",
													"",
													"",
													"pm.test(\"Verify whether repsonse is in JSON or not \", function () {",
													"    var jsonData = pm.response.json();",
													"    console.log(jsonData)",
													"});"
												],
												"type": "text/javascript",
												"id": "672e3b7f-3dc4-4c77-aab8-80ff4045b546"
											}
										}
									],
									"id": "3ebfb21a-837c-4a53-82f0-ab91c55249b4",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"new-screening"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": ""
												}
											]
										},
										"description": "Initiate a new screening."
									},
									"response": [
										{
											"id": "0c756c57-e0f5-4bf0-b24a-0c159f9d31e0",
											"name": "New screening",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"new-screening"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "1f0710fc-83d5-447d-a9eb-325cd2d87441",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/new-screening",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"new-screening"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "19a95309-73c8-464e-a6c9-e808f1bdb9f6"
						},
						{
							"name": "contacts",
							"item": [
								{
									"name": "{contactId}",
									"item": [
										{
											"name": "{status}",
											"item": [
												{
													"name": "confirmation",
													"item": [
														{
															"name": "Positive - Confirm the contact location",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// Test the response for the existence of elements, data type, and checks\r",
																			"pm.test(\"Status code is 201\", function () {\r",
																			"    pm.response.to.have.status(201);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Response body is not empty\", function () {\r",
																			"    pm.response.to.not.be.empty();\r",
																			"});\r",
																			"\r",
																			"// Replace 'responseElement' with the actual name of the element in the response\r",
																			"const responseElement = pm.response.json().responseElement;\r",
																			"\r",
																			"pm.test(\"Response element exists\", function () {\r",
																			"    pm.expect(responseElement).to.exist;\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Response element should be of type string\", function () {\r",
																			"    pm.expect(typeof responseElement).to.equal(\"string\");\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Response element should not be null\", function () {\r",
																			"    pm.expect(responseElement).to.not.be.null;\r",
																			"});\r",
																			"\r",
																			"// Add more tests as needed based on specific requirements\r",
																			""
																		],
																		"type": "text/javascript",
																		"id": "1f556d61-4f05-474a-b4a5-862c5437db75"
																	}
																}
															],
															"id": "42691c6f-e7e7-4880-bbea-dd38be04ecee",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{bearerToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"value": "<string>",
																			"type": "text",
																			"disabled": true
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"confirmation"
																	],
																	"variable": [
																		{
																			"key": "campaignId",
																			"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																		},
																		{
																			"key": "contactId",
																			"value": "09173c23-7665-4e60-8b3c-9b50bd1e4346"
																		}
																	]
																},
																"description": "Confirm that the user is at a contact location (user can take a photo of the location to confirm)."
															},
															"response": [
																{
																	"id": "d6558d42-9879-48de-8ebb-c75b777a54e4",
																	"name": "Photo sent",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "multipart/form-data"
																			},
																			{
																				"description": "Added as a part of security scheme: bearer",
																				"key": "Authorization",
																				"value": "Bearer <token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "file",
																					"value": "<string>",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"campaigns",
																				":campaignId",
																				"contacts",
																				":contactId",
																				"confirmation"
																			],
																			"variable": [
																				{
																					"key": "campaignId"
																				},
																				{
																					"key": "contactId"
																				}
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																},
																{
																	"id": "d1ce6632-b496-4a48-a9ea-d2195b5b2644",
																	"name": "Validation error",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "multipart/form-data"
																			},
																			{
																				"description": "Added as a part of security scheme: bearer",
																				"key": "Authorization",
																				"value": "Bearer <token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "file",
																					"value": "<string>",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"campaigns",
																				":campaignId",
																				"contacts",
																				":contactId",
																				"confirmation"
																			],
																			"variable": [
																				{
																					"key": "campaignId"
																				},
																				{
																					"key": "contactId"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														},
														{
															"name": "Negative - Confirm the contact location Copy",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"// 1. Invalid or non-existent endpoint\r",
																			"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
																			"    pm.response.to.have.status(404); \r",
																			"});\r",
																			"\r",
																			"// 2. Unauthorized access\r",
																			"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
																			"    pm.response.to.have.status(401); \r",
																			"});\r",
																			"\r",
																			"// 3. Server errors\r",
																			"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
																			"    pm.response.to.have.status(500); \r",
																			"});\r",
																			"\r",
																			"// 4. Invalid query parameters\r",
																			"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
																			"    pm.response.to.have.status(400); \r",
																			"});\r",
																			"\r",
																			"// 5. Testing caching mechanisms\r",
																			"pm.test(\"Test Case 5: Caching Test\", function () {\r",
																			"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
																			"});\r",
																			"\r",
																			"// 6. Timeouts\r",
																			"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
																			"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
																			"});\r",
																			""
																		],
																		"type": "text/javascript",
																		"id": "ebaba52a-9d60-42f9-bf2e-c7dea0a277a4"
																	}
																}
															],
															"id": "16f14b11-e8b0-4ebc-8ed5-e9cf548d074e",
															"protocolProfileBehavior": {
																"disableBodyPruning": true
															},
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{bearerToken}}",
																			"type": "string"
																		}
																	]
																},
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "file",
																			"value": "<string>",
																			"type": "text",
																			"disabled": true
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"confirmation"
																	],
																	"variable": [
																		{
																			"key": "campaignId",
																			"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																		},
																		{
																			"key": "contactId",
																			"value": "09173c23-7665-4e60-8b3c-9b50bd1e4346"
																		}
																	]
																},
																"description": "Confirm that the user is at a contact location (user can take a photo of the location to confirm)."
															},
															"response": [
																{
																	"id": "7bdbbc6d-4b8c-4535-8034-dc2c274d9a66",
																	"name": "Photo sent",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "multipart/form-data"
																			},
																			{
																				"description": "Added as a part of security scheme: bearer",
																				"key": "Authorization",
																				"value": "Bearer <token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "file",
																					"value": "<string>",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"campaigns",
																				":campaignId",
																				"contacts",
																				":contactId",
																				"confirmation"
																			],
																			"variable": [
																				{
																					"key": "campaignId"
																				},
																				{
																					"key": "contactId"
																				}
																			]
																		}
																	},
																	"status": "Created",
																	"code": 201,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																},
																{
																	"id": "9a6110ae-bfdd-410c-8c17-f84a5e1d57be",
																	"name": "Validation error",
																	"originalRequest": {
																		"method": "POST",
																		"header": [
																			{
																				"key": "Content-Type",
																				"value": "multipart/form-data"
																			},
																			{
																				"description": "Added as a part of security scheme: bearer",
																				"key": "Authorization",
																				"value": "Bearer <token>"
																			}
																		],
																		"body": {
																			"mode": "formdata",
																			"formdata": [
																				{
																					"key": "file",
																					"value": "<string>",
																					"type": "text"
																				}
																			]
																		},
																		"url": {
																			"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/confirmation",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"campaigns",
																				":campaignId",
																				"contacts",
																				":contactId",
																				"confirmation"
																			],
																			"variable": [
																				{
																					"key": "campaignId"
																				},
																				{
																					"key": "contactId"
																				}
																			]
																		}
																	},
																	"status": "Method Not Allowed",
																	"code": 405,
																	"_postman_previewlanguage": "text",
																	"header": [],
																	"cookie": [],
																	"body": ""
																}
															]
														}
													],
													"id": "078fa6dd-4873-4516-a5a6-04b8e60d3956"
												},
												{
													"name": "Positve -RPC call to perform status change tasks such as assign a contact to a user (claim), release, mark completed or set in-process.",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test for the existence of the response element\r",
																	"pm.test(\"Response element exists\", function () {\r",
																	"    pm.response.to.have.jsonBody();\r",
																	"});\r",
																	"\r",
																	"// Test for the data type of the response element (assuming it's an object)\r",
																	"pm.test(\"Response element is of object data type\", function () {\r",
																	"    pm.expect(pm.response.json()).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"// Test for null value check on the response element\r",
																	"pm.test(\"Response element is not null\", function () {\r",
																	"    pm.expect(pm.response.json()).to.not.eql(null);\r",
																	"});\r",
																	"\r",
																	"// Test for empty value check on the response element\r",
																	"pm.test(\"Response element is not empty\", function () {\r",
																	"    pm.expect(Object.keys(pm.response.json()).length).to.be.greaterThan(0);\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"id": "7f479a13-ed17-4262-8348-bded5f588709"
															}
														}
													],
													"id": "0c4f8a07-df00-49a4-8083-5c6d7e004458",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																":contactId",
																":status"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "contactId",
																	"value": "09173c23-7665-4e60-8b3c-9b50bd1e4346"
																},
																{
																	"key": "status",
																	"value": "release"
																}
															]
														},
														"description": "Updates the contact status"
													},
													"response": [
														{
															"id": "875404bc-fbb9-4f45-ae0e-671544819530",
															"name": "Contact status updated.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		":status"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		},
																		{
																			"key": "status"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"id": "f245c955-306d-4a1f-ad18-e12e3c88788d",
															"name": "Bad request",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		":status"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		},
																		{
																			"key": "status"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Negative -RPC call to perform status change tasks such as assign a contact to a user (claim), release, mark completed or set in-process. Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// 1. Invalid or non-existent endpoint\r",
																	"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
																	"    pm.response.to.have.status(404); \r",
																	"});\r",
																	"\r",
																	"// 2. Unauthorized access\r",
																	"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
																	"    pm.response.to.have.status(401); \r",
																	"});\r",
																	"\r",
																	"// 3. Server errors\r",
																	"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
																	"    pm.response.to.have.status(500); \r",
																	"});\r",
																	"\r",
																	"// 4. Invalid query parameters\r",
																	"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
																	"    pm.response.to.have.status(400); \r",
																	"});\r",
																	"\r",
																	"// 5. Testing caching mechanisms\r",
																	"pm.test(\"Test Case 5: Caching Test\", function () {\r",
																	"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
																	"});\r",
																	"\r",
																	"// 6. Timeouts\r",
																	"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "a3b76987-6d5b-4ebc-a2c0-f757f12a3290"
															}
														}
													],
													"id": "33e0c9e8-0d4a-4d7c-8385-7ebab798b6d8",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																":contactId",
																":status"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "contactId",
																	"value": "09173c23-7665-4e60-8b3c-9b50bd1e4346"
																},
																{
																	"key": "status",
																	"value": "release"
																}
															]
														},
														"description": "Updates the contact status"
													},
													"response": [
														{
															"id": "a17de8f0-b83f-4042-adb8-f8a009f0924c",
															"name": "Contact status updated.",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		":status"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		},
																		{
																			"key": "status"
																		}
																	]
																}
															},
															"status": "Accepted",
															"code": 202,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"id": "1d5e8701-1a91-4da3-a51e-7ffabe14a767",
															"name": "Bad request",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/:status",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		":status"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		},
																		{
																			"key": "status"
																		}
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"id": "6a8b3a13-5e65-4b6f-b62b-1bb1cb00c21a"
										},
										{
											"name": "rate",
											"item": [
												{
													"name": "Positive -Rate contact interaction",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test if the response has the required elements\r",
																	"pm.test(\"Response should contain the 'data' element\", function () {\r",
																	"    pm.response.to.have.jsonBody('data');\r",
																	"});\r",
																	"\r",
																	"// Test if the 'data' element is not null\r",
																	"pm.test(\"The 'data' element should not be null\", function () {\r",
																	"    pm.expect(pm.response.json().data).to.not.be.null;\r",
																	"});\r",
																	"\r",
																	"// Test if the 'data' element is not empty (for objects or arrays)\r",
																	"pm.test(\"The 'data' element should not be empty\", function () {\r",
																	"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
																	"});\r",
																	"\r",
																	"// Test the data type of the 'data' element (you can change 'object' to 'array' or other types based on your API response)\r",
																	"pm.test(\"The 'data' element should be an object\", function () {\r",
																	"    pm.expect(pm.response.json().data).to.be.an('object');\r",
																	"});\r",
																	"\r",
																	"// Test if the response status code is 201 (Interaction rated)\r",
																	"pm.test(\"Response status code should be 201 (Interaction rated)\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"// Test if the response status code is not 405 (Validation error)\r",
																	"pm.test(\"Response status code should not be 405 (Validation error)\", function () {\r",
																	"    pm.response.to.not.have.status(405);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "2f519285-cb99-48ec-9946-e0d5439b09f1"
															}
														}
													],
													"id": "61db7b01-bb9b-4cb3-9981-3d89ce50ca6d",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																":contactId",
																"rate"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "<uuid>"
																},
																{
																	"key": "contactId",
																	"value": "<uuid>"
																}
															]
														},
														"description": "Rate the interaction between the user and the voter (smiley, flat, frown)."
													},
													"response": [
														{
															"id": "b837ce8e-7f51-4833-bd09-a47a2337daa4",
															"name": "Interaction rated",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"rate"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"id": "13ea5e29-3274-461a-a276-46f1a49c5549",
															"name": "Validation error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"rate"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Negative- Rate contact interaction Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// 1. Invalid or non-existent endpoint\r",
																	"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
																	"    pm.response.to.have.status(404); \r",
																	"});\r",
																	"\r",
																	"// 2. Unauthorized access\r",
																	"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
																	"    pm.response.to.have.status(401); \r",
																	"});\r",
																	"\r",
																	"// 3. Server errors\r",
																	"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
																	"    pm.response.to.have.status(500); \r",
																	"});\r",
																	"\r",
																	"// 4. Invalid query parameters\r",
																	"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
																	"    pm.response.to.have.status(400); \r",
																	"});\r",
																	"\r",
																	"// 5. Testing caching mechanisms\r",
																	"pm.test(\"Test Case 5: Caching Test\", function () {\r",
																	"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
																	"});\r",
																	"\r",
																	"// 6. Timeouts\r",
																	"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
																	"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "eac5626c-523d-488e-8a38-7c8bdd4a7e80"
															}
														}
													],
													"id": "e4f9c597-4dde-4b18-9fe2-8b11fb00a04e",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																":contactId",
																"rate"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "<uuid>"
																},
																{
																	"key": "contactId",
																	"value": "<uuid>"
																}
															]
														},
														"description": "Rate the interaction between the user and the voter (smiley, flat, frown)."
													},
													"response": [
														{
															"id": "4177b882-1f1d-41b0-b73c-e9934561774e",
															"name": "Interaction rated",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"rate"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"id": "44156462-0297-4d15-ba79-c41a1ff82db3",
															"name": "Validation error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"id\": \"<uuid>\",\n  \"voter_id\": \"<uuid>\",\n  \"rating\": \"flat\",\n  \"comments\": \"<string>\",\n  \"created\": \"<long>\"\n}",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/:contactId/rate",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"contacts",
																		":contactId",
																		"rate"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "contactId"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"id": "b62d92d1-6a5d-4928-a4c5-d5f25d3c0dbd"
										}
									],
									"id": "7b88f4d7-cf06-4b44-aae5-61bcefe78540"
								},
								{
									"name": "next",
									"item": [
										{
											"name": "Positve-Return the next contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test case: Validate the existence of the \"data\" element in the response\r",
															"pm.test(\"Response should contain the 'data' element\", function () {\r",
															"    pm.response.to.have.jsonBody('data');\r",
															"});\r",
															"\r",
															"// Test case: Validate the data type of the \"data\" element\r",
															"pm.test(\"Data element should be an object\", function () {\r",
															"    pm.expect(pm.response.json().data).to.be.an('object');\r",
															"});\r",
															"\r",
															"// Test case: Validate if the \"data\" element is not null\r",
															"pm.test(\"Data element should not be null\", function () {\r",
															"    pm.expect(pm.response.json().data).to.not.be.null;\r",
															"});\r",
															"\r",
															"// Test case: Validate if the \"data\" element is not empty\r",
															"pm.test(\"Data element should not be empty\", function () {\r",
															"    pm.expect(pm.response.json().data).to.not.be.empty;\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "32e2320b-d871-486c-b311-5369ec354964"
													}
												}
											],
											"id": "62942b43-4298-4181-bcf8-ad82307f2885",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts",
														"next"
													],
													"variable": [
														{
															"key": "campaignId",
															"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
														}
													]
												},
												"description": "Return the next contact (which can include multiple voters) in the list of contacts."
											},
											"response": [
												{
													"id": "c89103ba-1193-45fe-8f33-4fd7c693d5f0",
													"name": "Next contact",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																"next"
															],
															"variable": [
																{
																	"key": "campaignId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"voters\": {\n      \"data\": [\n        {\n          \"id\": \"<uuid>\",\n          \"email\": \"<email>\",\n          \"first_name\": \"<string>\",\n          \"last_name\": \"<string>\",\n          \"phone\": \"  -623 935 1657\",\n          \"street\": \"<string>\",\n          \"city\": \"<string>\",\n          \"state\": \"<string>\",\n          \"zipcode\": \"<string>\",\n          \"timezone\": \"<string>\",\n          \"age\": \"<number>\",\n          \"sex\": \"female\",\n          \"affiliation\": \"independent\",\n          \"affiliation_other\": \"<string>\",\n          \"voted_last_election\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<uuid>\",\n          \"email\": \"<email>\",\n          \"first_name\": \"<string>\",\n          \"last_name\": \"<string>\",\n          \"phone\": \"1  ᠎(673 9156919\",\n          \"street\": \"<string>\",\n          \"city\": \"<string>\",\n          \"state\": \"<string>\",\n          \"zipcode\": \"<string>\",\n          \"timezone\": \"<string>\",\n          \"age\": \"<number>\",\n          \"sex\": \"male\",\n          \"affiliation\": \"democrat\",\n          \"affiliation_other\": \"<string>\",\n          \"voted_last_election\": \"<boolean>\"\n        }\n      ]\n    },\n    \"phone\": \"  +\\r    ᠎ (314)\\t0083051\",\n    \"street\": \"<string>\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\"\n  }\n}"
												},
												{
													"id": "21faf93b-10e8-4fe1-857b-5cb27ace953e",
													"name": "Not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																"next"
															],
															"variable": [
																{
																	"key": "campaignId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										},
										{
											"name": "Negative-Return the next contact",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// 1. Invalid or non-existent endpoint\r",
															"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
															"    pm.response.to.have.status(404); \r",
															"});\r",
															"\r",
															"// 2. Unauthorized access\r",
															"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
															"    pm.response.to.have.status(401); \r",
															"});\r",
															"\r",
															"// 3. Server errors\r",
															"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
															"    pm.response.to.have.status(500); \r",
															"});\r",
															"\r",
															"// 4. Invalid query parameters\r",
															"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
															"    pm.response.to.have.status(400); \r",
															"});\r",
															"\r",
															"// 5. Testing caching mechanisms\r",
															"pm.test(\"Test Case 5: Caching Test\", function () {\r",
															"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
															"});\r",
															"\r",
															"// 6. Timeouts\r",
															"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
															"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"id": "9ba298a2-83ae-4574-9792-539dbfcc96c0"
													}
												}
											],
											"id": "8663d39b-e0b2-4b43-b61a-299f1420f9ea",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts",
														"next"
													],
													"variable": [
														{
															"key": "campaignId",
															"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
														}
													]
												},
												"description": "Return the next contact (which can include multiple voters) in the list of contacts."
											},
											"response": [
												{
													"id": "29be5d4d-ad11-4995-b657-0a01249eee81",
													"name": "Next contact",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																"next"
															],
															"variable": [
																{
																	"key": "campaignId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"voters\": {\n      \"data\": [\n        {\n          \"id\": \"<uuid>\",\n          \"email\": \"<email>\",\n          \"first_name\": \"<string>\",\n          \"last_name\": \"<string>\",\n          \"phone\": \"  -623 935 1657\",\n          \"street\": \"<string>\",\n          \"city\": \"<string>\",\n          \"state\": \"<string>\",\n          \"zipcode\": \"<string>\",\n          \"timezone\": \"<string>\",\n          \"age\": \"<number>\",\n          \"sex\": \"female\",\n          \"affiliation\": \"independent\",\n          \"affiliation_other\": \"<string>\",\n          \"voted_last_election\": \"<boolean>\"\n        },\n        {\n          \"id\": \"<uuid>\",\n          \"email\": \"<email>\",\n          \"first_name\": \"<string>\",\n          \"last_name\": \"<string>\",\n          \"phone\": \"1  ᠎(673 9156919\",\n          \"street\": \"<string>\",\n          \"city\": \"<string>\",\n          \"state\": \"<string>\",\n          \"zipcode\": \"<string>\",\n          \"timezone\": \"<string>\",\n          \"age\": \"<number>\",\n          \"sex\": \"male\",\n          \"affiliation\": \"democrat\",\n          \"affiliation_other\": \"<string>\",\n          \"voted_last_election\": \"<boolean>\"\n        }\n      ]\n    },\n    \"phone\": \"  +\\r    ᠎ (314)\\t0083051\",\n    \"street\": \"<string>\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\"\n  }\n}"
												},
												{
													"id": "8dbaf4fb-df48-4c07-b2c7-8a3a0f3570cf",
													"name": "Not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/contacts/next",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"contacts",
																"next"
															],
															"variable": [
																{
																	"key": "campaignId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"id": "d64a7c70-8e15-4ec4-b4b0-91c781da2a43"
								},
								{
									"name": "Positive-List available campaign contacts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test case: Validate the response structure and data type\r",
													"pm.test(\"Response has the correct structure and data type\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"    pm.response.to.be.json;\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        type: \"object\",\r",
													"        properties: {\r",
													"            data: {\r",
													"                type: \"array\",\r",
													"                items: {\r",
													"                    $ref: \"#/components/schemas/Contact\"\r",
													"                }\r",
													"            },\r",
													"            meta: {\r",
													"                type: \"object\",\r",
													"                properties: {\r",
													"                    pagination: {\r",
													"                        $ref: \"#/components/schemas/Pager\"\r",
													"                    }\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate each \"data\" object in the response\r",
													"pm.test(\"Each 'data' object in the response has the correct structure\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        pm.expect(contact).to.be.an('object');\r",
													"        // Add more specific tests for individual properties if needed\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate each \"voters\" object in the \"data\" array\r",
													"pm.test(\"Each 'voters' object in the 'data' array has the correct structure\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        contact.voters.data.forEach(function (voter) {\r",
													"            pm.expect(voter).to.be.an('object');\r",
													"            // Add more specific tests for individual properties if needed\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"id\" field in each \"data\" object\r",
													"pm.test(\"Each 'data' object has a valid 'id'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        pm.expect(contact.id).to.be.a('string');\r",
													"        pm.expect(contact.id).to.match(/^[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}$/i);\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"id\" field in each \"voters\" object\r",
													"pm.test(\"Each 'voters' object has a valid 'id'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        contact.voters.data.forEach(function (voter) {\r",
													"            pm.expect(voter.id).to.be.a('string');\r",
													"            pm.expect(voter.id).to.match(/^[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}$/i);\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"phone\" field in each \"data\" object\r",
													"pm.test(\"Each 'data' object has a valid 'phone'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        pm.expect(contact.phone).to.be.a('string');\r",
													"        // Add more specific tests for the phone number format if needed\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"phone\" field in each \"voters\" object\r",
													"pm.test(\"Each 'voters' object has a valid 'phone'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        contact.voters.data.forEach(function (voter) {\r",
													"            pm.expect(voter.phone).to.be.a('string');\r",
													"            // Add more specific tests for the phone number format if needed\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"sex\" field in each \"voters\" object\r",
													"pm.test(\"Each 'voters' object has a valid 'sex'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        contact.voters.data.forEach(function (voter) {\r",
													"            pm.expect(voter.sex).to.be.oneOf(['male', 'female']);\r",
													"        });\r",
													"    });\r",
													"});\r",
													"\r",
													"// Test case: Validate the \"affiliation\" field in each \"voters\" object\r",
													"pm.test(\"Each 'voters' object has a valid 'affiliation'\", function () {\r",
													"    pm.response.json().data.forEach(function (contact) {\r",
													"        contact.voters.data.forEach(function (voter) {\r",
													"            pm.expect(voter.affiliation).to.be.oneOf(['republican', 'independent', 'other']);\r",
													"        });\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "54984043-0437-4e0b-b881-1e0a2866a86f"
											}
										}
									],
									"id": "39f381b2-6eff-4c70-9681-d58c72325298",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/contacts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"contacts"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": null
												}
											]
										},
										"description": "List the available contacts (each of which can include multiple voters) by campaign. Filtered and sortable by location and radius."
									},
									"response": [
										{
											"id": "18dfca95-a74a-46e6-9bf4-0ff085186bcd",
											"name": "List of campaign contacts",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts?page[number]=1&page[size]=100&filter[location]=<string>&sort=radius&sort_order=descending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[location]",
															"value": "<string>",
															"description": "Latitude, longitude, and radius seperated by a comma."
														},
														{
															"key": "sort",
															"value": "radius",
															"description": "Sorting options"
														},
														{
															"key": "sort_order",
															"value": "descending"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" ﻿    (929664-3931\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"\\u000b\\f 1  -(293964\\f9209\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"independent\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \" ᠎    \\f1  -(3113768003\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" 1 \\r\\u000b 435)8002120\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"other\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"᠎(822)186 0657\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"female\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \"\\n-(422 8434687\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
										},
										{
											"id": "19693dc5-22a4-44ae-96a5-98c1232c712c",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts?page[number]=1&page[size]=100&filter[location]=<string>&sort=radius&sort_order=descending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[location]",
															"value": "<string>",
															"description": "Latitude, longitude, and radius seperated by a comma."
														},
														{
															"key": "sort",
															"value": "radius",
															"description": "Sorting options"
														},
														{
															"key": "sort_order",
															"value": "descending"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative-List available campaign contacts Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1. Invalid or non-existent endpoint\r",
													"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
													"    pm.response.to.have.status(404); \r",
													"});\r",
													"\r",
													"// 2. Unauthorized access\r",
													"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"// 3. Server errors\r",
													"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
													"    pm.response.to.have.status(500); \r",
													"});\r",
													"\r",
													"// 4. Invalid query parameters\r",
													"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// 5. Testing caching mechanisms\r",
													"pm.test(\"Test Case 5: Caching Test\", function () {\r",
													"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
													"});\r",
													"\r",
													"// 6. Timeouts\r",
													"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "43ca70b3-7250-4f8d-a596-67159c3ad44d"
											}
										}
									],
									"id": "732d2b1a-2cef-44ed-8b98-5546587cd48b",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/contacts?page[number]=1&page[size]=100&filter[location]=<string>&sort=radius&sort_order=descending",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"contacts"
											],
											"query": [
												{
													"key": "page[number]",
													"value": "1",
													"description": "Page number"
												},
												{
													"key": "page[size]",
													"value": "100",
													"description": "Items per page"
												},
												{
													"key": "filter[location]",
													"value": "<string>",
													"description": "Latitude, longitude, and radius seperated by a comma."
												},
												{
													"key": "sort",
													"value": "radius",
													"description": "Sorting options"
												},
												{
													"key": "sort_order",
													"value": "descending"
												}
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "List the available contacts (each of which can include multiple voters) by campaign. Filtered and sortable by location and radius."
									},
									"response": [
										{
											"id": "3f95a7a5-92b7-4cab-a64f-5e78a6776e7e",
											"name": "List of campaign contacts",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts?page[number]=1&page[size]=100&filter[location]=<string>&sort=radius&sort_order=descending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[location]",
															"value": "<string>",
															"description": "Latitude, longitude, and radius seperated by a comma."
														},
														{
															"key": "sort",
															"value": "radius",
															"description": "Sorting options"
														},
														{
															"key": "sort_order",
															"value": "descending"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" ﻿    (929664-3931\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"\\u000b\\f 1  -(293964\\f9209\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"independent\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \" ᠎    \\f1  -(3113768003\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" 1 \\r\\u000b 435)8002120\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"other\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"᠎(822)186 0657\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"female\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \"\\n-(422 8434687\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
										},
										{
											"id": "c88dc0a2-a89d-4051-aa5c-f82675aa7e3d",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/contacts?page[number]=1&page[size]=100&filter[location]=<string>&sort=radius&sort_order=descending",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"contacts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[location]",
															"value": "<string>",
															"description": "Latitude, longitude, and radius seperated by a comma."
														},
														{
															"key": "sort",
															"value": "radius",
															"description": "Sorting options"
														},
														{
															"key": "sort_order",
															"value": "descending"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "8f21aeb8-38c5-4304-b63d-681bbf446b93"
						},
						{
							"name": "scripts",
							"item": [
								{
									"name": "{scriptId}",
									"item": [
										{
											"name": "questions",
											"item": [
												{
													"name": "Positive-Read script question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test for the /campaigns/{campaignId}/scripts/{scriptId}/questions endpoint\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.response.to.have.status(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content type is application/json\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
																	"});\r",
																	"\r",
																	"// Test for the /campaigns/{campaignId}/scripts/{scriptId}/questions endpoint\r",
																	"\r",
																	"// Test for response presence and structure\r",
																	"pm.test(\"Response contains data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.have.property(\"data\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'campaign_id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"campaign_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'script_id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"script_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'text' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"text\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'options' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"options\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'type' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"type\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Type property is 'short answer'\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.type).to.eql(\"short answer\");\r",
																	"});\r",
																	"\r",
																	"// Test for the /campaigns/{campaignId}/scripts/{scriptId}/questions endpoint\r",
																	"\r",
																	"pm.test(\"Data 'id' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.id).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'campaign_id' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.campaign_id).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'script_id' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.script_id).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'text' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.text).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'options' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.options).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'type' property has correct type\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.type).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"\r",
																	"pm.test(\"IDs have valid UUID format\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.id).to.match(uuidRegex);\r",
																	"    pm.expect(jsonData.data.campaign_id).to.match(uuidRegex);\r",
																	"    pm.expect(jsonData.data.script_id).to.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Options property is a string\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.options).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Type property has a valid value\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const validTypes = [\"short answer\", \"multiple choice\", \"true/false\", \"essay\"];\r",
																	"    pm.expect(validTypes).to.include(jsonData.data.type);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "7b5fb6ba-bbc3-4729-810d-8137228dfdfc"
															}
														}
													],
													"id": "ac1f426c-214b-4294-a655-5ea4e8588384",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId",
																"questions"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "scriptId",
																	"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
																}
															]
														},
														"description": "Show script question and answer options."
													},
													"response": [
														{
															"id": "9a398ebf-2197-4c49-94cd-68858adcca14",
															"name": "Script question and answer options",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"campaign_id\": \"<uuid>\",\n    \"script_id\": \"<uuid>\",\n    \"text\": \"<string>\",\n    \"options\": \"<string>\",\n    \"type\": \"short answer\"\n  }\n}"
														},
														{
															"id": "0e82f6f2-ab64-4c08-bb1d-0c16dfd2e8b2",
															"name": "Not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Negative-Read script question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var responseJSON = pm.response.json();\r",
																	"\r",
																	"\r",
																	"// verify the response status code 200(ok).\r",
																	" pm.test(\"Verify that the response status code is 200\", function () {\r",
																	" pm.response.to.have.status(200);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"\r",
																	"// verify the response body data property.\r",
																	" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
																	" pm.expect(responseJSON).to.have.property('data');\r",
																	" pm.expect(responseJSON).to.have.property('meta');\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//verify that the data property is not an empty array.\r",
																	" pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
																	" var DataCheck = pm.response.json().data;\r",
																	" pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify the validity of 'id', 'campaign_id', 'script_id', 'text', 'options', 'type', properties\", function() {\r",
																	"    pm.expect(responseJSON.data.id).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.campaign_id).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.script_id).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.text).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.options).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.type).to.not.be.null;\r",
																	"\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"id": "cf5d1023-7ab7-4990-bd22-146b65a2c269"
															}
														}
													],
													"id": "5ca0d68b-0214-432e-a4dd-092d6dd56b9e",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId",
																"questions"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "scriptId",
																	"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
																}
															]
														},
														"description": "Show script question and answer options."
													},
													"response": [
														{
															"id": "5263d8d6-0e30-43df-9373-e6cd4a98bcee",
															"name": "Script question and answer options",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"campaign_id\": \"<uuid>\",\n    \"script_id\": \"<uuid>\",\n    \"text\": \"<string>\",\n    \"options\": \"<string>\",\n    \"type\": \"short answer\"\n  }\n}"
														},
														{
															"id": "2298817a-f5fe-47a0-94ad-233de166b0be",
															"name": "Not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Positve-Add answer to script question",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test for the POST /campaigns/{campaignId}/scripts/{scriptId}/answers endpoint\r",
																	"\r",
																	"pm.test(\"Status code is 201\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content type is application/json\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response contains 'data' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.have.property(\"data\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'question_id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"question_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'next_question_id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"next_question_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'voter_id' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"voter_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'answer' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"answer\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data has 'created' property\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.have.property(\"created\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'id' is a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.id).to.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'question_id' is a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.question_id).to.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'next_question_id' is a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.next_question_id).to.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'voter_id' is a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.voter_id).to.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'answer' is a string\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.answer).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'created' is a number (timestamp)\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data.created).to.be.a(\"number\");\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "6a42edc2-e446-43b5-8464-22515b9cc8d9"
															}
														}
													],
													"id": "85361bca-e810-456e-b42e-777068aab0ab",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId",
																"questions"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "scriptId",
																	"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
																}
															]
														},
														"description": "Add the voter's answer to the script question."
													},
													"response": [
														{
															"id": "bc311b14-ebf7-496b-b813-4f6519d7cf4d",
															"name": "Answer sent",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n}"
														},
														{
															"id": "afcc2794-27d5-4864-b15c-cea5bb67741b",
															"name": "Validation error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												},
												{
													"name": "Negative-Add answer to script question Copy",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 405 for validation error\", function () {\r",
																	"    pm.response.to.have.status(405);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Content type is application/json\", function () {\r",
																	"    pm.response.to.have.header(\"Content-Type\", \"application/json\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Response contains error message\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData).to.have.property(\"message\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Error message is of type string\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
																	"});\r",
																	"\r",
																	"// Negative test cases for missing required properties\r",
																	"pm.test(\"Data 'id' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'question_id' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"question_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'next_question_id' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"next_question_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'voter_id' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"voter_id\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'answer' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"answer\");\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'created' property is missing\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    pm.expect(jsonData.data).to.not.have.property(\"created\");\r",
																	"});\r",
																	"\r",
																	"// Negative test case for invalid UUID format\r",
																	"pm.test(\"Data 'id' is not a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.id).to.not.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'question_id' is not a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.question_id).to.not.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'next_question_id' is not a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.next_question_id).to.not.match(uuidRegex);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Data 'voter_id' is not a valid UUID\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"    const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;\r",
																	"    pm.expect(jsonData.data.voter_id).to.not.match(uuidRegex);\r",
																	"});\r",
																	""
																],
																"type": "text/javascript",
																"id": "41020faa-d3e5-44b5-b79a-3504cbe04c60"
															}
														}
													],
													"id": "f2726f31-9a14-4b0f-8ac6-8de390d13444",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "application/json"
															},
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
															"options": {
																"raw": {
																	"headerFamily": "json",
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId",
																"questions"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "scriptId",
																	"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
																}
															]
														},
														"description": "Add the voter's answer to the script question."
													},
													"response": [
														{
															"id": "bdd978d0-a7d4-4968-8a31-e892fb79ae7c",
															"name": "Answer sent",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n}"
														},
														{
															"id": "e59d1554-915c-4493-b109-31fdde8df562",
															"name": "Validation error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "[\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  },\n  {\n    \"id\": \"<uuid>\",\n    \"question_id\": \"<uuid>\",\n    \"next_question_id\": \"<uuid>\",\n    \"voter_id\": \"<uuid>\",\n    \"answer\": \"<string>\",\n    \"created\": \"<long>\"\n  }\n]",
																	"options": {
																		"raw": {
																			"headerFamily": "json",
																			"language": "json"
																		}
																	}
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/questions",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"questions"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"id": "7d1eee33-423d-4aae-b2bb-4455fddf96ae"
										},
										{
											"name": "coalitions",
											"item": [
												{
													"name": "List related coalitions",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"var responseJSON = pm.response.json();\r",
																	"\r",
																	"\r",
																	"// verify the response status code 200(ok).\r",
																	" pm.test(\"Verify that the response status code is 200\", function () {\r",
																	" pm.response.to.have.status(200);\r",
																	"\r",
																	"});\r",
																	"\r",
																	"// verify the response body data property.\r",
																	" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
																	" pm.expect(responseJSON).to.have.property('data');\r",
																	"\r",
																	"\r",
																	"});\r",
																	"\r",
																	"//verify that the data property is not an empty array.\r",
																	" pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
																	" var DataCheck = pm.response.json().data;\r",
																	" pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Verify the validity of 'id', 'campaign_id', 'description', and 'name' properties\", function() {\r",
																	"    pm.expect(responseJSON.data.id).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.campaign_id).to.not.be.null;\r",
																	"    pm.expect(responseJSON.data.name).to.not.be.null;\r",
																	"\r",
																	"});\r",
																	"\r",
																	""
																],
																"type": "text/javascript",
																"id": "15215853-fa04-49ce-aeb8-af8dcbcbc308"
															}
														}
													],
													"id": "68a74ae9-d3b3-4e0d-85f0-12e0feb5b985",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/coalitions",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId",
																"coalitions"
															],
															"query": [
																{
																	"key": "page[number]",
																	"value": "1",
																	"description": "Page number",
																	"disabled": true
																},
																{
																	"key": "page[size]",
																	"value": "100",
																	"description": "Items per page",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "scriptId",
																	"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
																}
															]
														},
														"description": "List coalitions, advocacy groups, or other associations related to this campaign."
													},
													"response": [
														{
															"id": "20746e00-44f5-4ce3-801f-2f1a21da132d",
															"name": "Related Coalitions",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"key": "Accept",
																		"value": "application/json"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/coalitions?page[number]=1&page[size]=100",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"coalitions"
																	],
																	"query": [
																		{
																			"key": "page[number]",
																			"value": "1",
																			"description": "Page number"
																		},
																		{
																			"key": "page[size]",
																			"value": "100",
																			"description": "Items per page"
																		}
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
														},
														{
															"id": "c16c59a4-241e-45b1-b16c-0b8ed2bf1903",
															"name": "Not found",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId/coalitions?page[number]=1&page[size]=100",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"scripts",
																		":scriptId",
																		"coalitions"
																	],
																	"query": [
																		{
																			"key": "page[number]",
																			"value": "1",
																			"description": "Page number"
																		},
																		{
																			"key": "page[size]",
																			"value": "100",
																			"description": "Items per page"
																		}
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "scriptId"
																		}
																	]
																}
															},
															"status": "Not Found",
															"code": 404,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"id": "49a72935-64a9-4bca-9eba-085c64ebd7d8"
										},
										{
											"name": "Read one script",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var responseJSON = pm.response.json();\r",
															"\r",
															"\r",
															"// verify the response status code 200(ok).\r",
															" pm.test(\"Verify that the response status code is 200\", function () {\r",
															" pm.response.to.have.status(200);\r",
															"\r",
															"});\r",
															"\r",
															"\r",
															"// verify the response body data property.\r",
															" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
															" pm.expect(responseJSON).to.have.property('data');\r",
															"\r",
															"});\r",
															"\r",
															"pm.test(\"Verify the one script data properties\", function() {\r",
															"    pm.expect(responseJSON.data.id)\r",
															"    pm.expect(responseJSON.data.campaign_id)\r",
															"    pm.expect(responseJSON.data.description)\r",
															"    pm.expect(responseJSON.data.canvas_method).is.not.to.be.null\r",
															"    pm.expect(responseJSON.data.active).is.equal(1)\r",
															"    pm.expect(responseJSON.data.body)\r",
															"    pm.expect(responseJSON.data.intro).is.to.be.null\r",
															"    pm.expect(responseJSON.data.signoff).is.to.be.null\r",
															"    pm.expect(responseJSON.data.title)\r",
															"\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript",
														"id": "eb902af0-38b1-4e9e-ad3c-fd9eb182eea0"
													}
												}
											],
											"id": "d295f104-3b8c-4c98-924b-e0295995230f",
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearerToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"scripts",
														":scriptId"
													],
													"variable": [
														{
															"key": "campaignId",
															"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
														},
														{
															"key": "scriptId",
															"value": "0fcd9022-136d-454f-8b2f-2bc194ef6a1a"
														}
													]
												},
												"description": "Read one campaign script."
											},
											"response": [
												{
													"id": "2c523371-5170-4d82-aa8a-9c359e6e3c39",
													"name": "A single script",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/json"
															},
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId"
															],
															"variable": [
																{
																	"key": "campaignId"
																},
																{
																	"key": "scriptId"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n  \"data\": {\n    \"body\": \"consectetur\",\n    \"id\": \"<uuid>\",\n    \"campaign_id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"description\": \"<string>\",\n    \"canvass_method\": \"calling\",\n    \"active\": \"<boolean>\"\n  }\n}"
												},
												{
													"id": "d4c6593d-8bf9-484c-bffe-4632a406b5ad",
													"name": "Not found",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": "Added as a part of security scheme: bearer",
																"key": "Authorization",
																"value": "Bearer <token>"
															}
														],
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/scripts/:scriptId",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"scripts",
																":scriptId"
															],
															"variable": [
																{
																	"key": "campaignId"
																},
																{
																	"key": "scriptId"
																}
															]
														}
													},
													"status": "Not Found",
													"code": 404,
													"_postman_previewlanguage": "text",
													"header": [],
													"cookie": [],
													"body": ""
												}
											]
										}
									],
									"id": "53a78440-be4c-4e2d-9c33-51dce4c089d7"
								},
								{
									"name": "positive-List campaign scripts",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSON = pm.response.json();\r",
													"\r",
													"\r",
													"// verify the response status code 200(ok).\r",
													" pm.test(\"Verify that the response status code is 200\", function () {\r",
													" pm.response.to.have.status(200);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"// verify the response body data property.\r",
													" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
													" pm.expect(responseJSON).to.have.property('data');\r",
													" pm.expect(responseJSON).to.have.property('meta');\r",
													"\r",
													"});\r",
													"\r",
													"//verify that the data property is not an empty array.\r",
													" pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
													" var DataCheck = pm.response.json().data;\r",
													" pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Response body structure is valid\", function () {\r",
													"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify the validity of 'id', 'campaign_id', 'description', 'canvas_method', 'active', 'body', ' intro', 'signoff' and 'title' properties\", function() {\r",
													"    pm.expect(responseJSON.data.id)\r",
													"    pm.expect(responseJSON.data.id).is.not.null;\r",
													"    pm.expect(responseJSON.data.id).is.string;\r",
													"   \r",
													"    pm.expect(responseJSON.data.campaign_id)\r",
													"    pm.expect(responseJSON.data.campaign_id).is.not.null;\r",
													"    pm.expect(responseJSON.data.campaign_id).is.string\r",
													"\r",
													"    pm.expect(responseJSON.data.description)\r",
													"    pm.expect(responseJSON.data.description).is.not.null\r",
													"    pm.expect(responseJSON.data.description).is.string\r",
													"    \r",
													"    pm.expect(responseJSON.data.canvas_method)\r",
													"    pm.expect(responseJSON.data.canvas_method).is.not.null\r",
													"    pm.expect(responseJSON.data.canvas_method).is.string\r",
													"    \r",
													"    \r",
													"    pm.expect(responseJSON.data.active)\r",
													"    pm.expect(responseJSON.data.active).is.not.null\r",
													"    pm.expect(responseJSON.data.active).is.string\r",
													"    \r",
													"    pm.expect(responseJSON.data.body)\r",
													"    pm.expect(responseJSON.data.body).is.not.null\r",
													"    pm.expect(responseJSON.data.body).is.string\r",
													"\r",
													"    pm.expect(responseJSON.data.intro)\r",
													"    pm.expect(responseJSON.data.intro).is.not.null\r",
													"    pm.expect(responseJSON.data.intro).is.string\r",
													"\r",
													"    pm.expect(responseJSON.data.signoff)\r",
													"    pm.expect(responseJSON.data.signoff).is.not.null\r",
													"    pm.expect(responseJSON.data.signoff).is.string\r",
													"\r",
													"    pm.expect(responseJSON.data.title)\r",
													"     pm.expect(responseJSON.data.title).is.not.null\r",
													"    pm.expect(responseJSON.data.title).is.string\r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "7b809830-7168-4c71-9bdc-8dfd1cf6daa9"
											}
										}
									],
									"id": "69554095-9dcc-405e-9c2b-75d4cc6fe354",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/scripts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"scripts"
											],
											"query": [
												{
													"key": "page[number]",
													"value": "1",
													"description": "Page number",
													"disabled": true
												},
												{
													"key": "page[size]",
													"value": "100",
													"description": "Items per page",
													"disabled": true
												},
												{
													"key": "filter[voterId]",
													"value": "<uuid>",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "List the campaign scripts, filtered by campaign, filterable by voter ID. Includes the title, description, and whether or not the script is active."
									},
									"response": [
										{
											"id": "bccc0fec-84ae-48aa-9e6e-b43a3dd57fe9",
											"name": "Campaign scripts",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/scripts?page[number]=1&page[size]=100&filter[voterId]=<uuid>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"scripts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[voterId]",
															"value": "<uuid>"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"canvass_method\": \"calling\",\n      \"active\": \"<boolean>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"canvass_method\": \"walking\",\n      \"active\": \"<boolean>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
										},
										{
											"id": "edb447d1-744f-4f43-a0aa-279cf0170436",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/scripts?page[number]=1&page[size]=100&filter[voterId]=<uuid>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"scripts"
													],
													"query": [
														{
															"key": "page[number]",
															"value": "1",
															"description": "Page number"
														},
														{
															"key": "page[size]",
															"value": "100",
															"description": "Items per page"
														},
														{
															"key": "filter[voterId]",
															"value": "<uuid>"
														}
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "8610578f-275a-460b-af8a-f21af4b9ffd8"
						},
						{
							"name": "voters",
							"item": [
								{
									"name": "{voterId}",
									"item": [
										{
											"name": "ballot",
											"item": [
												{
													"name": "Confirm ballot",
													"id": "6667f30f-55e3-42f0-9ec1-aff7d3a9ef11",
													"protocolProfileBehavior": {
														"disableBodyPruning": true
													},
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearerToken}}",
																	"type": "string"
																}
															]
														},
														"method": "POST",
														"header": [
															{
																"key": "Content-Type",
																"value": "multipart/form-data"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "location",
																	"value": "<string>",
																	"description": "Latitude, longitude seperated by a comma.",
																	"type": "text"
																},
																{
																	"key": "file",
																	"value": "<string>",
																	"type": "text"
																}
															]
														},
														"url": {
															"raw": "{{baseUrl}}/campaigns/:campaignId/voters/:voterId/ballot",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"campaigns",
																":campaignId",
																"voters",
																":voterId",
																"ballot"
															],
															"variable": [
																{
																	"key": "campaignId",
																	"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
																},
																{
																	"key": "voterId",
																	"value": "<uuid>"
																}
															]
														},
														"description": "Send a photo of the ballot and the GPS coordinates when picking up a ballot."
													},
													"response": [
														{
															"id": "0684adf3-6eee-443c-9d5f-8059532c7f01",
															"name": "Ballot confirmation sent",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "location",
																			"value": "<string>",
																			"description": "Latitude, longitude seperated by a comma.",
																			"type": "text"
																		},
																		{
																			"key": "file",
																			"value": "<string>",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/voters/:voterId/ballot",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"voters",
																		":voterId",
																		"ballot"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "voterId"
																		}
																	]
																}
															},
															"status": "Created",
															"code": 201,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														},
														{
															"id": "c3b6fa37-6930-4ed9-b375-c555054d7ed5",
															"name": "Validation error",
															"originalRequest": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "multipart/form-data"
																	},
																	{
																		"description": "Added as a part of security scheme: bearer",
																		"key": "Authorization",
																		"value": "Bearer <token>"
																	}
																],
																"body": {
																	"mode": "formdata",
																	"formdata": [
																		{
																			"key": "location",
																			"value": "<string>",
																			"description": "Latitude, longitude seperated by a comma.",
																			"type": "text"
																		},
																		{
																			"key": "file",
																			"value": "<string>",
																			"type": "text"
																		}
																	]
																},
																"url": {
																	"raw": "{{baseUrl}}/campaigns/:campaignId/voters/:voterId/ballot",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"campaigns",
																		":campaignId",
																		"voters",
																		":voterId",
																		"ballot"
																	],
																	"variable": [
																		{
																			"key": "campaignId"
																		},
																		{
																			"key": "voterId"
																		}
																	]
																}
															},
															"status": "Method Not Allowed",
															"code": 405,
															"_postman_previewlanguage": "text",
															"header": [],
															"cookie": [],
															"body": ""
														}
													]
												}
											],
											"id": "1e657adf-5def-44b7-aba4-5fa5fd0e97d8"
										}
									],
									"id": "776816fe-d25f-44b4-963c-081bc7a0bb0d"
								}
							],
							"id": "0ef05035-f9e4-45ab-8d0f-dc6ebf940da5"
						},
						{
							"name": "screenings",
							"item": [
								{
									"name": "Add screening",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSON = pm.response.json();\r",
													"\r",
													"\r",
													"// verify the response status code 201(ok).\r",
													" pm.test(\"Verify that the response status code is 200\", function () {\r",
													" pm.response.to.have.status(201);\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"// verify the response body data property.\r",
													" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
													" pm.expect(responseJSON).to.have.property('data');\r",
													"\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Verify the validity of 'id', 'campaign_id', 'status', 'screening_url', results_url,  'created', and 'modified' properties\", function() {\r",
													"    pm.expect(responseJSON.data.id)\r",
													"    pm.expect(responseJSON.data.campaign_id)\r",
													"    pm.expect(responseJSON.data.screening_url)\r",
													"    pm.expect(responseJSON.data.results_url)\r",
													"    pm.expect(responseJSON.data.created)\r",
													"    pm.expect(responseJSON.data.modified)\r",
													"    \r",
													"\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"id": "2562b36f-2ac7-4d41-bda8-5b56823a0f8a"
											}
										}
									],
									"id": "99d8b84f-39b0-4a49-8844-4d854dc1f7b8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiI2MDBjOGExNDg5YTI0ZjcxNDY3NzcwOGQ5NDA3ZThkZTdjZmY1ZmU4NGE4NDk4MmQ4YjdlZTUzZWU1MDNmMGQwYzg2ZjkyNzUxNGZmYThjMCIsImlhdCI6MTY5MDc5NTU5OS42MjExNDQsIm5iZiI6MTY5MDc5NTU5OS42MjExNDcsImV4cCI6MTcyMjQxNzk5OS42MTYwNDgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.HvZ8xj7Gx1q8_NHPQWOX2KNSwgJ3KHLgcqfWvY5JdRCpKj5vBD9TWsHToRYSdIQKikWJSgdBr20Y4RbM3yS0QQqkD3jd13ALJh8p6YEh-gB1uLgPDKzq8BxIbVoe1w0jhp1ZA1IVWmW6ulXqCZGtuTC7n0RGZMmAmN1W1Ysq8R-6Z1Yg67flqzp1_O0ZEVB9C2ajRdFjbTsyTgNrF-qWwgSlnVzfNagyM5cH_C_6fr5AnKsf3x0aYR8xpnedeCDACo0mItTLbtTKcexTSq4XNvwM2pYEJZuztflJy5zKuzJfhwPVSoN8m1uVont1bSTBE9XkHzD-TSJ8rRtvnRyy3w0eo_AysuTaWCmyoDmVdM1rQo8yrMB9bGBzakLitJonpvqvuvG1o4UJX-bZstzVhKBbF7iMf_943ofs8ayGMAwl-JXQQ_Gb30RLgDhGlk-b4eIKd3GOKrJi_gz_c5oFoMXkUgy3w_Y09JWaM5hRaXm6lRthw1gABv9wP_5rU8EtzTrCKwzU8mQw_Ky2kjpUywTTvlh_YQezfg15oODI2-KO63zTeCAvHkosOgLdBCE34O6yoqYk3WadRC8yfY8vW6A1Kb40meH-oFj83v5REJsmbazlHskYxFccNR142ZSjHy71Q4iKEl37fKoIhr1IwuffRVitonUF-X0OmY6G0mo",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"screenings"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										},
										"description": "Submit a new screening request with required question answers."
									},
									"response": [
										{
											"id": "9fd33a08-eb13-455e-9501-839d288c46f8",
											"name": "Screening added",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<uuid>\",\n  \"status\": \"application-denied\",\n  \"screening_url\": \"<string>\",\n  \"results_url\": \"<string>\",\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"screenings"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"status\": \"more-information-needed\",\n    \"screening_url\": \"<string>\",\n    \"results_url\": \"<string>\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
										},
										{
											"id": "9399797c-f27e-4fb8-bbcd-528c723f5aab",
											"name": "Validation error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<uuid>\",\n  \"status\": \"application-denied\",\n  \"screening_url\": \"<string>\",\n  \"results_url\": \"<string>\",\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"screenings"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Method Not Allowed",
											"code": 405,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "View one screening",
									"id": "67ad1afb-b90b-4cbb-8636-47e55bdb41cf",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId",
												"screenings"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "15cec47c-10b0-4148-b8ff-3a22149e957a"
												}
											]
										},
										"description": "View one screening."
									},
									"response": [
										{
											"id": "98ec618a-9a8d-44f6-b75e-a72d3eb6f3a9",
											"name": "A single screening",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"screenings"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"status\": \"more-information-needed\",\n    \"screening_url\": \"<string>\",\n    \"results_url\": \"<string>\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
										},
										{
											"id": "08eb985d-36cd-4c6b-9ad5-4390b5256165",
											"name": "Not found",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/campaigns/:campaignId/screenings",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"campaigns",
														":campaignId",
														"screenings"
													],
													"variable": [
														{
															"key": "campaignId"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "5b2b585c-f05b-45cf-9622-48761dad0b90"
						},
						{
							"name": "Positive - Show a single campaign.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();",
											"",
											"pm.test(\"Response status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response body structure should not be empty\", function () {",
											"    pm.expect(responseJSON.data).not.empty",
											"});",
											"",
											"",
											"pm.test(\"Response body structure is valid\", function () {",
											"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');",
											"});",
											"",
											"",
											"// try each item is not null or empty",
											"try {",
											"    // Check if the \"data\" object exists and is not empty",
											"    if (responseJSON.hasOwnProperty('data') && Object.keys(responseJSON.data).length > 0) {",
											"        // Get the \"data\" object",
											"        const data = responseJSON.data;",
											"",
											"        // Validate each item in the \"data\" object using a foreach loop",
											"        Object.keys(data).forEach(key => {",
											"            const value = data[key];",
											"            if (value !== null && value !== '') {",
											"                pm.test(`\"${key}\" should be a null`, () => {",
											"                    pm.expect(value).not.to.be.null;",
											"                });",
											"                console.log(`Validation passed for \"${key}\" with value \"${value}\"`);",
											"            } else {",
											"                console.error(`Validation failed for \"${key}\". Value is either null or empty.`);",
											"            }",
											"        });",
											"    } else {",
											"        console.error(\"Response data is empty or missing. Validation failed!\");",
											"    }",
											"} catch (err) {",
											"    console.error(\"An error occurred during validation:\", err);",
											"}",
											"",
											"",
											""
										],
										"type": "text/javascript",
										"id": "3e7aa423-fc8d-4468-86d9-06a3684239a0"
									}
								}
							],
							"id": "de1536da-f1c7-423c-a2f0-0ab747a90359",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "campaignId",
											"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/campaigns/:campaignId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"campaigns",
										":campaignId",
										""
									],
									"query": [
										{
											"key": "campaignId",
											"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "campaignId",
											"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
										}
									]
								},
								"description": "Read a single campaign"
							},
							"response": [
								{
									"id": "7a9b8a66-6d2a-4988-b43e-12a71923de39",
									"name": "One campaign",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"logo\": \"<string>\",\n    \"category\": \"PAC\",\n    \"financial_type\": \"mix\",\n    \"credits\": \"<float>\",\n    \"credits_remaining\": \"<float>\",\n    \"bio\": \"<string>\",\n    \"affiliation\": \"other\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<number>\",\n    \"canvass_type\": \"calling\",\n    \"retrieve_ballots\": \"<boolean>\",\n    \"status\": \"pending-approval\",\n    \"map\": \"<string>\",\n    \"start\": \"<date>\",\n    \"end\": \"<date>\",\n    \"user_stats\": {\n      \"call_credits\": \"<float>\",\n      \"home_credits\": \"<float>\",\n      \"ballot_credits\": \"<float>\",\n      \"calls_made\": \"<long>\",\n      \"calls_remaining\": \"<long>\",\n      \"homes_visited\": \"<long>\",\n      \"homes_remaining\": \"<long>\",\n      \"ballots_remaining\": \"<long>\",\n      \"ballots_retrieved\": \"<long>\",\n      \"dollars_earned\": \"<float>\"\n    },\n    \"created\": \"<long>\"\n  }\n}"
								},
								{
									"id": "0623b1a8-2e29-4d49-8de1-6f611a6bb947",
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId"
											],
											"variable": [
												{
													"key": "campaignId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Negaitive - Show a single campaign. Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Not Found\");",
											"});",
											"",
											"pm.test(\"Status code is 404 Not Found\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											""
										],
										"type": "text/javascript",
										"id": "8385fca2-4d05-4a95-85ea-94d02ae2b727"
									}
								}
							],
							"id": "92895a59-f270-46db-9bc2-39ecff2d4ee7",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "campaignId",
											"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/campaigns/:campaignId/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"campaigns",
										":campaignId",
										""
									],
									"query": [
										{
											"key": "campaignId",
											"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "campaignId",
											"value": "78375kjcio#$#Invalid data"
										}
									]
								},
								"description": "Read a single campaign"
							},
							"response": [
								{
									"id": "c8db5e0b-4725-4c06-bfe5-a1db6aa52a7e",
									"name": "One campaign",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId"
											],
											"variable": [
												{
													"key": "campaignId",
													"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"logo\": \"<string>\",\n    \"category\": \"PAC\",\n    \"financial_type\": \"mix\",\n    \"credits\": \"<float>\",\n    \"credits_remaining\": \"<float>\",\n    \"bio\": \"<string>\",\n    \"affiliation\": \"other\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<number>\",\n    \"canvass_type\": \"calling\",\n    \"retrieve_ballots\": \"<boolean>\",\n    \"status\": \"pending-approval\",\n    \"map\": \"<string>\",\n    \"start\": \"<date>\",\n    \"end\": \"<date>\",\n    \"user_stats\": {\n      \"call_credits\": \"<float>\",\n      \"home_credits\": \"<float>\",\n      \"ballot_credits\": \"<float>\",\n      \"calls_made\": \"<long>\",\n      \"calls_remaining\": \"<long>\",\n      \"homes_visited\": \"<long>\",\n      \"homes_remaining\": \"<long>\",\n      \"ballots_remaining\": \"<long>\",\n      \"ballots_retrieved\": \"<long>\",\n      \"dollars_earned\": \"<float>\"\n    },\n    \"created\": \"<long>\"\n  }\n}"
								},
								{
									"id": "d9b671a0-f991-4aef-a45b-ac0073c5033b",
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/campaigns/:campaignId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"campaigns",
												":campaignId"
											],
											"variable": [
												{
													"key": "campaignId"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "52819b3a-bb06-4a18-9a2b-4112e781147a"
				},
				{
					"name": "Positive - List all campaigns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body structure should not be empty\", function () {\r",
									"    pm.expect(responseJSON.data).not.empty\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"\r",
									"// Verify the data format  in the response\r",
									"pm.test(\"Check Data object structure is valid\", () => {\r",
									"    for (i=0; i < responseJSON.data.length; i++){\r",
									"        pm.expect(responseJSON.data[i]).not.be.empty\r",
									"        pm.expect(responseJSON.data[i].id).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].name).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].position).to.a('String') // data is coming as null\r",
									"        pm.expect(responseJSON.data[i].logo).to.be.a('String')  // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].category).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].financial_type).to.be.a('String').and.to.be.oneOf(['paid','volunteer','mix']);\r",
									"        pm.expect(responseJSON.data[i].canvass_type).to.be.a('String').and.to.be.oneOf([\"calling\",\"walking\",\"both\"]); // For few campaings, its coming as 'both' and this is not there in schema ( walkingand calling is there)\r",
									"        pm.expect(responseJSON.data[i].retrieve_ballots).to.be.a('boolean')\r",
									"        pm.expect(responseJSON.data[i].status).to.be.a('String') // Data is coming as null\r",
									"        pm.expect(responseJSON.data[i].map).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.type).to.be.an('String')\r",
									"        pm.expect(responseJSON.data[i].map.properties).to.be.an('array')  // Data is coming as null\r",
									"        pm.expect(responseJSON.data[i].map.geometry).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.coordinates).to.be.an('array')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.type).to.be.an('String')\r",
									"        pm.expect(responseJSON.data[i].bio).to.be.an('String')     // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].affiliation).to.be.a('String').and.to.be.oneOf([\"democrat\",\"republican\",\"independent\",\"other\"]);    // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].city).to.be.a('String')    // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].state).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].zipcode).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits)).to.be.a('number')\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits_remaining)).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].start).to.be.a('number').that.has.to.be.greaterThan(0)    //to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/)\r",
									"        pm.expect(responseJSON.data[i].end).to.be.a('number').that.has.to.be.greaterThan(0)      //to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/)\r",
									"        pm.expect(responseJSON.data[i].created).to.be.a('number').that.has.to.be.greaterThan(0)\r",
									"        pm.expect(responseJSON.data[i].user_stats).to.be.a('object')\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check User_Stats format and structure is valid\", () => {\r",
									"    for (i=0; i < responseJSON.data.length; i++){\r",
									"        pm.expect(responseJSON.data[i].user_stats.call_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.home_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballot_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.calls_made).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.calls_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.homes_visited).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.homes_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballots_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballots_retrieved).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.dollars_earned).to.be.a('number')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "2f508312-0012-4c93-a66a-5c54407bb6eb"
							}
						}
					],
					"id": "18b85cc2-5e27-4054-af5b-18d6c81f0cf4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/campaigns",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"campaigns"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaign_id]",
									"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a",
									"disabled": true
								},
								{
									"key": "filter[location]",
									"value": "32.85299203584159,-98.71057783963626,100",
									"description": "Latitude, longitude, and radius seperated by a comma.",
									"disabled": true
								},
								{
									"key": "filter[financial_type]",
									"value": "mix",
									"description": "Type of paying",
									"disabled": true
								},
								{
									"key": "filter[canvass_type]",
									"value": "walking,both,calling",
									"description": "Type of canvassing",
									"disabled": true
								},
								{
									"key": "filter[status]",
									"value": "pending",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "location",
									"description": "Sorting options",
									"disabled": true
								},
								{
									"key": "sort_order",
									"value": "descending",
									"disabled": true
								}
							]
						},
						"description": "List all the possible campaigns for which the user can canvass and the possible dollar value of canvassing that campaign. Filtered and sortable by campaign, location, radius, type, and status."
					},
					"response": [
						{
							"id": "ce5d4f86-4e5a-4e27-81c9-0270c8a935db",
							"name": "List of campaigns",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/campaigns?page[number]=1&page[size]=100&filter[campaign_id]=<uuid>&filter[location]=<string>&filter[financial_type]=volunteer&filter[canvass_type]=walking&filter[status]=pending&sort=location&sort_order=descending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"campaigns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaign_id]",
											"value": "<uuid>"
										},
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "Latitude, longitude, and radius seperated by a comma."
										},
										{
											"key": "filter[financial_type]",
											"value": "volunteer",
											"description": "Type of paying"
										},
										{
											"key": "filter[canvass_type]",
											"value": "walking",
											"description": "Type of canvassing"
										},
										{
											"key": "filter[status]",
											"value": "pending"
										},
										{
											"key": "sort",
											"value": "location",
											"description": "Sorting options"
										},
										{
											"key": "sort_order",
											"value": "descending"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"PAC\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"calling\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"more-information-needed\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"Advocacy\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"walking\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"application-denied\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative - List all campaigns Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body structure should not be empty\", function () {\r",
									"    pm.expect(responseJSON.data).not.empty\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');\r",
									"});\r",
									"\r",
									"\r",
									"// Verify the data format  in the response\r",
									"pm.test(\"Check Data object structure is valid\", () => {\r",
									"    for (i=0; i < responseJSON.data.length; i++){\r",
									"        pm.expect(responseJSON.data[i]).not.be.empty\r",
									"        pm.expect(responseJSON.data[i].id).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].name).to.be.a('String')\r",
									"        //pm.expect(responseJSON.data[i].position).to.a('String') // data is coming as null\r",
									"        //pm.expect(responseJSON.data[i].logo).to.be.a('String')  // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].category).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].financial_type).to.be.a('String').and.to.be.oneOf(['paid','volunteer','mix']);\r",
									"        //pm.expect(responseJSON.data[i].canvass_type).to.be.a('String').and.to.be.oneOf([\"calling\",\"walking\",\"calling-and-walking\"]); // For few campaings, its coming as 'both' and this is not there in schema\r",
									"        pm.expect(responseJSON.data[i].retrieve_ballots).to.be.a('boolean')\r",
									"        //pm.expect(responseJSON.data[i].status).to.be.a('String') // Data is coming as null\r",
									"        pm.expect(responseJSON.data[i].map).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.type).to.be.an('String')\r",
									"        //pm.expect(responseJSON.data[i].map.properties).to.be.an('array')  // Data is coming as null\r",
									"        pm.expect(responseJSON.data[i].map.geometry).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.coordinates).to.be.an('array')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.type).to.be.an('String')\r",
									"        // pm.expect(responseJSON.data[i].bio).to.be.an('String')     // in some of the array, this data is coming null hence commented\r",
									"        // pm.expect(responseJSON.data[i].affiliation).to.be.a('String').and.to.be.oneOf([\"democrat\",\"republican\",\"independent\",\"other\"]);    // in some of the array, this data is coming null hence commented\r",
									"        // pm.expect(responseJSON.data[i].city).to.be.a('String')    // in some of the array, this data is coming null hence commented\r",
									"        // pm.expect(responseJSON.data[i].state).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        // pm.expect(responseJSON.data[i].zipcode).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits)).to.be.a('number')\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits_remaining)).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].start).to.be.a('number').that.has.to.be.greaterThan(0)    //to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/)\r",
									"        pm.expect(responseJSON.data[i].end).to.be.a('number').that.has.to.be.greaterThan(0)      //to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{6}Z$/)\r",
									"        pm.expect(responseJSON.data[i].created).to.be.a('number').that.has.to.be.greaterThan(0)\r",
									"        pm.expect(responseJSON.data[i].user_stats).to.be.a('object')\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check User_Stats format and structure is valid\", () => {\r",
									"    for (i=0; i < responseJSON.data.length; i++){\r",
									"        pm.expect(responseJSON.data[i].user_stats.call_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.home_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballot_credits).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.calls_made).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.calls_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.homes_visited).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.homes_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballots_remaining).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.ballots_retrieved).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].user_stats.dollars_earned).to.be.a('number')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript",
								"id": "1268512a-b697-4d02-99f9-cae0fbf139ef"
							}
						}
					],
					"id": "b04e7140-5682-4a7a-b392-6e820c2efc0c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/campaigns?filter[campaign_id]=3783aba2-ea00-411c-ba1e-5ba82115ce1a",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"campaigns"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaign_id]",
									"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
								},
								{
									"key": "filter[location]",
									"value": "32.85299203584159,-98.71057783963626,100",
									"description": "Latitude, longitude, and radius seperated by a comma.",
									"disabled": true
								},
								{
									"key": "filter[financial_type]",
									"value": "#$%#DSFED23443",
									"description": "Type of paying",
									"disabled": true
								},
								{
									"key": "filter[canvass_type]",
									"value": "33trgr^%&%",
									"description": "Type of canvassing",
									"disabled": true
								},
								{
									"key": "filter[status]",
									"value": "@#4r3d43",
									"disabled": true
								},
								{
									"key": "sort",
									"value": "location",
									"description": "Sorting options",
									"disabled": true
								},
								{
									"key": "sort_order",
									"value": "descending",
									"disabled": true
								}
							]
						},
						"description": "List all the possible campaigns for which the user can canvass and the possible dollar value of canvassing that campaign. Filtered and sortable by campaign, location, radius, type, and status."
					},
					"response": [
						{
							"id": "b36dd3a5-fc70-4c46-b3a3-1fe78f9803e0",
							"name": "List of campaigns",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/campaigns?page[number]=1&page[size]=100&filter[campaign_id]=<uuid>&filter[location]=<string>&filter[financial_type]=volunteer&filter[canvass_type]=walking&filter[status]=pending&sort=location&sort_order=descending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"campaigns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaign_id]",
											"value": "<uuid>"
										},
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "Latitude, longitude, and radius seperated by a comma."
										},
										{
											"key": "filter[financial_type]",
											"value": "volunteer",
											"description": "Type of paying"
										},
										{
											"key": "filter[canvass_type]",
											"value": "walking",
											"description": "Type of canvassing"
										},
										{
											"key": "filter[status]",
											"value": "pending"
										},
										{
											"key": "sort",
											"value": "location",
											"description": "Sorting options"
										},
										{
											"key": "sort_order",
											"value": "descending"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"PAC\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"calling\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"more-information-needed\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"Advocacy\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"walking\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"application-denied\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "c444a7b1-59ec-4336-9a8d-65d9d66685e4"
		},
		{
			"name": "contacts",
			"item": [
				{
					"name": "Positive - List nearby contacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"\r",
									"// verify the response status code 200(ok).\r",
									" pm.test(\"Verify that the response status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"// verify the response body data is Object.\r",
									" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									" pm.expect(responseJSON).to.be.an('Object');\r",
									"});\r",
									"\r",
									"// verify the response body data property.\r",
									" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									" pm.expect(responseJSON).to.have.property('data');\r",
									" pm.expect(responseJSON.data[0].voter).to.have.property('data');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"//verify that the data property is not an empty array.\r",
									" pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
									" var DataCheck = pm.response.json().data;\r",
									" pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"// Verify the data array values has all the properties\r",
									"pm.test(\"Verify the of data array values has all the properties\", function() {\r",
									"    var jsonData = pm.response.json()\r",
									"    pm.expect(jsonData.data).not.empty\r",
									"    for (i=0; i < jsonData.data.length ; i++){\r",
									"        pm.expect(jsonData.data[i]).to.have.property('id').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('phone').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('street').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('city').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('state').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('zipcode').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('timezone').to.be.a('String')\r",
									"        pm.expect(jsonData.data[i]).to.have.property('voter').to.be.a('Object')\r",
									"    }   \r",
									"});\r",
									"\r",
									"//Verify that data -> voter array is not null\r",
									"pm.test(\"Verify the validity of data->Voter array values are in proper format and it should not be null\", function() {\r",
									"    var jsonData = pm.response.json()\r",
									"    var first_data_array_length = jsonData.data.length\r",
									"    var voter_Length = jsonData.data[0].voter.data.length\r",
									"    try{\r",
									"        pm.expect(jsonData.data[0].voter.data[0].id).to.be.a('String')\r",
									"        for (j=0; j < first_data_array_length ; j++){\r",
									"            for (i=0; i < voter_Length ; i++){\r",
									"                pm.expect(jsonData.data[j].voter.data[i].id).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].email).to.include('@').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].first_name).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].last_name).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(parseInt(jsonData.data[j].voter.data[i].phone)).to.be.a('number').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].street).to.be.a('String') // Data is coming as null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].city).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].state).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].zipcode).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].timezone).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].age).to.be.a('String').that.has.not.be.null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].sex).to.be.a('String').that.has.not.be.null // Dats is coming null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].affiliation).to.be.a('String').that.has.not.be.null // Dats is coming null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].affiliation_other).to.be.a('String').that.has.not.be.null // Dats is coming null\r",
									"                pm.expect(jsonData.data[j].voter.data[i].voted_last_election).to.be.a('String').that.has.not.be.null // Dats is coming null\r",
									"            } \r",
									"        }\r",
									"    } catch (err) {\r",
									"        console.error(`test failed:`, err);\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check meta array formats are valid\", () => {\r",
									"    try{\r",
									"        pm.expect(responseJSON.meta.pagination.links).to.be.a('object').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.total).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.count).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.per_page).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.current_page).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.total_pages).to.be.a('number').and.not.empty\r",
									"    } catch (err) {\r",
									"        console.error(\"One or more fields are empty. Please check !!\", err)\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "6e61d6ce-cbbd-4f79-9ea6-0d8fe501441d"
							}
						}
					],
					"id": "483b8b8f-fe39-42df-97ea-88e93109b570",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "filter[location]",
									"value": "32.85299203584159,-98.71057783963626,100",
									"description": "(Required) Latitude, longitude, and radius seperated by a comma.",
									"disabled": true
								}
							]
						},
						"description": "List all contacts (each of which can include multiple voters) within a given radius from the user's location."
					},
					"response": [
						{
							"id": "ce17b4f1-b601-4fdf-9c79-84078bf74995",
							"name": "List of campaign contacts",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contacts?filter[location]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "(Required) Latitude, longitude, and radius seperated by a comma."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" ﻿    (929664-3931\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"\\u000b\\f 1  -(293964\\f9209\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"independent\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \" ᠎    \\f1  -(3113768003\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" 1 \\r\\u000b 435)8002120\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"other\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"᠎(822)186 0657\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"female\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \"\\n-(422 8434687\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						},
						{
							"id": "8a3608be-7680-4610-a5d8-6a4505eed213",
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contacts?filter[location]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "(Required) Latitude, longitude, and radius seperated by a comma."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "Negaitive - List nearby contacts Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500 error\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "9c291d2d-841e-4f91-82ab-788c7126bb07"
							}
						}
					],
					"id": "784b8740-db27-4219-976e-14018e52599f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/contacts?filter[location]=dkjdncjks",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"contacts"
							],
							"query": [
								{
									"key": "filter[location]",
									"value": "dkjdncjks",
									"description": "(Required) Latitude, longitude, and radius seperated by a comma."
								}
							]
						},
						"description": "List all contacts (each of which can include multiple voters) within a given radius from the user's location."
					},
					"response": [
						{
							"id": "981bd20f-739c-4fbb-a48c-d6fb258de09d",
							"name": "List of campaign contacts",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contacts?filter[location]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "(Required) Latitude, longitude, and radius seperated by a comma."
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" ﻿    (929664-3931\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"\\u000b\\f 1  -(293964\\f9209\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"independent\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \" ᠎    \\f1  -(3113768003\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"voters\": {\n        \"data\": [\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \" 1 \\r\\u000b 435)8002120\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"male\",\n            \"affiliation\": \"other\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          },\n          {\n            \"id\": \"<uuid>\",\n            \"email\": \"<email>\",\n            \"first_name\": \"<string>\",\n            \"last_name\": \"<string>\",\n            \"phone\": \"᠎(822)186 0657\",\n            \"street\": \"<string>\",\n            \"city\": \"<string>\",\n            \"state\": \"<string>\",\n            \"zipcode\": \"<string>\",\n            \"timezone\": \"<string>\",\n            \"age\": \"<number>\",\n            \"sex\": \"female\",\n            \"affiliation\": \"republican\",\n            \"affiliation_other\": \"<string>\",\n            \"voted_last_election\": \"<boolean>\"\n          }\n        ]\n      },\n      \"phone\": \"\\n-(422 8434687\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						},
						{
							"id": "d4f018d0-b494-428e-98f7-57e6c050d5cc",
							"name": "Not found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/contacts?filter[location]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"contacts"
									],
									"query": [
										{
											"key": "filter[location]",
											"value": "<string>",
											"description": "(Required) Latitude, longitude, and radius seperated by a comma."
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				}
			],
			"id": "e83f73b6-a9de-4782-9a33-1ce305da82b7"
		},
		{
			"name": "my-campaigns",
			"item": [
				{
					"name": "Positive - List user's campaigns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ccb2093-87ff-4d72-80a7-0078e451b854",
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body structure should not be empty\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data').not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response body structure is valid\", function () {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data').not.be.empty;\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data');\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('meta');\r",
									"    pm.expect(responseJSON.meta).to.be.an('object').that.has.property('pagination');\r",
									"});\r",
									"\r",
									"\r",
									"// Verify the data format  in the response\r",
									"pm.test(\"Check Data array formats are valid\", () => {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('data').not.be.empty;\r",
									"    for (i=0; i < responseJSON.data.length; i++){\r",
									"        pm.expect(responseJSON.data[i]).not.be.null\r",
									"        pm.expect(responseJSON.data[i].id).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].name).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].position).to.be.a('String')  //data is coming null\r",
									"        pm.expect(responseJSON.data[i].logo).to.be.a('String').that.has.not.to.be.null  // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].category).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].financial_type).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].canvass_type).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].retrieve_ballots).to.be.a('boolean')\r",
									"        pm.expect(responseJSON.data[i].status).to.be.a('String')\r",
									"        pm.expect(responseJSON.data[i].user_stats).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map).to.be.an('function')  // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].map.type).to.be.an('String')\r",
									"        pm.expect(responseJSON.data[i].map.properties).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.geometry).to.be.an('object')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.coordinates).to.be.an('array')\r",
									"        pm.expect(responseJSON.data[i].map.geometry.type).to.be.an('String')\r",
									"        pm.expect(responseJSON.data[i].bio).to.be.an('String')     // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].affiliation).to.be.a('String')    // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].city).to.be.a('String')    // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].state).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(responseJSON.data[i].zipcode).to.be.a('String')   // in some of the array, this data is coming null hence commented\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits)).to.be.a('number')\r",
									"        pm.expect(parseFloat(responseJSON.data[i].credits_remaining)).to.be.a('number')\r",
									"        pm.expect(responseJSON.data[i].start).to.be.a('number').and.has.to.be.greaterThan(0)\r",
									"        pm.expect(responseJSON.data[i].end).to.be.a('number').and.has.to.be.greaterThan(0)\r",
									"        pm.expect(responseJSON.data[i].created).to.be.a('number').that.has.to.be.greaterThan(0)\r",
									"        \r",
									"    }\r",
									"});\r",
									"\r",
									"// Verify the meta format  in the response\r",
									"pm.test(\"Check meta array formats are valid\", () => {\r",
									"    pm.expect(responseJSON).to.be.an('object').that.has.property('meta').not.be.empty;\r",
									"    pm.expect(responseJSON.meta.pagination.total).to.be.a('number')\r",
									"    pm.expect(responseJSON.meta.pagination.count).to.be.a('number')\r",
									"    pm.expect(responseJSON.meta.pagination.per_page).to.be.a('number')\r",
									"    pm.expect(responseJSON.meta.pagination.current_page).to.be.a('number')\r",
									"    pm.expect(responseJSON.meta.pagination.total_pages).to.be.a('number')\r",
									"    pm.expect(responseJSON.meta.pagination.links).to.be.a('object')\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "3c6aaba5-c812-44dd-933b-d6627a97782c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/my-campaigns?page[number]=1&page[size]=20&filter[campaignId]=3783aba2-ea00-411c-ba1e-5ba82115ce1a&filter[status]=pending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-campaigns"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "page[size]",
									"value": "20",
									"description": "Items per page"
								},
								{
									"key": "filter[campaignId]",
									"value": "3783aba2-ea00-411c-ba1e-5ba82115ce1a"
								},
								{
									"key": "filter[status]",
									"value": "pending"
								}
							]
						},
						"description": "List the campaigns selected by the user. Includes information on campaign type, status, map, and credits."
					},
					"response": [
						{
							"id": "892264d3-d3fa-41b1-bb9d-67c3dafa7246",
							"name": "A list of user's campaigns",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-campaigns",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-campaigns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page",
											"disabled": true
										},
										{
											"key": "filter[campaignId]",
											"value": "<uuid>",
											"disabled": true
										},
										{
											"key": "filter[status]",
											"value": "pending",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"PAC\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"calling\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"more-information-needed\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"Advocacy\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"walking\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"application-denied\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative - List user's campaigns",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "80a12bcc-875f-437c-bb2c-121d0269adcb"
							}
						}
					],
					"id": "bc2a334e-09d4-4098-8aca-b9fe0deb21f9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/my-campaigns",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-campaigns"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "%23",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "$",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaignId]",
									"value": "invailddata",
									"disabled": true
								},
								{
									"key": "filter[status]",
									"value": "invaliddata",
									"disabled": true
								}
							]
						},
						"description": "List the campaigns selected by the user. Includes information on campaign type, status, map, and credits."
					},
					"response": [
						{
							"id": "556b8ffd-a815-45fe-929a-755f1ccce2ac",
							"name": "A list of user's campaigns",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-campaigns",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-campaigns"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number",
											"disabled": true
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page",
											"disabled": true
										},
										{
											"key": "filter[campaignId]",
											"value": "<uuid>",
											"disabled": true
										},
										{
											"key": "filter[status]",
											"value": "pending",
											"disabled": true
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"PAC\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"calling\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"more-information-needed\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"logo\": \"<string>\",\n      \"category\": \"Advocacy\",\n      \"financial_type\": \"mix\",\n      \"credits\": \"<float>\",\n      \"credits_remaining\": \"<float>\",\n      \"bio\": \"<string>\",\n      \"affiliation\": \"republican\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<number>\",\n      \"canvass_type\": \"walking\",\n      \"retrieve_ballots\": \"<boolean>\",\n      \"status\": \"application-denied\",\n      \"map\": \"<string>\",\n      \"start\": \"<date>\",\n      \"end\": \"<date>\",\n      \"user_stats\": {\n        \"call_credits\": \"<float>\",\n        \"home_credits\": \"<float>\",\n        \"ballot_credits\": \"<float>\",\n        \"calls_made\": \"<long>\",\n        \"calls_remaining\": \"<long>\",\n        \"homes_visited\": \"<long>\",\n        \"homes_remaining\": \"<long>\",\n        \"ballots_remaining\": \"<long>\",\n        \"ballots_retrieved\": \"<long>\",\n        \"dollars_earned\": \"<float>\"\n      },\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "11437697-e90a-425a-a537-eb684d43c7c4"
		},
		{
			"name": "my-contacts",
			"item": [
				{
					"name": "{sharedContactId}",
					"item": [
						{
							"name": "Fetch one contact",
							"id": "b9704567-e3dd-4f06-ab82-4fc392a37113",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts",
										":sharedContactId"
									],
									"variable": [
										{
											"key": "sharedContactId",
											"value": "<uuid>"
										}
									]
								},
								"description": "Fetch one contact from the shared user contact list."
							},
							"response": [
								{
									"id": "23c772f1-905c-4131-860c-7b2715022eae",
									"name": "A single shared user contact",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"my-contacts",
												":sharedContactId"
											],
											"variable": [
												{
													"key": "sharedContactId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"phone\": \"946)955 0501\",\n    \"street\": \"<string>\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
								},
								{
									"id": "39552350-f1eb-4f93-8d7a-3765781d1971",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"my-contacts",
												":sharedContactId"
											],
											"variable": [
												{
													"key": "sharedContactId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a shared user contact",
							"id": "ba00d51c-bbce-4a68-81c3-7780563dfa55",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone\": \"\\n      (708) 367.2660\",\n  \"street\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts",
										":sharedContactId"
									],
									"variable": [
										{
											"key": "sharedContactId",
											"value": "<uuid>"
										}
									]
								},
								"description": "Update one contact in the shared user contact list."
							},
							"response": [
								{
									"id": "85ae5968-0843-48e1-b6a0-dcceba403bdf",
									"name": "The updated shared user contact",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone\": \"\\n      (708) 367.2660\",\n  \"street\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"my-contacts",
												":sharedContactId"
											],
											"variable": [
												{
													"key": "sharedContactId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"email\": \"<email>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"phone\": \"946)955 0501\",\n    \"street\": \"<string>\",\n    \"city\": \"<string>\",\n    \"state\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"timezone\": \"\",\n    \"created\": \"<long>\",\n    \"modified\": \"<long>\"\n  }\n}"
								},
								{
									"id": "ad3136ff-4b2a-4e00-811b-84c5a9c82917",
									"name": "Validation exception. Malformed request body.",
									"originalRequest": {
										"method": "PATCH",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<uuid>\",\n  \"email\": \"<email>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"phone\": \"\\n      (708) 367.2660\",\n  \"street\": \"<string>\",\n  \"city\": \"<string>\",\n  \"state\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"timezone\": \"\",\n  \"created\": \"<long>\",\n  \"modified\": \"<long>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"my-contacts",
												":sharedContactId"
											],
											"variable": [
												{
													"key": "sharedContactId"
												}
											]
										}
									},
									"status": "Not Acceptable",
									"code": 406,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a shared user contact",
							"id": "65fdbcd1-7076-4091-81f2-4fa348ec03eb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts",
										":sharedContactId"
									],
									"variable": [
										{
											"key": "sharedContactId",
											"value": "<uuid>"
										}
									]
								},
								"description": "Delete one contact from the shared user contact list."
							},
							"response": [
								{
									"id": "6683f898-c0da-49d2-b786-fb7aeb5e42aa",
									"name": "Contact deleted",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/my-contacts/:sharedContactId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"my-contacts",
												":sharedContactId"
											],
											"variable": [
												{
													"key": "sharedContactId"
												}
											]
										}
									},
									"status": "No Content",
									"code": 204,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "a1a0e1cd-8661-438e-81fa-151c7de4a174"
				},
				{
					"name": "Share user contacts",
					"id": "f6945cc1-96d3-4a56-b9b6-5de5bb4f94ae",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"-(178785 1318\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"    \\r (1261907660\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/my-contacts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-contacts"
							]
						},
						"description": "Share the user's contact list to connect the user with people that he or she already knows for canvassing."
					},
					"response": [
						{
							"id": "7492c2c0-d597-4991-87fa-76c3a52ac4b6",
							"name": "User contacts shared. Because contacts are created asynchronously they will not be returned in this request.",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"-(178785 1318\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"    \\r (1261907660\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/my-contacts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts"
									]
								}
							},
							"status": "Accepted",
							"code": 202,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						},
						{
							"id": "4cd91295-4b78-4daf-86ac-9dced3396735",
							"name": "Invalid entry",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"-(178785 1318\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"    \\r (1261907660\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/my-contacts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts"
									]
								}
							},
							"status": "Not Acceptable",
							"code": 406,
							"_postman_previewlanguage": "text",
							"header": [],
							"cookie": [],
							"body": ""
						}
					]
				},
				{
					"name": "List shared user contacts",
					"id": "7d36a7c9-4601-451c-945d-b127a2cb29e6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/my-contacts?page[number]=1&page[size]=100&filter[sharedContactId]=<uuid>&sort=sharedContactId&sort_order=descending",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"my-contacts"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number"
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page"
								},
								{
									"key": "filter[sharedContactId]",
									"value": "<uuid>",
									"description": "Shared user contact ID"
								},
								{
									"key": "sort",
									"value": "sharedContactId",
									"description": "Sorting options"
								},
								{
									"key": "sort_order",
									"value": "descending"
								}
							]
						},
						"description": "List the contacts shared from the user's contact list. Filtered and sortable by shared contact ID."
					},
					"response": [
						{
							"id": "ab175252-11d4-4b3d-9784-437186c1f31d",
							"name": "A list of shared user contacts",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/my-contacts?page[number]=1&page[size]=100&filter[sharedContactId]=<uuid>&sort=sharedContactId&sort_order=descending",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"my-contacts"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[sharedContactId]",
											"value": "<uuid>",
											"description": "Shared user contact ID"
										},
										{
											"key": "sort",
											"value": "sharedContactId",
											"description": "Sorting options"
										},
										{
											"key": "sort_order",
											"value": "descending"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"  \\f   (327)300\\f1458\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"email\": \"<email>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"phone\": \"    -(422945 5069\",\n      \"street\": \"<string>\",\n      \"city\": \"<string>\",\n      \"state\": \"<string>\",\n      \"zipcode\": \"<string>\",\n      \"timezone\": \"\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "7d80e29e-2348-4d26-b15d-49b21a1427c1"
		},
		{
			"name": "coalitions",
			"item": [
				{
					"name": "{coalitionId}",
					"item": [
						{
							"name": "join",
							"item": [
								{
									"name": "Positive - RPC call to join a coalition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful coalition join\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'coalitionId' parameter is not null\", function () {\r",
													"    const coalitionId = pm.variables.get(\"coalitionId\");\r",
													"    pm.expect(coalitionId, \"coalitionId is null\").to.not.be.null;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains 'Coalition unjoined'\", function () {\r",
													"    pm.expect(pm.response.text())\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 2: Validate 'coalitionId' parameter is not null\", function () {\r",
													"    const coalitionId = pm.variables.get(\"coalitionId\");\r",
													"    pm.expect(coalitionId, \"coalitionId is null\").to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 3: Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 4: Response body contains 'Coalition joined'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Coalition joined\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "671fccd5-62bf-439b-8048-63191c44d840"
											}
										}
									],
									"id": "b0d43648-21a8-47cb-9994-7895c71e9c8e",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId",
												"join"
											],
											"variable": [
												{
													"key": "coalitionId",
													"value": "15cec47c-10b0-4148-b8ff-3a22149e957a"
												}
											]
										},
										"description": "The voter being canvassed agrees to join a coalition, advocacy group, or other association."
									},
									"response": [
										{
											"id": "ef4dade9-b7f8-4e07-a180-da5b6e0018d2",
											"name": "Coalition joined",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"join"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "3b83cfeb-b772-4639-b615-a433fc93d251",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"join"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - RPC call to join a coalition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1. Invalid or non-existent endpoint\r",
													"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
													"    pm.response.to.have.status(404); \r",
													"});\r",
													"\r",
													"// 2. Unauthorized access\r",
													"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"// 3. Server errors\r",
													"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
													"    pm.response.to.have.status(500); \r",
													"});\r",
													"\r",
													"// 4. Invalid query parameters\r",
													"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// 5. Testing caching mechanisms\r",
													"pm.test(\"Test Case 5: Caching Test\", function () {\r",
													"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
													"});\r",
													"\r",
													"// 6. Timeouts\r",
													"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "fa8bac6a-bf5d-4188-9173-dd098b205968"
											}
										}
									],
									"id": "4ca396f4-0b29-4e39-8dff-0b3256fae1fe",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId",
												"join"
											],
											"variable": [
												{
													"key": "coalitionId",
													"value": "15cec47c-10b0-4148-b8ff-3a22149e957a"
												}
											]
										},
										"description": "The voter being canvassed agrees to join a coalition, advocacy group, or other association."
									},
									"response": [
										{
											"id": "b1090a9d-c020-4857-8718-a8d00d57db6f",
											"name": "Coalition joined",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"join"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "e4fb87bc-25eb-47f3-b992-2649a7bb3e41",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/join",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"join"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "15500958-a2ce-4d9d-bcb3-0e22dd18008b"
						},
						{
							"name": "unjoin",
							"item": [
								{
									"name": "Positive -RPC call to unjoin a coalition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful coalition join\", function () {\r",
													"    pm.response.to.have.status(202);\r",
													"});\r",
													"\r",
													"pm.test(\"Validate 'coalitionId' parameter is not null\", function () {\r",
													"    const coalitionId = pm.variables.get(\"coalitionId\");\r",
													"    pm.expect(coalitionId, \"coalitionId is null\").to.not.be.null;\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains 'Coalition unjoined'\", function () {\r",
													"    pm.expect(pm.response.text())\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 2: Validate 'coalitionId' parameter is not null\", function () {\r",
													"    const coalitionId = pm.variables.get(\"coalitionId\");\r",
													"    pm.expect(coalitionId, \"coalitionId is null\").to.not.be.null;\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 3: Response body is not empty\", function () {\r",
													"    pm.response.to.not.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"Test Case 4: Response body contains 'Coalition joined'\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Coalition unjoined\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "ac382f2f-b616-47b6-9cb2-b767bca29b9f"
											}
										}
									],
									"id": "ee1539f6-3749-472d-9df1-27a821abf84a",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId",
												"unjoin"
											],
											"variable": [
												{
													"key": "coalitionId",
													"value": "15cec47c-10b0-4148-b8ff-3a22149e957a"
												}
											]
										},
										"description": "The voter being canvassed chooses to unjoin a coalition, advocacy group, or other association."
									},
									"response": [
										{
											"id": "5bfa4f6c-4ccc-4639-8d48-d1429f3bf900",
											"name": "Coalition unjoined",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"unjoin"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "24d0bddd-685a-452a-a7ea-b67338d6cf87",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"unjoin"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - RPC call to unjoin a coalition",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// 1. Invalid or non-existent endpoint\r",
													"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
													"    pm.response.to.have.status(404); \r",
													"});\r",
													"\r",
													"// 2. Unauthorized access\r",
													"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
													"    pm.response.to.have.status(401); \r",
													"});\r",
													"\r",
													"// 3. Server errors\r",
													"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
													"    pm.response.to.have.status(500); \r",
													"});\r",
													"\r",
													"// 4. Invalid query parameters\r",
													"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"// 5. Testing caching mechanisms\r",
													"pm.test(\"Test Case 5: Caching Test\", function () {\r",
													"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
													"});\r",
													"\r",
													"// 6. Timeouts\r",
													"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "07130a44-6390-4506-9864-c1cdc7b397bb"
											}
										}
									],
									"id": "d8b1c9dc-aa3e-4f10-a88a-53fa0a1abedd",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId",
												"unjoin"
											],
											"variable": [
												{
													"key": "coalitionId",
													"value": "15cec47c-10b0-4148-b8ff-3a22149e957a"
												}
											]
										},
										"description": "The voter being canvassed chooses to unjoin a coalition, advocacy group, or other association."
									},
									"response": [
										{
											"id": "5b69aecc-e073-4885-8447-b8b0592de7fd",
											"name": "Coalition unjoined",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"unjoin"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"id": "d1b261cb-e4fa-47bf-b458-5217ca07cb32",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/coalitions/:coalitionId/unjoin",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"coalitions",
														":coalitionId",
														"unjoin"
													],
													"variable": [
														{
															"key": "coalitionId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "62fc9e2b-22d8-424e-b8db-6cbdcf30adc0"
						},
						{
							"name": "Positive-Display one coalition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Positive Test Cases\r",
											"\r",
											"// Test 1: Check Existence\r",
											"// This test checks if the required properties 'data', 'id', 'campaignId', and 'name' exist in the jsonData object.\r",
											"const jsonData = {\r",
											"    \"data\": {\r",
											"        \"id\": \"15cec47c-10b0-4148-b8ff-3a22149e957a\",\r",
											"        \"campaignId\": \"09173c23-7665-4e60-8b3c-9b50bd1e4345\",\r",
											"        \"name\": \"Faith and Flag Conservatives\"\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.test(\"Test 1: Data exists\", function () {\r",
											"    pm.expect(jsonData).to.have.property(\"data\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"id\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"campaignId\");\r",
											"    pm.expect(jsonData.data).to.have.property(\"name\");\r",
											"});\r",
											"\r",
											"// Test 2: Check Data Types - id should be a string\r",
											"pm.test(\"Test 2: Data types - id should be a string\", function () {\r",
											"    pm.expect(jsonData.data.id).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test 3: Check Data Types - campaignId should be a string\r",
											"pm.test(\"Test 3: Data types - campaignId should be a string\", function () {\r",
											"    pm.expect(jsonData.data.campaignId).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test 4: Check Data Types - name should be a string\r",
											"pm.test(\"Test 4: Data types - name should be a string\", function () {\r",
											"    pm.expect(jsonData.data.name).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test 5: Check Null/Not Null - id should not be null\r",
											"pm.test(\"Test 5: id should not be null\", function () {\r",
											"    pm.expect(jsonData.data.id).to.not.be.null;\r",
											"});\r",
											"\r",
											"// Test 6: Check Null/Not Null - campaignId should not be null\r",
											"pm.test(\"Test 6: campaignId should not be null\", function () {\r",
											"    pm.expect(jsonData.data.campaignId).to.not.be.null;\r",
											"});\r",
											"\r",
											"// Test 7: Check Null/Not Null - name should not be null\r",
											"pm.test(\"Test 7: name should not be null\", function () {\r",
											"    pm.expect(jsonData.data.name).to.not.be.null;\r",
											"});\r",
											"\r",
											"// Test 8: Check Specific Values - name should have the expected value\r",
											"pm.test(\"Test 8: name should have the expected value\", function () {\r",
											"    pm.expect(jsonData.data.name).to.be.a('string');\r",
											"});\r",
											"\r",
											"// Test 9: Check Specific Lengths - id should have a length of 36 characters\r",
											"pm.test(\"Test 9: id should have a length of 36 characters\", function () {\r",
											"    pm.expect(jsonData.data.id).to.have.lengthOf(36);\r",
											"});\r",
											"\r",
											"// Test 10: Check Fields with Specific Regex Patterns - id should match UUID format\r",
											"pm.test(\"Test 10: id should match UUID format\", function () {\r",
											"    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;\r",
											"    pm.expect(jsonData.data.id).to.match(uuidRegex);\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "655ad308-c8f0-4b05-a2bc-776289594983"
									}
								}
							],
							"id": "ecfa49de-2e8e-4e08-8448-95237bff63d8",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/coalitions/:coalitionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"coalitions",
										":coalitionId"
									],
									"variable": [
										{
											"key": "coalitionId",
											"value": ""
										}
									]
								},
								"description": "Display one coalition, advocay group, or other association."
							},
							"response": [
								{
									"id": "c049c571-76a6-4ae9-883d-0be9cbcb8e4a",
									"name": "A single coalition",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId"
											],
											"variable": [
												{
													"key": "coalitionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"campaign_id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"body\": \"<string>\"\n  }\n}"
								}
							]
						},
						{
							"name": "Negative-Display one coalition",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"// 1. Invalid or non-existent endpoint\r",
											"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
											"    pm.response.to.have.status(404); \r",
											"});\r",
											"\r",
											"// 2. Unauthorized access\r",
											"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"// 3. Server errors\r",
											"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
											"    pm.response.to.have.status(500); \r",
											"});\r",
											"\r",
											"// 4. Invalid query parameters\r",
											"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"// 5. Testing caching mechanisms\r",
											"pm.test(\"Test Case 5: Caching Test\", function () {\r",
											"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
											"});\r",
											"\r",
											"// 6. Timeouts\r",
											"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"id": "a34b7ebe-81fd-4adf-8676-2f403d74d0b2"
									}
								}
							],
							"id": "ccb6bd78-9a9e-4ddb-8a7e-cec1ebb67552",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/coalitions/:coalitionId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"coalitions",
										":coalitionId"
									],
									"variable": [
										{
											"key": "coalitionId",
											"value": ""
										}
									]
								},
								"description": "Display one coalition, advocay group, or other association."
							},
							"response": [
								{
									"id": "782c07a7-9a78-4545-b815-3c60577151d4",
									"name": "A single coalition",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/coalitions/:coalitionId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"coalitions",
												":coalitionId"
											],
											"variable": [
												{
													"key": "coalitionId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"campaign_id\": \"<uuid>\",\n    \"name\": \"<string>\",\n    \"body\": \"<string>\"\n  }\n}"
								}
							]
						}
					],
					"id": "fb5a0661-0315-426e-abf8-2932ec82fffd"
				},
				{
					"name": "Positve-List coalitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test Case 1: Parse the response body as JSON and store it in the responseJSON variable\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"// Test Case 2: Verify that the response status code is 200\r",
									"pm.test(\"Verify that the response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 3: Verify that the response body structure includes the 'data' property\r",
									"pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									"    // Check if the 'data' property exists in the parsed JSON response\r",
									"    pm.expect(responseJSON).to.have.property('data');\r",
									"});\r",
									"\r",
									"// Test Case 4: Verify that the 'data' property is a non-empty array\r",
									"pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
									"    var DataCheck = pm.response.json().data;\r",
									"    pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 1: Verify the validity of 'id' property\", function() {\r",
									"    pm.expect(responseJSON.data.id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 2: Verify the validity of 'campaignId' property\", function() {\r",
									"    pm.expect(responseJSON.data.campaignId).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 3: Verify the validity of 'name' property\", function() {\r",
									"    pm.expect(responseJSON.data.name).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"// Test Case 1: Verify the existence of 'data' field in the response\r",
									"pm.test(\"Verify the existence of 'data' field in the response\", function () {\r",
									"    pm.response.to.have.jsonBody('data');\r",
									"});\r",
									"\r",
									"// Test Case 2: Verify that the 'data' field is an array\r",
									"pm.test(\"Verify that the 'data' field is an array\", function () {\r",
									"    const data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('array');\r",
									"});\r",
									"\r",
									"// Test Case 3: Verify that each item in the 'data' array has the 'id' property of type string\r",
									"pm.test(\"Verify that each item in the 'data' array has the 'id' property of type string\", function () {\r",
									"    const data = pm.response.json().data;\r",
									"    data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('id').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test Case 4: Verify that each item in the 'data' array has the 'campaignId' property of type string\r",
									"pm.test(\"Verify that each item in the 'data' array has the 'campaignId' property of type string\", function () {\r",
									"    const data = pm.response.json().data;\r",
									"    data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('campaignId').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"// Test Case 5: Verify that each item in the 'data' array has the 'name' property of type string\r",
									"pm.test(\"Verify that each item in the 'data' array has the 'name' property of type string\", function () {\r",
									"    const data = pm.response.json().data;\r",
									"    data.forEach(function (item) {\r",
									"        pm.expect(item).to.have.property('name').that.is.a('string');\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the existence of 'meta' field in the response\", function () {\r",
									"    pm.response.to.have.jsonBody('meta');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'meta' field is an object\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    pm.expect(meta).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'pagination' field inside 'meta' is an object\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination).to.be.an('object');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'total' field inside 'pagination' is a number\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.total).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'count' field inside 'pagination' is a number\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.count).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'per_page' field inside 'pagination' is a number\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.per_page).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'current_page' field inside 'pagination' is a number\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.current_page).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'total_pages' field inside 'pagination' is a number\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.total_pages).to.be.a('number');\r",
									"});\r",
									"\r",
									"pm.test(\"Verify that the 'links' field inside 'pagination' is an object\", function () {\r",
									"    const meta = pm.response.json().meta;\r",
									"    const pagination = meta.pagination;\r",
									"    pm.expect(pagination.links).to.be.an('object');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "65c381da-9bba-4e38-9e38-3bd8bfabeae8"
							}
						}
					],
					"id": "a83f262d-ccbd-4bac-9aa0-b149e02d4b06",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/coalitions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"coalitions"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[voter_id]",
									"value": "<uuid>",
									"disabled": true
								},
								{
									"key": "filter[campaign_id]",
									"value": "<uuid>",
									"disabled": true
								}
							]
						},
						"description": "List all coalitions, advocacy groups, or other associations the user could invite the voter to join."
					},
					"response": [
						{
							"id": "64137118-16f4-4524-898a-a43370d26fcc",
							"name": "A list of coalitions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/coalitions?page[number]=1&page[size]=100&filter[voter_id]=<uuid>&filter[campaign_id]=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"coalitions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[voter_id]",
											"value": "<uuid>"
										},
										{
											"key": "filter[campaign_id]",
											"value": "<uuid>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative-List coalitions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Invalid or non-existent endpoint\r",
									"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									"// 2. Unauthorized access\r",
									"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"\r",
									"// 3. Server errors\r",
									"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
									"    pm.response.to.have.status(500); \r",
									"});\r",
									"\r",
									"// 4. Invalid query parameters\r",
									"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"});\r",
									"\r",
									"// 5. Testing caching mechanisms\r",
									"pm.test(\"Test Case 5: Caching Test\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
									"});\r",
									"\r",
									"// 6. Timeouts\r",
									"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "82bbf708-c292-40b5-aef8-c8be4a8ce4cd"
							}
						}
					],
					"id": "b94b7d41-b878-4d4e-87b4-3475a3ec2041",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/coalitions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"coalitions"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[voter_id]",
									"value": "<uuid>",
									"disabled": true
								},
								{
									"key": "filter[campaign_id]",
									"value": "<uuid>",
									"disabled": true
								}
							]
						},
						"description": "List all coalitions, advocacy groups, or other associations the user could invite the voter to join."
					},
					"response": [
						{
							"id": "a1e631b8-2130-471a-8f7d-d170808e727f",
							"name": "A list of coalitions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/coalitions?page[number]=1&page[size]=100&filter[voter_id]=<uuid>&filter[campaign_id]=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"coalitions"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[voter_id]",
											"value": "<uuid>"
										},
										{
											"key": "filter[campaign_id]",
											"value": "<uuid>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"name\": \"<string>\",\n      \"body\": \"<string>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "ab231bc4-52ec-445c-b69e-be3a95543361"
		},
		{
			"name": "interaction-log",
			"item": [
				{
					"name": "Positive-Log user interactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// The JSON response from the API call is parsed and stored in the 'responseJSON' variable.\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"// Test 1: Verify that the response status code is 200 (OK).\r",
									"pm.test(\"Verify that the response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test 2: Verify that the response body structure includes the 'data' property.\r",
									"pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									"    pm.expect(responseJSON).to.have.property('data');\r",
									"});\r",
									"\r",
									"// Test 3: Verify that the 'data' property is a non-empty array.\r",
									"pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
									"    var DataCheck = pm.response.json().data;\r",
									"    pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 1: Verify the validity of 'data.id' property\", function() {\r",
									"    pm.expect(responseJSON.data.id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 2: Verify the validity of 'user_id' property within the 'data' object\", function() {\r",
									"    pm.expect(responseJSON.data.user_id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Case 3: Verify the validity of 'session_id' property within the 'data' object\", function() {\r",
									"    pm.expect(responseJSON.data.session_id).to.not.be.null;\r",
									"});\r",
									"\r",
									"\r",
									"// Test 5: Verify 'data' property is not null.\r",
									"pm.test(\"Verify 'data' property is not null\", function () {\r",
									"    var DataCheck = pm.response.json().data;\r",
									"    pm.expect(DataCheck).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'data' property contains expected fields\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    \r",
									"    pm.test(\"Verify the presence of 'id' property\", function () {\r",
									"        pm.expect(data[0].id).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'user_id' property\", function () {\r",
									"        pm.expect(data[0].user_id).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'session_id' property\", function () {\r",
									"        pm.expect(data[0].session_id).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'voter_id' property\", function () {\r",
									"        pm.expect(data[0].voter_id).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'action' property\", function () {\r",
									"        pm.expect(data[0].action).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'interaction_type' property\", function () {\r",
									"        pm.expect(data[0].interaction_type).to.exist;\r",
									"    });\r",
									"\r",
									"    pm.test(\"Verify the presence of 'created' property\", function () {\r",
									"        pm.expect(data[0].created).to.exist;\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"// Test 7: Verify 'data' property has a specific interaction type.\r",
									"pm.test(\"Verify 'data' property has specific interaction type\", function () {\r",
									"    var DataCheck = pm.response.json().data;\r",
									"    var expectedInteractionType = \"voter\";\r",
									"    pm.expect(DataCheck[0].interaction_type).to.eql(expectedInteractionType);\r",
									"});\r",
									"\r",
									"// Test 8: Verify 'data' property has a timestamp.\r",
									"pm.test(\"Verify 'data' property has a timestamp\", function () {\r",
									"    var DataCheck = pm.response.json().data;\r",
									"    pm.expect(DataCheck[0].created).to.be.a('number');\r",
									"});\r",
									"\r",
									"// Test 9: Verify 'meta' property exists.\r",
									"pm.test(\"Verify 'meta' property exists\", function () {\r",
									"    pm.expect(pm.response.json()).to.have.property('meta');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "6fe4058d-fc0a-4dca-bfba-8754ffd3b4e3"
							}
						}
					],
					"id": "d3e5d68a-820e-4981-8643-f198a3150428",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/interaction-log",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"interaction-log"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "sessionId",
									"value": "<uuid>",
									"description": "filter interactions by sessionId",
									"disabled": true
								}
							]
						},
						"description": "List the user's canvassing interactions."
					},
					"response": [
						{
							"id": "289df320-5fb4-41c4-a6e1-149ea8181d37",
							"name": "Log of interactions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/interaction-log?page[number]=1&page[size]=100&sessionId=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interaction-log"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "sessionId",
											"value": "<uuid>",
											"description": "filter interactions by sessionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"session_id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"voter_id\": \"<uuid>\",\n      \"action\": \"start-door-knock\",\n      \"interaction_type\": \"contact\",\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"session_id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"voter_id\": \"<uuid>\",\n      \"action\": \"start-call\",\n      \"interaction_type\": \"voter\",\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative-Log user interaction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Invalid or non-existent endpoint\r",
									"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									"// 2. Unauthorized access\r",
									"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"\r",
									"// 3. Server errors\r",
									"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
									"    pm.response.to.have.status(500); \r",
									"});\r",
									"\r",
									"// 4. Invalid query parameters\r",
									"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"});\r",
									"\r",
									"// 5. Testing caching mechanisms\r",
									"pm.test(\"Test Case 5: Caching Test\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
									"});\r",
									"\r",
									"// 6. Timeouts\r",
									"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "036a0f0c-5613-43c6-91d5-93871936bc85"
							}
						}
					],
					"id": "2c12531d-4276-4507-8e55-5944beabc534",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/interaction-log",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"interaction-log"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "sessionId",
									"value": "<uuid>",
									"description": "filter interactions by sessionId",
									"disabled": true
								}
							]
						},
						"description": "List the user's canvassing interactions."
					},
					"response": [
						{
							"id": "88e1c08c-f99e-45ba-9113-fcd754faef76",
							"name": "Log of interactions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/interaction-log?page[number]=1&page[size]=100&sessionId=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"interaction-log"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "sessionId",
											"value": "<uuid>",
											"description": "filter interactions by sessionId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"session_id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"voter_id\": \"<uuid>\",\n      \"action\": \"start-door-knock\",\n      \"interaction_type\": \"contact\",\n      \"created\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"session_id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"voter_id\": \"<uuid>\",\n      \"action\": \"start-call\",\n      \"interaction_type\": \"voter\",\n      \"created\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "eed912ab-6232-4533-b8a2-1608144380ab"
		},
		{
			"name": "session-history",
			"item": [
				{
					"name": "Positive - List sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the JSON response\r",
									"var responseJSON = pm.response.json();\r",
									"\r",
									"// Test Case 1: Verify that the response status code is 200 (OK).\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test Case 2: Verify that the response body structure includes the 'data' property.\r",
									"pm.test(\"Response body includes 'data' property\", function () {\r",
									"    // Use the pm.expect function to check if the 'responseJSON' has the 'data' property.\r",
									"    pm.expect(responseJSON).to.have.property('data');\r",
									"});\r",
									"\r",
									"// Test Case 3: Verify that the 'data' property is a non-empty array.\r",
									"pm.test(\"Verify that the 'data' property is a non-empty array\", function () {\r",
									"    var data = pm.response.json().data;\r",
									"    pm.expect(data).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify 'id' property is not null\", function() {\r",
									"    pm.expect(responseJSON.data.id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'user_id' property is not null\", function() {\r",
									"    pm.expect(responseJSON.data.user_id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'campaign_id' property is not null\", function() {\r",
									"    pm.expect(responseJSON.data.campaign_id).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'calls' property exists and has a valid value (not negative)\", function() {\r",
									"   pm.expect(responseJSON.data.calls).to.not.be.above(-1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'door_knocks' property exists and has a valid value (not negative)\", function() {\r",
									"   pm.expect(responseJSON.data.door_knocks).to.not.be.above(-1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'ballots' property exists and has a valid value (not negative)\", function() {\r",
									"   \r",
									"  pm.expect(responseJSON.data.ballots).to.not.be.above(-1);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'credits_earned' property exists and has a valid value (not negative)\", function() {\r",
									"    pm.expect(responseJSON.data.credits_earned).to.not.be.above(-1);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Verify 'start_time' property is not null\", function() {\r",
									"    pm.expect(responseJSON.data.start_time).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'end_time' property is not null\", function() {\r",
									"    pm.expect(responseJSON.data.end_time).to.not.be.null;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the presence of the 'pagination' property\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta).to.have.property(\"pagination\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'total' property within 'pagination' is a number\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"total\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'count' property within 'pagination' is a number\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"count\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'per_page' property within 'pagination' is a number\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"per_page\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'current_page' property within 'pagination' is a number\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"current_page\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'total_pages' property within 'pagination' is a number\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"total_pages\").that.is.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Verify 'links' property within 'pagination' is an empty object\", function() {\r",
									"    var meta = pm.response.json().meta;\r",
									"    pm.expect(meta.pagination).to.have.property(\"links\").that.is.an(\"object\").that.is.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "6b7fb34c-e8d3-4f77-96db-886f21d1a72e"
							}
						}
					],
					"id": "457fd686-a6c9-4b45-9d61-c6ba3b67646f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/session-history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"session-history"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaignId]",
									"value": "<string>",
									"description": "filter sessions by campaign",
									"disabled": true
								}
							]
						},
						"description": "List of current and completed canvassing sessions."
					},
					"response": [
						{
							"id": "ecaba8df-fd67-421a-abdc-6f57c8f56189",
							"name": "Sessions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/session-history?page[number]=1&page[size]=100&filter[campaignId]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"session-history"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaignId]",
											"value": "<string>",
											"description": "filter sessions by campaign"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"calls\": \"<long>\",\n      \"door_knocks\": \"<long>\",\n      \"ballots\": \"<long>\",\n      \"credits_earned\": \"<float>\",\n      \"start_time\": \"<long>\",\n      \"end_time\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"calls\": \"<long>\",\n      \"door_knocks\": \"<long>\",\n      \"ballots\": \"<long>\",\n      \"credits_earned\": \"<float>\",\n      \"start_time\": \"<long>\",\n      \"end_time\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative - List sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Invalid or non-existent endpoint\r",
									"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									"// 2. Unauthorized access\r",
									"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"\r",
									"// 3. Server errors\r",
									"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
									"    pm.response.to.have.status(500); \r",
									"});\r",
									"\r",
									"// 4. Invalid query parameters\r",
									"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"});\r",
									"\r",
									"// 5. Testing caching mechanisms\r",
									"pm.test(\"Test Case 5: Caching Test\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
									"});\r",
									"\r",
									"// 6. Timeouts\r",
									"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "88434fcf-ec39-4e2f-9a92-013458048fb3"
							}
						}
					],
					"id": "4bde8bcd-d3b6-48b2-bc97-c8313441316d",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/session-history",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"session-history"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaignId]",
									"value": "<string>",
									"description": "filter sessions by campaign",
									"disabled": true
								}
							]
						},
						"description": "List of current and completed canvassing sessions."
					},
					"response": [
						{
							"id": "82e94b19-fbbc-4bfc-aed1-abf0fdad0604",
							"name": "Sessions",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/session-history?page[number]=1&page[size]=100&filter[campaignId]=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"session-history"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaignId]",
											"value": "<string>",
											"description": "filter sessions by campaign"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"calls\": \"<long>\",\n      \"door_knocks\": \"<long>\",\n      \"ballots\": \"<long>\",\n      \"credits_earned\": \"<float>\",\n      \"start_time\": \"<long>\",\n      \"end_time\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"user_id\": \"<uuid>\",\n      \"campaign_id\": \"<uuid>\",\n      \"calls\": \"<long>\",\n      \"door_knocks\": \"<long>\",\n      \"ballots\": \"<long>\",\n      \"credits_earned\": \"<float>\",\n      \"start_time\": \"<long>\",\n      \"end_time\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "0b9d05b3-5bac-49a2-b48d-144d7f0af182"
		},
		{
			"name": "screenings",
			"item": [
				{
					"name": "Positive - List screenings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"pm.test(\"Check if the 'data' property exists\", function () {\r",
									"    pm.expect(responseJSON).to.have.property(\"data\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the 'data' property is an array\", function () {\r",
									"    pm.expect(responseJSON.data).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response data is an array and not empty\", function () {\r",
									"    pm.expect(responseJSON.data).to.be.an(\"array\").that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Check the 'id' property data type\", function () {\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item).to.have.property(\"id\").that.is.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check the 'campaignId' property data type\", function () {\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item).to.have.property(\"campaignId\").that.is.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check the 'status' property data type\", function () {\r",
									"    const validStatusValues = [\"pending\", \"approved\", null];\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item).to.have.property(\"status\").that.is.a.oneOf(validStatusValues);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Check the 'created' property data type\", function () {\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item).to.have.property(\"created\").that.is.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check the 'modified' property data type\", function () {\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item).to.have.property(\"modified\").that.is.a(\"number\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the 'meta' object exists\", function () {\r",
									"    pm.expect(responseJSON).to.have.property(\"meta\").that.is.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if the 'pagination' property exists within the 'meta' object\", function () {\r",
									"    pm.expect(responseJSON.meta).to.have.property(\"pagination\").that.is.an(\"object\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Pagination property 'total' exists and has correct data type\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"total\");\r",
									"    pm.expect(pagination.total).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination property 'count' exists and has correct data type\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"count\");\r",
									"    pm.expect(pagination.count).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination property 'per_page' exists and has correct data type\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"per_page\");\r",
									"    pm.expect(pagination.per_page).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination property 'current_page' exists and has correct data type\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"current_page\");\r",
									"    pm.expect(pagination.current_page).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination property 'total_pages' exists and has correct data type\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"total_pages\");\r",
									"    pm.expect(pagination.total_pages).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Pagination property 'links' exists and is an object\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination).to.have.property(\"links\");\r",
									"    pm.expect(pagination.links).to.be.an(\"object\");\r",
									"});\r",
									"\r",
									"pm.test(\"URL formats for 'screening_url' and 'results_url' are correct\", function () {\r",
									"    for (const item of responseJSON.data) {\r",
									"        if (item.screening_url !== null) {\r",
									"            pm.expect(item.screening_url).to.match(/^(\\S+:\\/\\/)?\\S+$/);\r",
									"        }\r",
									"        if (item.results_url !== null) {\r",
									"            pm.expect(item.results_url).to.match(/^(\\S+:\\/\\/)?\\S+$/);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Timestamps 'created' and 'modified' are within a reasonable range\", function () {\r",
									"    const currentTimestamp = Math.floor(Date.now() / 1000);\r",
									"    for (const item of responseJSON.data) {\r",
									"        pm.expect(item.created).to.be.within(0, currentTimestamp);\r",
									"        pm.expect(item.modified).to.be.within(0, currentTimestamp);\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination 'count' and 'total' are correct\", function () {\r",
									"    const dataCount = responseJSON.data.length;\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination.count).to.equal(dataCount);\r",
									"    pm.expect(pagination.total).to.be.at.least(dataCount);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Pagination 'current_page' and 'per_page' have valid values\", function () {\r",
									"    const pagination = responseJSON.meta.pagination;\r",
									"    pm.expect(pagination.current_page).to.be.a(\"number\").and.to.be.at.least(1);\r",
									"    pm.expect(pagination.per_page).to.be.a(\"number\").and.to.be.at.least(1);\r",
									"});\r",
									"\r",
									"pm.test(\"Allowed 'status' values based on 'campaignId'\", function () {\r",
									"    // Define the allowed 'status' values based on 'campaignId'\r",
									"    const allowedStatusByCampaignId = {\r",
									"        \"3783aba2-ea00-411c-ba1e-5ba82115ce1a\": [\"pending\", null],\r",
									"        \"09173c23-7665-4e60-8b3c-9b50bd1e4345\": [\"pending\", \"approved\", \"requested\", 'pending-approval',\r",
									"        'more-information-needed',\r",
									"        'application-approved',\r",
									"        'application-denied',null]\r",
									"    };\r",
									"    // Loop through each item in the responseJSON data\r",
									"    for (const item of responseJSON.data) {\r",
									"        if (item.campaignId in allowedStatusByCampaignId) {\r",
									"            const allowedStatus = allowedStatusByCampaignId[item.campaignId];\r",
									"            pm.expect(allowedStatus).to.include(item.status);\r",
									"        }\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test('Screening should have a valid created timestamp', () => {\r",
									"    const createdTimestamp = new Date(pm.response.json().created * 1000); \r",
									"    console.log('Created Timestamp:', createdTimestamp);\r",
									"    pm.expect(createdTimestamp.toString() !== 'Invalid Date').to.be.false;\r",
									"});\r",
									"\r",
									"pm.test('Screening should have a valid modified timestamp', () => {\r",
									"    const modifiedTimestamp = new Date(pm.response.json().modified * 1000); \r",
									"    console.log('Modified Timestamp:', modifiedTimestamp);\r",
									"    pm.expect(modifiedTimestamp.toString() !== 'Invalid Date').to.be.false;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "efefbd03-0d5d-437c-8ea6-27756f1927a2"
							}
						}
					],
					"id": "72ac75df-a222-433f-8537-45e24c5006d4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/screenings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"screenings"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaignId]",
									"value": "<uuid>",
									"description": "(Required) ",
									"disabled": true
								}
							]
						},
						"description": "Users are screened for each campaign they wish to join. This returns a list of screenings."
					},
					"response": [
						{
							"id": "c7e64c5b-9db8-4c7d-b2c1-4772e1f96ffc",
							"name": "List of screenings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/screenings?page[number]=1&page[size]=100&filter[campaignId]=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"screenings"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaignId]",
											"value": "<uuid>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"more-information-needed\",\n      \"screening_url\": \"<string>\",\n      \"results_url\": \"<string>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"requested\",\n      \"screening_url\": \"<string>\",\n      \"results_url\": \"<string>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				},
				{
					"name": "Negative - List screenings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// 1. Invalid or non-existent endpoint\r",
									"pm.test(\"Test Case 1: Invalid Endpoint Test\", function () {\r",
									"    pm.response.to.have.status(404); \r",
									"});\r",
									"\r",
									"// 2. Unauthorized access\r",
									"pm.test(\"Test Case 2: Unauthorized Access Test\", function () {\r",
									"    pm.response.to.have.status(401); \r",
									"});\r",
									"\r",
									"// 3. Server errors\r",
									"pm.test(\"Test Case 3: Internal Server Error Test\", function () {\r",
									"    pm.response.to.have.status(500); \r",
									"});\r",
									"\r",
									"// 4. Invalid query parameters\r",
									"pm.test(\"Test Case 4: Invalid Query Parameters Test\", function () {\r",
									"    pm.response.to.have.status(400); \r",
									"});\r",
									"\r",
									"// 5. Testing caching mechanisms\r",
									"pm.test(\"Test Case 5: Caching Test\", function () {\r",
									"    pm.response.to.have.header(\"Cache-Control\", \"max-age=3600\"); \r",
									"});\r",
									"\r",
									"// 6. Timeouts\r",
									"pm.test(\"Test Case 6: Timeout Test\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000); \r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"id": "cfa156d2-d177-4559-afc4-1da704707f7f"
							}
						}
					],
					"id": "1fd68c46-2c1d-420d-b821-4e4b3584e9e9",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiI5OGU4NmMwMS03OWNlLTQ3YWMtOWJmZS00YjBjZjM0MjIxNjgiLCJqdGkiOiJkYzc2NTY3NjAxMTg3Y2YyYzE5Y2ViMTgwMWJhNDJkOWM3NjIzNDEzODVjODJmYjQzOGMwMTViODUwN2RlNzkxNWMyYjE2NzI0N2NkNzUwYyIsImlhdCI6MTY5MDgxMDk2NS41NjU2NTgsIm5iZiI6MTY5MDgxMDk2NS41NjU2NjEsImV4cCI6MTcyMjQzMzM2NS41NTQyNzgsInN1YiI6IjI3Iiwic2NvcGVzIjpbXX0.BMzPvbit10BHUH7zwtKmA1oqaPlqSFBhxeLhppt0TXY_Ibdw2BJJZUND6-EMLt0mQnRuCqlWV7QSss4nayoxP8wP9G9n3bysadMtUUXtiNLBqcVGBfDJfzt6r7JJQzF4Nw6-M6bWMg143VtscTobsSehPHgM5oKp3sy4LNkYrOoeL6nehA9yv_1rr1CsqHrOB3tMfXDAPZbNv8tY9RBQGAhjcTeND8u-HMvBo_B_fwjNwJAzuegkSRd99qRWPP3gv5QMMQBmw9xvVYxogwqzb4zZrH8MSKGnwRZS_54MK5h8kRsRUcf-q3Jvb0IrwjjyEV8fWsi7D3SuMKmhjlowdz0AeqDmPh44KJ89lDhC5yFqJnsvqis2wlxaB_kBwPnkQ-HbzVGvfzOLSIf2xSqgwUKsBYYSbTi4n4dZ9blfrLutHxtx2AHj6oUylRd2bAENvEUcV9jmlfVCk3LjV1AU9gJrgGrJnpxX8Nt8Uc5Kcdw1B3veuDkf1eHe-bMxrbCiHBa41yugoJXl21M2Ddv-g8ZlthSot9-QRXTIYv5ilBZI5_1gESQ5N-Cdehw-0QOvprWs2RPSlq99FPi4NE0fO6wTQ7sSjuoMnLVK1WfwpGX5pF58QnNda-rz-DIz7LqSTyly9fthv0GJw2YeB-sAR8uGccTukfPAi18NXtnEfy4",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/screenings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"screenings"
							],
							"query": [
								{
									"key": "page[number]",
									"value": "1",
									"description": "Page number",
									"disabled": true
								},
								{
									"key": "page[size]",
									"value": "100",
									"description": "Items per page",
									"disabled": true
								},
								{
									"key": "filter[campaignId]",
									"value": "<uuid>",
									"description": "(Required) ",
									"disabled": true
								}
							]
						},
						"description": "Users are screened for each campaign they wish to join. This returns a list of screenings."
					},
					"response": [
						{
							"id": "a995fc17-6698-4b5c-801c-98144092307d",
							"name": "List of screenings",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/screenings?page[number]=1&page[size]=100&filter[campaignId]=<uuid>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"screenings"
									],
									"query": [
										{
											"key": "page[number]",
											"value": "1",
											"description": "Page number"
										},
										{
											"key": "page[size]",
											"value": "100",
											"description": "Items per page"
										},
										{
											"key": "filter[campaignId]",
											"value": "<uuid>",
											"description": "(Required) "
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"more-information-needed\",\n      \"screening_url\": \"<string>\",\n      \"results_url\": \"<string>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"status\": \"requested\",\n      \"screening_url\": \"<string>\",\n      \"results_url\": \"<string>\",\n      \"created\": \"<long>\",\n      \"modified\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "8493f8eb-d2ec-41d1-a8d4-e6aba57507b3"
		},
		{
			"name": "notifications",
			"item": [
				{
					"name": "{notificationId}",
					"item": [
						{
							"name": "read",
							"item": [
								{
									"name": "Positive - Change status to 'read' Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202)\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string - Notification read \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Notification read\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "0cf8bf1e-df05-4a0b-bffd-59add3bed0ec"
											}
										}
									],
									"id": "22cafe58-5ec2-4062-99fa-705fccefc9d8",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId/read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId",
												"read"
											],
											"variable": [
												{
													"key": "notificationId",
													"value": "31a96819-1c92-4d66-a4cf-7a954e6feea0"
												}
											]
										},
										"description": "Notifications can be read (or not) by users. This endpoint marks a notification as 'read'."
									},
									"response": [
										{
											"id": "7427e4e8-5372-4591-8e16-514ec10d51f0",
											"name": "Notification read",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/read",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"read"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
										},
										{
											"id": "bc0f2804-c177-4b34-ae30-c8277b221fdb",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/read",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"read"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - Change status to 'read'",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "a319fffc-8b8f-4a82-b297-71540000a451"
											}
										}
									],
									"id": "891692b9-1969-42f7-b49d-e11ad41fd972",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId/read",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId",
												"read"
											],
											"variable": [
												{
													"key": "notificationId",
													"value": "123"
												}
											]
										},
										"description": "Notifications can be read (or not) by users. This endpoint marks a notification as 'read'."
									},
									"response": [
										{
											"id": "2fb569be-3b91-4c1c-965c-ceea12c457a9",
											"name": "Notification read",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/read",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"read"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
										},
										{
											"id": "8c80e59c-c608-4e09-8fff-2969a05bb242",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/read",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"read"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "b2608183-113d-4e60-9dd8-ee1dae878213"
						},
						{
							"name": "unread",
							"item": [
								{
									"name": "Positive - Change status to 'unread'",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 202\", function () {\r",
													"    pm.response.to.have.status(202)\r",
													"});\r",
													"\r",
													"pm.test(\"Body matches string\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Notification unread\");\r",
													"});"
												],
												"type": "text/javascript",
												"id": "896a1166-0807-4299-8d5d-1adcbc4c9dc3"
											}
										}
									],
									"id": "9195d6de-ff73-4bdf-8991-f8258552bba3",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId/unread",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId",
												"unread"
											],
											"variable": [
												{
													"key": "notificationId",
													"value": "31a96819-1c92-4d66-a4cf-7a954e6feea0"
												}
											]
										},
										"description": "Notifications can be read (or not) by users. This endpoint marks a notification as 'unread'."
									},
									"response": [
										{
											"id": "291b4bf9-c634-4efb-82cc-1c2016bdaff2",
											"name": "Notification unread",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/unread",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"unread"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
										},
										{
											"id": "fdfc78c6-2b93-4202-b460-e6ba303a9596",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/unread",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"unread"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Negative - Change status to 'unread' Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"id": "aa7e7e2a-3659-4b83-a5df-7c11357ebbdb"
											}
										}
									],
									"id": "e8e90bf0-1861-4ea7-ad54-ca31a69efa76",
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearerToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId/unread",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId",
												"unread"
											],
											"variable": [
												{
													"key": "notificationId",
													"value": ""
												}
											]
										},
										"description": "Notifications can be read (or not) by users. This endpoint marks a notification as 'unread'."
									},
									"response": [
										{
											"id": "b68c6d98-56e7-4b19-97fc-73ff510c80bb",
											"name": "Notification unread",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/unread",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"unread"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Accepted",
											"code": 202,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"data\": {\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
										},
										{
											"id": "9a9778c9-b685-4a3a-a31a-7a8d26174025",
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": "Added as a part of security scheme: bearer",
														"key": "Authorization",
														"value": "Bearer <token>"
													}
												],
												"url": {
													"raw": "{{baseUrl}}/notifications/:notificationId/unread",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"notifications",
														":notificationId",
														"unread"
													],
													"variable": [
														{
															"key": "notificationId"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"id": "0e8a71a8-7720-4488-b579-85d49988f16a"
						},
						{
							"name": "Positive - View one notification",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var responseJSON = pm.response.json();\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"// verify the response body data is not empty.\r",
											" pm.test(\"Verify that the response body structure is NOT EMPTY\", function () {\r",
											" pm.expect(responseJSON.data).not.empty;\r",
											"\r",
											"});\r",
											"\r",
											"// verify the response body data is Object.\r",
											" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
											" pm.expect(responseJSON.data).to.be.an('Object');\r",
											"\r",
											"});\r",
											"\r",
											"// verify the response body data property.\r",
											" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
											"    pm.expect(responseJSON).to.have.property('data');\r",
											"    pm.expect(responseJSON.data).to.have.property('id');\r",
											"    pm.expect(responseJSON.data).to.have.property('title');\r",
											"    pm.expect(responseJSON.data).to.have.property('short_description');\r",
											"    pm.expect(responseJSON.data).to.have.property('icon');\r",
											"    pm.expect(responseJSON.data).to.have.property('body');\r",
											"    pm.expect(responseJSON.data).to.have.property('status');\r",
											"    pm.expect(responseJSON.data).to.have.property('date');\r",
											"});\r",
											"\r",
											"pm.test(\"Check data array formats are valid\", () => {\r",
											"    pm.expect(responseJSON.data.id).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.title).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.short_description).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.icon).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.body).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.status).to.be.a('String')\r",
											"    pm.expect(responseJSON.data.date).to.be.a('number')\r",
											"    \r",
											"});\r",
											"\r",
											"var DataCheck = pm.response.json().data;\r",
											"    const dataFields = [DataCheck]\r",
											"    console.log(dataFields)\r",
											"    dataFields.forEach((item,index) => {\r",
											"        \r",
											"        try {\r",
											"        pm.test(`Data[${index}] has valid 'id' field`, function () {\r",
											"            pm.expect(item.id).not.empty;\r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'title' field`, function () {\r",
											"            pm.expect(item.title).not.empty;\r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'short_description' field`, function () {\r",
											"            pm.expect(item.short_description).not.empty\r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'icon' field`, function () {\r",
											"            pm.expect(item.icon).not.empty\r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'body' field`, function () {\r",
											"            pm.expect(item.body).not.empty\r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'status' field`, function () {\r",
											"            pm.expect(item.status).not.empty \r",
											"        });\r",
											"\r",
											"        pm.test(`Data[${index}] has valid 'date' field`, function () {\r",
											"            pm.expect(item.date).to.be.greaterThan(0)\r",
											"        });\r",
											"        \r",
											"        } catch (err) {\r",
											"        console.error(`Data[${index}] test failed:`, err);\r",
											"        }\r",
											"    }); "
										],
										"type": "text/javascript",
										"id": "59a774b8-bdac-44ac-916e-5a93f3a22671"
									}
								}
							],
							"id": "1dec0a5c-d7ad-433c-ae18-e084477054f6",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notifications/:notificationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notifications",
										":notificationId"
									],
									"variable": [
										{
											"key": "notificationId",
											"value": "31a96819-1c92-4d66-a4cf-7a954e6feea0"
										}
									]
								},
								"description": "View one notification"
							},
							"response": [
								{
									"id": "120c9644-7a89-4892-ad2c-70fc860308cf",
									"name": "A single notification",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId"
											],
											"variable": [
												{
													"key": "notificationId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"body\": \"a\",\n    \"model\": \"consequat ut sit proident esse\",\n    \"model_id\": \"veniam voluptate\",\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
								},
								{
									"id": "03bf0c7d-1c48-427d-abd2-315de7096747",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId"
											],
											"variable": [
												{
													"key": "notificationId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Negative - View one notification Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"id": "cc961819-3c3d-4827-bea2-9761ba8aaf91"
									}
								}
							],
							"id": "193b5b12-16f0-4a3f-a6e2-def456f3dd14",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{bearerToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notifications/:notificationId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notifications",
										":notificationId"
									],
									"variable": [
										{
											"key": "notificationId",
											"value": "3456wrongdata"
										}
									]
								},
								"description": "View one notification"
							},
							"response": [
								{
									"id": "2914e52d-02c5-4000-891c-f1d862ea9594",
									"name": "A single notification",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId"
											],
											"variable": [
												{
													"key": "notificationId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"data\": {\n    \"body\": \"a\",\n    \"model\": \"consequat ut sit proident esse\",\n    \"model_id\": \"veniam voluptate\",\n    \"id\": \"<uuid>\",\n    \"title\": \"<string>\",\n    \"short_description\": \"<string>\",\n    \"icon\": \"<string>\",\n    \"status\": \"read\",\n    \"date\": \"<long>\"\n  }\n}"
								},
								{
									"id": "15e0d61e-0be0-4c2e-b5c1-8530d2be6b30",
									"name": "Not found",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": "Added as a part of security scheme: bearer",
												"key": "Authorization",
												"value": "Bearer <token>"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/notifications/:notificationId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"notifications",
												":notificationId"
											],
											"variable": [
												{
													"key": "notificationId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					],
					"id": "074129f1-7ec4-4340-86f7-ac3a64572e42"
				},
				{
					"name": "Positve - List recent notifications.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var responseJSON = pm.response.json();\r",
									"\r",
									"\r",
									"// verify the response status code 200(ok).\r",
									" pm.test(\"Verify that the response status code is 200\", function () {\r",
									" pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"\r",
									"// verify the response body data is Object.\r",
									" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									" pm.expect(responseJSON).to.be.an('Object');\r",
									" pm.expect(responseJSON.data[0]).to.be.an('Object');\r",
									" pm.expect(responseJSON.meta).to.be.an('Object');\r",
									"});\r",
									"\r",
									"// verify the response body data property.\r",
									" pm.test(\"Verify that the response body structure includes the 'data' property\", function () {\r",
									" pm.expect(responseJSON).to.have.property('data');\r",
									" pm.expect(responseJSON).to.have.property('meta');\r",
									"\r",
									"});\r",
									"\r",
									"\r",
									"//verify that the data property is not an empty array.\r",
									" pm.test(\"Verify that the 'data' property is a non-empty array\", function(){\r",
									" var DataCheck = pm.response.json().data;\r",
									" pm.expect(DataCheck).to.be.an('array').that.is.not.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the data array has all the properties keys and its values formats \", function() {\r",
									"    var jsonData = pm.response.json()\r",
									"    try{\r",
									"        for (i=0; i < jsonData.data.length ; i++){\r",
									"            pm.expect(jsonData.data[i]).to.have.property('id').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('title').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('short_description').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('icon').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('body').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('status').to.be.a('String')\r",
									"            pm.expect(jsonData.data[i]).to.have.property('date').to.be.a('number')\r",
									"        }  \r",
									"    } catch (err){\r",
									"        console.error(\"One or more fields are not in proper format. Please check !!\", err)\r",
									"    } \r",
									"});\r",
									"\r",
									"pm.test(\"Check meta array formats are valid\", () => {\r",
									"    try{\r",
									"        console.log(\"check here passed\")\r",
									"        pm.expect(responseJSON.meta.pagination.links).to.be.a('object').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.total).to.be.a('number').and.not.empty\r",
									"        console.log(\"check here passed or not\")\r",
									"        pm.expect(responseJSON.meta.pagination.count).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.per_page).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.current_page).to.be.a('number').and.not.empty\r",
									"        pm.expect(responseJSON.meta.pagination.total_pages).to.be.a('number').and.not.empty\r",
									"    } catch (err) {\r",
									"        console.error(\"One or more fields are empty. Please check !!\", err)\r",
									"    }\r",
									"});\r",
									"\r",
									"// Validate that all the data feilds are non empty\r",
									"var DataCheck = pm.response.json();\r",
									"    DataCheck.data.forEach((item, index) => {\r",
									"        //console.log(DataCheck.data[0])\r",
									"        try {\r",
									"        pm.test(`Data[${index}] has valid 'id' field`, function () {\r",
									"            pm.expect(item.id).not.empty;\r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'title' field`, function () {\r",
									"            pm.expect(item.title).not.empty;\r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'short_description' field`, function () {\r",
									"            pm.expect(item.short_description).not.empty\r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'icon' field`, function () {\r",
									"            pm.expect(item.icon).not.empty\r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'body' field`, function () {\r",
									"            pm.expect(item.body).not.empty\r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'status' field`, function () {\r",
									"            pm.expect(item.status).not.empty \r",
									"        });\r",
									"\r",
									"        pm.test(`Data[${index}] has valid 'date' field`, function () {\r",
									"            pm.expect(item.date).to.be.greaterThan(0)\r",
									"        });\r",
									"        \r",
									"        } catch (err) {\r",
									"        console.error(`Data[${index}] test failed:`, err);\r",
									"        }\r",
									"    });  \r",
									"\r",
									""
								],
								"type": "text/javascript",
								"id": "0d7453bd-b5bc-4ec3-b27e-dcebc7d9b65a"
							}
						}
					],
					"id": "4fdc75d5-5bcd-4a90-9577-aac44535d4af",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{bearerToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notifications",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notifications"
							]
						},
						"description": "List recent notifications"
					},
					"response": [
						{
							"id": "db63ca72-0d49-4b04-b0a4-7951e2effcff",
							"name": "List of notifications",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"description": "Added as a part of security scheme: bearer",
										"key": "Authorization",
										"value": "Bearer <token>"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/notifications",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"notifications"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"data\": [\n    {\n      \"id\": \"<uuid>\",\n      \"title\": \"<string>\",\n      \"short_description\": \"<string>\",\n      \"icon\": \"<string>\",\n      \"status\": \"unread\",\n      \"date\": \"<long>\"\n    },\n    {\n      \"id\": \"<uuid>\",\n      \"title\": \"<string>\",\n      \"short_description\": \"<string>\",\n      \"icon\": \"<string>\",\n      \"status\": \"read\",\n      \"date\": \"<long>\"\n    }\n  ],\n  \"meta\": {\n    \"pagination\": {\n      \"current_page\": \"<long>\",\n      \"count\": \"<long>\",\n      \"per_page\": \"<long>\",\n      \"total_pages\": \"<long>\",\n      \"total\": \"<long>\"\n    }\n  }\n}"
						}
					]
				}
			],
			"id": "32a300ca-190e-41fa-b30c-194e657655a5"
		},
		{
			"name": "New Request",
			"id": "d61027b9-501b-4ed5-9030-f939ffe8fd00",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://example.com",
					"protocol": "https",
					"host": [
						"example",
						"com"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "baa2483f-37fe-4614-8938-c0904927e141"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "0fc6c417-f447-4f63-93e4-2cc40ed757c3"
			}
		}
	],
	"variable": [
		{
			"id": "33d8de31-45b1-4350-b266-d5e988ca7e10",
			"key": "baseUrl",
			"value": "https://api.canvass.dev/v1"
		},
		{
			"id": "23a71da1-ed88-4a84-952c-5584eb3add15",
			"key": "23a71da1-ed88-4a84-952c-5584eb3add15",
			"value": "",
			"type": "string"
		}
	]
}