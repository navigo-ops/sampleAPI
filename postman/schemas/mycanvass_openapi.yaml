openapi: 3.0.1
info:
  title: MyCanvass Mobile App API
  description: The Mobile App's API
  version: 1.0.0
servers:
  - url: 'https://api.canvass.dev/v1'

tags:
  - name: Auth
    description: Authentication and Authorization flow
  - name: Profile
    description: Profile operations
  - name: Campaign
    description: Campaign operations
  - name: "Campaign: Contact"
    description: Campaign contact operations
  - name: "Campaign: Script"
    description: Campaign script operations
  - name: "Shared Contacts"
    description: Shared user contact operations
  - name: Transactions
    description: Money transaction operations
  - name: "Payment Methods"
    description: Payment method operations
  - name: Coalition
    description: Coalition operations
  - name: Interactions
    description: Canvassing interaction operations
  - name: Screening
    description: Screening operations

paths:
  /verify:
    post:
      description: Initiate 2FA authenticate by providing a verification code to the user via SMS.
      tags:
        - Auth
      summary: Initiate SMS 2FA
      operationId: verify
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 920-555-0255
                  description: The phone number to which the SMS message containing the 2FA code must be sent.
      responses:
        202:
          description: Operation Initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  unique_id:
                    type: string
                    description: A unique id that must be provided with the the 2FA code to the /verify/confirm endpoint.
                  expiration:
                    type: number
                    description: The unix timestamp at which this 2FA will expire.
  /verify/resend:
    post:
      description: Resend a 2FA authentication code
      tags:
        - Auth
      summary: Resends the SMS 2FA code
      operationId: verifyResend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 920-555-0255
                  description: The phone number to which the SMS message containing the 2FA code must be sent.
      responses:
        202:
          description: Operation Initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  unique_id:
                    type: string
                    description: A unique id that must be provided with the the 2FA code to the /verify/confirm endpoint.
                  expiration:
                    type: number
                    description: The unix timestamp at which this 2FA will expire.
  /verify/confirm:
    post:
      description: Once the user has received the code it is provided here to confirm their Authentication.
      tags:
        - Auth
      summary: Confirm the 2FA code
      operationId: verifyConfirm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 987323
                  description: The 2FA code sent by the /verify or /verify/resend endpoints.
                unique_id:
                  type: string
                  description: The unique id that that was returned by the /verify or /verify/resend response.
      responses:
        202:
          description: Operation Initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: An access bearer token that can be added to requests to complete authorization.
                  refresh_token:
                    type: string
                    description: An refresh token that can be used to generate a new access bearer token
        406:
          description: Invalid entry. Unprocessable Entity.

  /signup:
    post:
      description: "Sign up and enter the user's data to create a new profile."
      tags:
        - Profile
      summary: Sign up
      operationId: signUp
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: New profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                      username:
                        type: string
        406:
          description: Invalid entry. Unprocessable Entity.

  /profile:
    get:
      description: "Read the user's profile data."
      tags:
        - Profile
      summary: Read profile
      operationId: readProfile
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: User Profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    patch:
      description: "Update the user's profile data."
      tags:
        - Profile
      summary: Update Profile
      operationId: updateProfile
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        202:
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        406:
          description: Validation exception. Malformed request body.
    delete:
      description: "Deactivate the user's profile."
      tags:
        - Profile
      summary: Deactivate profile
      operationId: deactivateProfile
      security:
        - bearerAuth: [ ]
      responses:
        202:
          description: Profile deactivated
  /change-phone:
    post:
      description: "Allows the user to change their phone number. A 2FA code will be sent and they must re-verify using the /verify/confirm endpoint."
      tags:
        - Profile
      summary: Change phone number
      operationId: updateUserPhone
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                phone:
                  type: string
                  example: 920-555-0255
                  description: The phone number to which the SMS message containing the 2FA code must be sent.
      responses:
        202:
          description: Operation Initiated
          content:
            application/json:
              schema:
                type: object
                properties:
                  unique_id:
                    type: string
                    description: A unique id that must be provided with the the 2FA code to the /change-phone/confirm endpoint.
                  expiration:
                    type: number
                    description: The unix timestamp at which this 2FA will expire.
  /change-phone/confirm:
    post:
      description: Once the user has received the code it is provided here to confirm their phone number change
      tags:
        - Profile
      summary: Confirm the 2FA code sent to confirm their phone number
      operationId: updateUserPhoneConfirm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: number
                  example: 987323
                  description: The 2FA code sent by the /profile/change-phone endpoint.
                unique_id:
                  type: string
                  description: The unique id that that was returned by the /change-phone request.
      responses:
        202:
          description: Change accepted.
  /change-email:
    post:
      description: "Allows the user to change their email address. A confirmation link will be sent and they must re-verify using the /change-email/confirm endpoint."
      tags:
        - Profile
      summary: Change email
      operationId: updateUserEmail
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        202:
          description: Operation Initiated
          content:
            application/json:
              schema:
                description: "This code and unique id may be presented in an email and accessed via this end-point: https://test1.nucleusdemo.com/mycanvass/confirm_email/{{email_unique_id}}/{{email_code}}"
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      expiration:
                        type: number
                        description: The unix timestamp at which this 2FA will expire.
                      unique_id:
                        type: string
                        format: uuid
                      code:
                        type: number
                        description: The Email Code
  /change-email/confirm:
    post:
      description: Once the user has received the link the code is provided here to confirm their email change
      tags:
        - Profile
      summary: Confirm the code sent to confirm their email change
      operationId: updateUserEmailConfirm
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: The code sent by the /change-email endpoint.
      responses:
        202:
          description: Change accepted.
  /drivers-license/front:
    post:
      description: "Add the front photon of the user's driver's license for identification purposes."
      tags:
        - Profile
      summary: Upload a drivers license photo
      operationId: addLicenseFront
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Photo added
        406:
          description: Invalid entry. Unprocessable Entity.
  /drivers-license/back:
    post:
      description: "Add the back photon of the user's driver's license for identification purposes."
      tags:
        - Profile
      summary: Upload a drivers license photo
      operationId: addLicenseBack
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Photo added
        406:
          description: Invalid entry. Unprocessable Entity.
  /user-photo:
    post:
      description: "Add the user's profile image."
      tags:
        - Profile
      summary: Add profile image
      operationId: addImage
      security:
        - bearerAuth: [ ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Photo added
        406:
          description: Invalid entry. Unprocessable Entity.

  /transactions:
    get:
      description: "A transaction history of money earned, cash-out status, etc."
      tags:
        - Transactions
      summary: Show Transaction History
      operationId: showTransactions
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[date]
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: filter[status]
          in: query
          required: false
          schema:
            type: string
            enum:
              - pending
              - approved
              - failed
        - name: sort
          in: query
          required: false
          description: Sorting options
          schema:
            type: string
            enum:
              - date
              - status
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - ascending
              - descending
      responses:
        200:
          description: A transaction history
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Transaction'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /transactions/cash-out:
    post:
      description: "Send the user's earned dollar amount to their identified bank account."
      tags:
        - Transactions
      summary: Cash out
      operationId: cashout
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CashOut'
      responses:
        201:
          description: User cashout
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Transaction'
        406:
          description: Invalid entry. Unprocessable Entity.
  /payment-methods:
    post:
      description: "Add a payment method (credit or debit card) to the user's account for receiving cash-out payments"
      tags:
        - Payment Methods
      summary: Add payment method
      operationId: addPaymentMethod
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        201:
          description: Payment method
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Account'
        406:
          description: Invalid entry. Unprocessable Entity.
    get:
      description: "List payment methods (credit or debit card) connected to the user's account. There will usually be only one payment method active at any given time."
      tags:
        - Payment Methods
      summary: List payment methods
      operationId: listPaymentMethods
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
      responses:
        200:
          description: Payment methods
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Account'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
    delete:
      description: "Delete one payment method from the user's account"
      tags:
        - Payment Methods
      summary: Delete payment method
      operationId: deletePaymentMethod
      security:
        - bearerAuth: [ ]
      parameters:
        - name: account_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Payment method deleted

  /my-stats:
    get:
      description: "Display the user's canvassing statistics, such as calls made, visits made, ballots collected, and earnings balance."
      tags:
        - Profile
      summary: Display user stats
      operationId: displayUserStats
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
      responses:
        200:
          description: User stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserStats'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
  /campaigns:
    get:
      description: "List all the possible campaigns for which the user can canvass and the possible dollar value of canvassing that campaign. Filtered and sortable by campaign, location, radius, type, and status."
      tags:
        - Campaign
      summary: List all campaigns
      operationId: listCampaigns
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[campaign_id]
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[location]
          in: query
          required: false
          description: "Latitude, longitude, and radius seperated by a comma."
          schema:
            type: string
            example: 32.85299203584159,-98.71057783963626,5
        - name: filter[financial_type]
          in: query
          required: false
          description: Type of paying
          schema:
            type: string
            enum:
              - paid
              - volunteer
              - mix
        - name: filter[canvass_type]
          in: query
          required: false
          description: Type of canvassing
          schema:
            $ref: '#/components/schemas/CanvassType'
        - name: filter[status]
          in: query
          required: false
          schema:
            type: string
            enum:
              - requested
              - pending
              - approved
              - declined
        - name: sort
          in: query
          required: false
          description: Sorting options
          schema:
            type: string
            enum:
              - campaign_id
              - location
              - radius
              - financial_type
              - canvass_type
              - status
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - ascending
              - descending
      responses:
        200:
          description: List of campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Campaign'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
  /campaigns/{campaignId}:
    get:
      description: "Read a single campaign"
      tags:
        - Campaign
      summary: "Show a single campaign."
      operationId: readCampaign
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: One campaign
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Campaign'
        400:
          description: Bad request

  /campaigns/{campaignId}/select:
    get:
      description: "Select a campaign for the user."
      tags:
        - Campaign
      summary: RPC call to select a campaign
      operationId: selectCampaign
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Campaign selected
        400:
          description: Bad request

  /campaigns/{campaignId}/deselect:
    get:
      description: "Deselect a campaign from the user."
      tags:
        - Campaign
      summary: RPC call to deselect a campaign
      operationId: deselectCampaign
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Campaign deselected
        400:
          description: Bad request

  /campaigns/{campaignId}/new-screening:
    get:
      description: "Initiate a new screening."
      tags:
        - Campaign
      summary: RPC call to initiate a screening
      operationId: initiateScreening
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: New screening
        400:
          description: Bad request

  /contacts:
    get:
      description: "List all contacts (each of which can include multiple voters) within a given radius from the user's location."
      tags:
        - "Campaign: Contact"
      summary: List nearby contacts
      operationId: listNearbyContacts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: filter[location]
          in: query
          required: true
          description: "Latitude, longitude, and radius seperated by a comma."
          schema:
            type: string
            example: 32.85299203584159,-98.71057783963626,5
      responses:
        200:
          description: List of campaign contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Contact"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
        404:
          description: Not found

  /campaigns/{campaignId}/contacts:
    get:
      description: "List the available contacts (each of which can include multiple voters) by campaign. Filtered and sortable by location and radius."
      tags:
        - "Campaign: Contact"
      summary: List available campaign contacts
      operationId: listCampaignContacts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[location]
          in: query
          required: false
          description: "Latitude, longitude, and radius seperated by a comma."
          schema:
            type: string
            example: 32.85299203584159,-98.71057783963626,5
        - name: sort
          in: query
          required: false
          description: Sorting options
          schema:
            type: string
            enum:
              - location
              - radius
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - ascending
              - descending
      responses:
        200:
          description: List of campaign contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Contact"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
        404:
          description: Not found

  /campaigns/{campaignId}/scripts:
    get:
      description: "List the campaign scripts, filtered by campaign, filterable by voter ID. Includes the title, description, and whether or not the script is active."
      tags:
        - "Campaign: Script"
      summary: List campaign scripts
      operationId: listScripts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: filter[voterId]
          in: query
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Campaign scripts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ScriptIntro'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
        404:
          description: Not found

  /campaigns/{campaignId}/scripts/{scriptId}:
    get:
      description: "Read one campaign script."
      tags:
        - "Campaign: Script"
      summary: Read one script
      operationId: readScript
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A single script
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Script'
        404:
          description: Not found

  /campaigns/{campaignId}/scripts/{scriptId}/questions:
    get:
      description: "Show script question and answer options."
      tags:
        - "Campaign: Script"
      security:
        - bearerAuth: [ ]
      summary: Read script question
      operationId: readQuestion
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Script question and answer options
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Question"
        404:
          description: Not found
    post:
      description: "Add the voter's answer to the script question."
      tags:
        - "Campaign: Script"
      security:
        - bearerAuth: [ ]
      summary: Add answer to script question
      operationId: addAnswer
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/Answer'
      responses:
        201:
          description: Answer sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Answer'
        405:
          description: Validation error

  /campaigns/{campaignId}/scripts/{scriptId}/coalitions:
    get:
      description: "List coalitions, advocacy groups, or other associations related to this campaign."
      tags:
        - "Campaign: Script"
      summary: List related coalitions
      operationId: listRelated
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: scriptId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Related Coalitions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Coalition'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"
        404:
          description: Not found

  /campaigns/{campaignId}/contacts/{contactId}/{status}:
    get:
      description: "Updates the contact status"
      tags:
        - "Campaign: Contact"
      summary: RPC call to perform status change tasks such as assign a contact to a user (claim), release, mark completed or set in-process.
      operationId: updateContactStatus
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: status
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/CampaignContactStatus'
      responses:
        202:
          description: Contact status updated.
        400:
          description: Bad request

  /campaigns/{campaignId}/contacts/next:
    get:
      description: "Return the next contact (which can include multiple voters) in the list of contacts."
      tags:
        - "Campaign: Contact"
      summary: Return the next contact
      operationId: nextContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Next contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Contact'
        404:
          description: Not found

  /campaigns/{campaignId}/contacts/{contactId}/confirmation:
    post:
      description: "Confirm that the user is at a contact location (user can take a photo of the location to confirm)."
      tags:
        - "Campaign: Contact"
      summary: Confirm the contact location
      operationId: confirmContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        description: Photo of contact location
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Photo sent
        405:
          description: Validation error

  /campaigns/{campaignId}/contacts/{contactId}/rate:
    post:
      description: "Rate the interaction between the user and the voter (smiley, flat, frown)."
      tags:
        - "Campaign: Contact"
      summary: Rate contact interaction
      operationId: rateContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: contactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        201:
          description: Interaction rated
        405:
          description: Validation error

  /campaigns/{campaignId}/voters/{voterId}/ballot:
    post:
      description: "Send a photo of the ballot and the GPS coordinates when picking up a ballot."
      tags:
        - Campaign
      summary: Confirm ballot
      operationId: confirmBallot
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: voterId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: "Latitude, longitude seperated by a comma."
                file:
                  type: string
                  format: binary
      responses:
        201:
          description: Ballot confirmation sent
        405:
          description: Validation error

  /my-campaigns:
    get:
      description: "List the campaigns selected by the user. Includes information on campaign type, status, map, and credits."
      tags:
        - Campaign
      summary: List user's campaigns
      operationId: listUsersCampaigns
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[campaignId]
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[status]
          in: query
          required: false
          schema:
            type: string
            enum:
              - requested
              - pending
              - approved
              - declined
      responses:
        200:
          description: A list of user's campaigns
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Campaign"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /my-contacts:
    post:
      description: "Share the user's contact list to connect the user with people that he or she already knows for canvassing."
      tags:
        - "Shared Contacts"
      summary: Share user contacts
      operationId: shareContacts
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/SharedContact'
      responses:
        202:
          description: User contacts shared. Because contacts are created asynchronously they will not be returned in this request.
        406:
          description: Invalid entry
    get:
      description: "List the contacts shared from the user's contact list. Filtered and sortable by shared contact ID."
      tags:
        - "Shared Contacts"
      summary: List shared user contacts
      operationId: listContacts
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[sharedContactId]
          in: query
          required: false
          description: Shared user contact ID
          schema:
            type: string
            format: uuid
        - name: sort
          in: query
          required: false
          description: Sorting options
          schema:
            type: string
            enum:
              - sharedContactId
        - name: sort_order
          in: query
          required: false
          schema:
            type: string
            enum:
              - ascending
              - descending
      responses:
        200:
          description: A list of shared user contacts
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/SharedContact"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /my-contacts/{sharedContactId}:
    get:
      description: "Fetch one contact from the shared user contact list."
      tags:
        - "Shared Contacts"
      summary: Fetch one contact
      operationId: readContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sharedContactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A single shared user contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SharedContact"
        404:
          description: Not found
    patch:
      description: "Update one contact in the shared user contact list."
      tags:
        - "Shared Contacts"
      summary: Update a shared user contact
      operationId: updateContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sharedContactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SharedContact"
      responses:
        200:
          description: The updated shared user contact
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/SharedContact"
        406:
          description: Validation exception. Malformed request body.
    delete:
      description: "Delete one contact from the shared user contact list."
      tags:
        - "Shared Contacts"
      summary: Delete a shared user contact
      operationId: deleteContact
      security:
        - bearerAuth: [ ]
      parameters:
        - name: sharedContactId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: Contact deleted

  /coalitions:
    get:
      description: "List all coalitions, advocacy groups, or other associations the user could invite the voter to join."
      tags:
        - Coalition
      summary: List coalitions
      operationId: listCoalitions
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[voter_id]
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: filter[campaign_id]
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A list of coalitions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Coalition'
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /coalitions/{coalitionId}:
    get:
      description: "Display one coalition, advocay group, or other association."
      tags:
        - Coalition
      summary: Display one coalition
      operationId: readCoalition
      security:
        - bearerAuth: [ ]
      parameters:
        - name: coalitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A single coalition
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Coalition'

  /coalitions/{coalitionId}/join:
    get:
      description: "The voter being canvassed agrees to join a coalition, advocacy group, or other association."
      tags:
        - Coalition
      summary: RPC call to join a coalition
      operationId: joinCoalition
      security:
        - bearerAuth: [ ]
      parameters:
        - name: coalitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Coalition joined
        400:
          description: Bad request

  /coalitions/{coalitionId}/unjoin:
    get:
      description: "The voter being canvassed chooses to unjoin a coalition, advocacy group, or other association."
      tags:
        - Coalition
      summary: RPC call to unjoin a coalition
      operationId: unjoinCoalition
      security:
        - bearerAuth: [ ]
      parameters:
        - name: coalitionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Coalition unjoined
        400:
          description: Bad request

  /interaction-log:
    get:
      description: "List the user's canvassing interactions."
      tags:
        - Interactions
      summary: Log user interactions
      operationId: logInteractions
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: sessionId
          in: query
          required: false
          description: filter interactions by sessionId
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        200:
          description: Log of interactions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Interaction"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /session-history:
    get:
      description: "List of current and completed canvassing sessions."
      tags:
        - Interactions
      summary: List sessions
      operationId: listSessions
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[campaignId]
          in: query
          description: filter sessions by campaign
          schema:
            type: string
      responses:
        200:
          description: Sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Session"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /screenings:
    get:
      description: "Users are screened for each campaign they wish to join. This returns a list of screenings."
      tags:
        - Screening
      summary: List screenings
      operationId: listScreenings
      security:
        - bearerAuth: [ ]
      parameters:
        - name: page[number]
          in: query
          required: false
          description: Page number
          schema:
            type: number
            default: 1
        - name: page[size]
          in: query
          required: false
          description: Items per page
          schema:
            type: number
            default: 100
        - name: filter[campaignId]
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: List of screenings
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Screening"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /campaigns/{campaignId}/screenings:
    post:
      description: "Submit a new screening request with required question answers."
      tags:
        - Screening
      summary: Add screening
      operationId: addScreening
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Screening'
      responses:
        201:
          description: Screening added
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Screening'
        405:
          description: Validation error
    get:
      description: "View one screening."
      tags:
        - Screening
      summary: View one screening
      operationId: readScreening
      security:
        - bearerAuth: [ ]
      parameters:
        - name: campaignId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A single screening
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Screening'
        404:
          description: Not found

  /notifications:
    get:
      description: "List recent notifications"
      tags:
        - Notifications
      summary: List recent notifications.
      operationId: listNotifications
      security:
        - bearerAuth: [ ]
      responses:
        200:
          description: List of notifications
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/NotificationListItem"
                  meta:
                    type: object
                    properties:
                      pagination:
                        $ref: "#/components/schemas/Pager"

  /notifications/{notificationId}:
    get:
      description: "View one notification"
      tags:
        - Notifications
      summary: View one notification
      operationId: readNotification
      security:
        - bearerAuth: [ ]
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: A single notification
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Notification'
        404:
          description: Not found

  /notifications/{notificationId}/read:
    get:
      description: "Notifications can be read (or not) by users. This endpoint marks a notification as 'read'."
      tags:
        - Notifications
      summary: Change status to 'read'
      operationId: markRead
      security:
        - bearerAuth: [ ]
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Notification read
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationListItem'
        400:
          description: Bad request

  /notifications/{notificationId}/unread:
    get:
      description: "Notifications can be read (or not) by users. This endpoint marks a notification as 'unread'."
      tags:
        - Notifications
      summary: Change status to 'unread'
      operationId: markUnread
      security:
        - bearerAuth: [ ]
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        202:
          description: Notification unread
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/NotificationListItem'
        400:
          description: Bad request

components:
  schemas:
    Account:
      description: Account to receive cash-out payments
      properties:
        id:
          $ref: '#/components/schemas/Id'
        token_id:
          type: string
          writeOnly: true
          description: The PCI Compliant token that represents a payment method. This is generated through a flow on the front end.
        name:
          description: "Name on card (first and last name)"
          type: string
        masked_card_number:
          description: "Last four digits of credit card number"
          type: string
        card_type:
          description: "Type of credit card (e.g. Visa, Mastercard, etc.)"
          type: string
        expiration_date:
          description: "Expiration date of credit card (MM/YY)"
          type: string
    Answer:
      description: Answers to script questions
      properties:
        id:
          $ref: '#/components/schemas/Id'
        question_id:
          type: string
          format: uuid
        next_question_id:
          type: string
          format: uuid
          description: ID of the next question (for multi-part/follow-up questions)
        voter_id:
          type: string
          format: uuid
        answer:
          type: string
          description: The answer to the question given by the voter. The format will depend on the question type (multiple-choice, T/F, range, short answer)
        created:
          $ref: '#/components/schemas/Timestamp'
    Campaign:
      description: This represents the campaign.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
          readOnly: true
        logo:
          type: string
          format: url
        category:
          type: string
          enum:
            - Candidate
            - PAC
            - Advocacy
        financial_type:
          type: string
          enum:
            - paid
            - volunteer
            - mix
        credits:
          type: number
          format: float
          description: Number of credits
          minimum: 0
        credits_remaining:
          type: number
          format: float
          description: Number of credits remaining
          minimum: 0
        bio:
          description: A description of the campaign
          type: string
        affiliation:
          $ref: '#/components/schemas/Affiliation'
        city:
          type: string
        state:
          type: string
        zipcode:
          type: number
        canvass_type:
          $ref: '#/components/schemas/CanvassType'
        retrieve_ballots:
          type: boolean
        status:
          type: string
          enum:
            - requested
            - pending-approval
            - more-information-needed
            - application-approved
            - application-denied
        map:
          type: string
          format: url
          description: GeoJson string
        start:
          type: string
          format: date
        end:
          type: string
          format: date
        user_stats:
          $ref: '#/components/schemas/UserCampaignStats'
        created:
          $ref: '#/components/schemas/Timestamp'
    CanvassType:
      description: "This represents the campaign canvassing options: calling exclusively, visiting door-to-door exclusively, or both."
      type: string
      enum:
        - calling
        - walking
        - calling-and-walking
    CampaignContactStatus:
      description: "When a user interacts with a contact they need to be able to set the state of that contact so that other canvassers don't contact that contact at the same time. 'claim' marks the contact as claimed. 'in-process' means that the canvasser is with the contact. 'complete' marks the interaction as completed. 'release' returns the contact back to the pool of available contacts."
      type: string
      enum:
        - in-process
        - claim
        - complete
        - release
    CashOut:
      description: This represents the user cash out option.
      properties:
        account_id:
          type: string
          format: uuid
        amount:
          description: Dollar amount to cash out
          type: number
          format: USD
    Coalition:
      description: This represents a coalition, advocacy group, or other association.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        campaign_id:
          type: string
          format: uuid
          readOnly: true
        name:
          description: Name of coalition, advocacy group, or other association
          type: string
        body:
          description: A brief description of the coalition
          type: string
    Contact:
      description: This represents a contact (which can include multiple voters) to be canvassed.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        voters:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Voter"
        phone:
          type: string
          pattern: '[\+1\s]*\-?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}'
          example: '(785) 555-1212'
        street:
          type: string
          description: Street address
        city:
          type: string
        state:
          type: string
          minLength: 2
          maxLength: 2
        zipcode:
          type: string
          minLength: 5
        timezone:
          type: string
          description: TODO provide ISO code/convention being used for timezones.
          pattern: ""
    Interaction:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        session_id:
          type: string
          format: uuid
          readOnly: true
        user_id:
          type: string
          format: uuid
          readOnly: true
        voter_id:
          type: string
          format: uuid
          readOnly: true
        action:
          type: string
          enum:
            - start-call
            - end-call
            - start-door-knock
            - end-door-knock
            - collect-ballot
        interaction_type:
          type: string
          enum:
            - contact
            - voter
        created:
          $ref: '#/components/schemas/Timestamp'
    Pager:
      type: object
      properties:
        current_page:
          type: integer
          format: int64
          description: Current page number
          example: 1
          minimum: 1
        count:
          type: integer
          format: int64
          description: Current record count
          minimum: 0
        per_page:
          type: integer
          format: int64
          description: Max per page
          example: 100
          minimum: 1
        total_pages:
          type: integer
          format: int64
          description: Total pages
          example: 5
          minimum: 0
        total:
          type: integer
          format: int64
          description: Total number of records
          example: 5
          minimum: 0
    Question:
      description: Script question with answer options
      properties:
        id:
          $ref: '#/components/schemas/Id'
        campaign_id:
          type: string
          format: uuid
          readOnly: true
        script_id:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
          description: Question and answer options text
          readOnly: true
        options:
          type: string
          description: Extra settings for labels and form options
          readOnly: true
        type:
          type: string
          enum:
            - checkbox
            - radio
            - boolean
            - text
            - number
            - number_range
            - date
            - date_range
            - multiple-choice
            - T/F
            - range
            - short answer
    Rating:
      description: This represents the rating of a user's interaction with a voter
      properties:
        id:
          $ref: '#/components/schemas/Id'
        voter_id:
          type: string
          format: uuid
        rating:
          type: string
          enum:
            - smiley
            - flat
            - frown
        comments:
          type: string
          description: Additional comments
        created:
          $ref: '#/components/schemas/Timestamp'
    Screening:
      description: This represent the screening for a campaign.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          type: string
          enum:
            - requested
            - pending-approval
            - more-information-needed
            - application-approved
            - application-denied
        screening_url:
          type: string
          format: url
          description: Link to screening type
        results_url:
          type: string
          format: url
          description: Link to screening results
        created:
          $ref: '#/components/schemas/Timestamp'
        modified:
          $ref: '#/components/schemas/Timestamp'
    ScriptIntro:
      description: This represents the script intro for listings.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        campaign_id:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          description: Script title
        description:
          type: string
          description: Script description
        canvass_method:
          type: string
          enum:
            - calling
            - walking
        active:
          type: boolean
    Script:
      description: This represents the complete script for interacting with a voter
      allOf:
        - $ref: '#/components/schemas/ScriptIntro'
      properties:
        body:
          type: string
          description: Script body
    Session:
      description: This represents a user canvassing session
      properties:
        id:
          $ref: '#/components/schemas/Id'
        user_id:
          type: string
          format: uuid
          readOnly: true
        campaign_id:
          type: string
          format: uuid
          readOnly: true
        calls:
          description: Number of calls completed
          type: integer
          format: int64
        door_knocks:
          description: Number of door knock contacts completed
          type: integer
          format: int64
        ballots:
          description: Number of ballots retrieved
          type: integer
          format: int64
        credits_earned:
          type: number
          format: float
          readOnly: true
          minimum: 0
        start_time:
          $ref: '#/components/schemas/Timestamp'
        end_time:
          $ref: '#/components/schemas/Timestamp'
    SharedContact:
      description: This represents a shared user contact.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          format: email
        first_name:
          type: string
          description: Contact's first name
        last_name:
          type: string
          description: Contact's last name
        phone:
          type: string
          pattern: '[\+1\s]*\-?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}'
          example: '(785) 555-1212'
        street:
          type: string
          description: Street address
        city:
          type: string
        state:
          type: string
          minLength: 2
          maxLength: 2
        zipcode:
          type: string
          minLength: 5
        timezone:
          type: string
          description: TODO provide ISO code/convention being used for timezones.
          pattern: ""
        created:
          $ref: '#/components/schemas/Timestamp'
        modified:
          $ref: '#/components/schemas/Timestamp'
    Timestamp:
      type: integer
      format: int64
      description: Unix Timestamp
      example: 1633358232
      readOnly: true
    Transaction:
      description: This represents the user's transaction history
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        status:
          type: string
          enum:
            - pending
            - approved
            - failed
        amount:
          description: Cash paid out
          type: number
          format: float
          minimum: 0
        created:
          $ref: '#/components/schemas/Timestamp'
        modified:
          $ref: '#/components/schemas/Timestamp'
    User:
      description: This represents the user's profile.
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          format: email
          nullable: false
        username:
          type: string
          description: This is the user's "handle"
        affiliation:
          $ref: '#/components/schemas/Affiliation'
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        age_range:
          type: string
          description: The user's age range
          enum:
            - '18-35'
            - '35-55'
            - '55+'
        birth_date:
          type: string
          format: date
          description: "YYYY-MM-DD formatted date"
        phone:
          type: string
          pattern: '[\+1\s]*\-?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}'
          example: '(785) 555-1212'
          readOnly: true
        city:
          type: string
        state:
          type: string
          minLength: 2
          maxLength: 2
        zipcode:
          type: string
          minLength: 5
        timezone:
          type: string
          description: TODO provide ISO code/convention being used for timezones.
          pattern: ""
        license_front_url:
          type: string
          format: url
          description: Photo of user's driver's license -Front
        license_back_url:
          type: string
          format: url
          description: Photo of user's driver's license -Back
        profile_image_url:
          type: string
          format: url
          description: Photo of user.
        privacy:
          type: object
          allOf:
            - $ref: '#/components/schemas/WriteableTimestamp'
            - description: "Null means user has not accepted the privacy statement. Unix timestamp shows the most recent time that the user has accepted the privacy statement."
        terms:
          type: object
          allOf:
            - $ref: '#/components/schemas/WriteableTimestamp'
            - description: "Null means user has not accepted the terms. Unix timestamp shows the most recent time that the user has accepted the terms."
        status:
          readOnly: true
          type: string
          enum:
            - verification-pending
            - verification-failed
            - verified
            - deactivated
        current_balance:
          readOnly: true
          type: number
          format: float
          description: This corresponds to the My Account "Current Balance" field.
        approved_balance:
          readOnly: true
          type: number
          format: float
          description: This corresponds to the My Account "Approved Balance" field.
        total_earnings:
          readOnly: true
          type: number
          format: float
          description: This corresponds to the Campaigns "Lifetime Earnings" field.
        potential_earnings:
          readOnly: true
          type: number
          format: float
          description: This corresponds to the "Possible Earnings" field.
        notify_account_status:
          type: boolean
          default: true
          description: Should the user receive account status notifications?
        notify_transactions:
          type: boolean
          default: true
          description: Should the user receive transaction notifications?
        notify_campaign_approval:
          type: boolean
          default: true
          description: Should the user receive campaign approval notifications?
        notify_new_campaign:
          type: boolean
          default: true
          description: Should the user receive new campaign notifications?
        created:
          $ref: '#/components/schemas/Timestamp'
        modified:
          $ref: '#/components/schemas/Timestamp'
    UserCampaignStats:
      description: This represents the user's statistics for this specific campaign.
      properties:
        call_credits:
          type: number
          format: float
          description: Credits per call completed
        home_credits:
          type: number
          format: float
          description: Credits per home visit completed
        ballot_credits:
          type: number
          format: float
          description: Credits per ballot retrieved
        calls_made:
          type: integer
          format: int64
          description: Number of calls made for this campaign
          minimum: 0
        calls_remaining:
          type: integer
          format: int64
          description: Number of calls made for this campaign
          minimum: 0
        homes_visited:
          type: integer
          format: int64
          description: Number of visits made for this campaign
          minimum: 0
        homes_remaining:
          type: integer
          format: int64
          description: Number of homes left to be visited
          minimum: 0
        ballots_remaining:
          type: integer
          format: int64
          description: Number of ballots left to be retrieved
          minimum: 0
        ballots_retrieved:
          type: integer
          format: int64
          description: Number of ballots the user has retrieved for this campaign
          minimum: 0
        dollars_earned:
          type: number
          format: float
          description: User's earnings for this campaign
    Voter:
      description: This represents a single voter at a contact location
      properties:
        id:
          $ref: '#/components/schemas/Id'
        email:
          type: string
          format: email
        first_name:
          type: string
          description: Voter's first name
        last_name:
          type: string
          description: Voter's last name
        phone:
          type: string
          pattern: '[\+1\s]*\-?\(?\d{3}\)?[\s.-]?\d{3}[\s.-]?\d{4}'
          example: '(785) 555-1212'
        street:
          type: string
        city:
          type: string
        state:
          type: string
          minLength: 2
          maxLength: 2
        zipcode:
          type: string
          minLength: 5
        timezone:
          type: string
        age:
          type: number
          minimum: 0
        sex:
          type: string
          enum:
            - male
            - female
        affiliation:
          $ref: '#/components/schemas/Affiliation'
        affiliation_other:
          type: string
          description: If other is specified a non-standard affiliation can be entered here.
        voted_last_election:
          type: boolean
    NotificationListItem:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        title:
          type: string
          readOnly: true
          description: "Something like `Account Verification` or 'Cash Out' Typically the type of message or the name of a campaign."
        short_description:
          type: string
          readOnly: true
          description: "Brief message like the status of the Account Verification: 'pending' or 'Application Approved!'"
        icon:
          type: string
          readOnly: true
          description: "A URL to an icon image. For example, if it's a campaign notification the icon would be the campaign image. If it's a generic notification then a default icon."
        status:
          type: string
          readOnly: true
          enum:
            - read
            - unread
        date:
          $ref: '#/components/schemas/Timestamp'
    Notification:
      type: object
      allOf:
        - $ref: '#/components/schemas/NotificationListItem'
      properties:
        body:
          type: string
          description: The message body.
        model:
          type: string
          description: This is an identifier that allows the message to be linked to a view in the application. In the case of a message related to a campaign the model would be 'campaign', and the accompanied 'model_id' field would match to the campaign id.
        model_id:
          type: string
          description: This is an identifier that allows the message to be linked to a view in the application. In the case of a message related to a campaign the model would be 'campaign', and the accompanied 'model_id' field would match to the campaign id.
    WriteableTimestamp:
      type: integer
      format: int64
      description: Unix Timestamp
      example: 1633358232
    Id:
      type: string
      format: uuid
      readOnly: true
    Affiliation:
      type: string
      description: The user's party affiliation
      enum:
        - democrat
        - republican
        - independent
        - other
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
